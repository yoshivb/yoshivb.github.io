/*! For license information please see bundle.js.LICENSE.txt */
!function(){var e={615:function(e){e.exports=function(){"use strict";var e,t,n,i,o;Array.prototype.find||Object.defineProperty(Array.prototype,"find",{value:function(e){if(null==this)throw new TypeError('"this" is null or not defined');var t=Object(this),n=t.length>>>0;if("function"!=typeof e)throw new TypeError("predicate must be a function");for(var i=arguments[1],o=0;o<n;){var r=t[o];if(e.call(i,r,o,t))return r;o++}}}),Array.from||(Array.from=(e=Object.prototype.toString,t=function(t){return"function"==typeof t||"[object Function]"===e.call(t)},n=function(e){var t=Number(e);return isNaN(t)?0:0!==t&&isFinite(t)?(t>0?1:-1)*Math.floor(Math.abs(t)):t},i=Math.pow(2,53)-1,o=function(e){var t=n(e);return Math.min(Math.max(t,0),i)},function(e){var n=this,i=Object(e);if(null==e)throw new TypeError("Array.from requires an array-like object - not null or undefined");var r,l=arguments.length>1?arguments[1]:void 0;if(void 0!==l){if(!t(l))throw new TypeError("Array.from: when provided, the second argument must be a function");arguments.length>2&&(r=arguments[2])}for(var a,c=o(i.length),s=t(n)?Object(new n(c)):new Array(c),u=0;u<c;)a=i[u],s[u]=l?void 0===r?l(a,u):l.call(r,a,u):a,u+=1;return s.length=c,s}));var r=window,l=document,a=navigator.userAgent.match(/(iPhone|iPod|iPad|Android|playbook|silk|BlackBerry|BB10|Windows Phone|Tizen|Bada|webOS|IEMobile|Opera Mini)/),c=/(Mac|iPhone|iPod|iPad)/i.test(r.navigator.userAgent),s="ontouchstart"in r||navigator.msMaxTouchPoints>0||navigator.maxTouchPoints,u={test:{},shared:{}},f=["parallax","scrollOverflowReset","dragAndMove","offsetSections","fadingEffect","responsiveSlides","continuousHorizontal","interlockedSlides","scrollHorizontally","resetSliders","cards","dropEffect","waterEffect"];function d(e,t){r.console&&r.console[e]&&r.console[e]("fullPage: "+t)}function v(e){return"none"!==r.getComputedStyle(e).display}function p(e){return Array.from(e).filter((function(e){return v(e)}))}function h(e,t){return(t=arguments.length>1?t:document)?t.querySelectorAll(e):null}function g(e){e=e||{};for(var t=1,n=arguments.length;t<n;++t){var i=arguments[t];if(i)for(var o in i)i.hasOwnProperty(o)&&"__proto__"!=o&&"constructor"!=o&&("[object Object]"!==Object.prototype.toString.call(i[o])?e[o]=i[o]:e[o]=g(e[o],i[o]))}return e}function m(e,t){return null!=e&&e.classList.contains(t)}function S(){return"innerHeight"in r?r.innerHeight:l.documentElement.offsetHeight}function b(){return r.innerWidth}function y(e,t){var n;for(n in e=x(e),t)if(t.hasOwnProperty(n)&&null!==n)for(var i=0;i<e.length;i++)e[i].style[n]=t[n];return e}function w(e){return e.previousElementSibling}function T(e){return e.nextElementSibling}function E(e,t){e=M(e)?e[0]:e;for(var n=null!=t?h(t,e.parentNode):e.parentNode.childNodes,i=0,o=0;o<n.length;o++){if(n[o]==e)return i;1==n[o].nodeType&&i++}return-1}function x(e){return M(e)?e:[e]}function L(e){e=x(e);for(var t=0;t<e.length;t++)e[t].style.display="none";return e}function A(e){e=x(e);for(var t=0;t<e.length;t++)e[t].style.display="block";return e}function M(e){return"[object Array]"===Object.prototype.toString.call(e)||"[object NodeList]"===Object.prototype.toString.call(e)}function k(e,t){e=x(e);for(var n=0;n<e.length;n++)e[n].classList.add(t);return e}function O(e,t){e=x(e);for(var n=t.split(" "),i=0;i<n.length;i++){t=n[i];for(var o=0;o<e.length;o++)e[o].classList.remove(t)}return e}function C(e,t){t.appendChild(e)}function R(e,t,n){var i;t=t||l.createElement("div");for(var o=0;o<e.length;o++){var r=e[o];(n&&!o||!n)&&(i=t.cloneNode(!0),r.parentNode.insertBefore(i,r)),i.appendChild(r)}return e}function I(e,t){R(e,t,!0)}function D(e){for(var t=l.createDocumentFragment();e.firstChild;)t.appendChild(e.firstChild);e.parentNode.replaceChild(t,e)}function j(e,t){return e&&1===e.nodeType?G(e,t)?e:j(e.parentNode,t):null}function B(e,t){H(e,e.nextSibling,t)}function P(e,t){H(e,e,t)}function H(e,t,n){M(n)||("string"==typeof n&&(n=Q(n)),n=[n]);for(var i=0;i<n.length;i++)e.parentNode.insertBefore(n[i],t)}function N(e){if(void 0!==e&&e.fitToSection)return l.body.scrollTop;var t=l.documentElement;return(r.pageYOffset||t.scrollTop)-(t.clientTop||0)}function z(e){return Array.prototype.filter.call(e.parentNode.children,(function(t){return t!==e}))}function F(e){e.preventDefault()}function W(e,t){return e.getAttribute(t)}function _(e,t,n){l.addEventListener(e,t,"undefined"===n?null:n)}function V(e,t,n){r.addEventListener(e,t,"undefined"===n?null:n)}function Y(e,t,n){l.removeEventListener(e,t,"undefined"===n?null:n)}function X(e,t,n){r.removeEventListener(e,t,"undefined"===n?null:n)}function K(e){if("function"==typeof e)return!0;var t=Object.prototype.toString.call(e);return"[object Function]"===t||"[object GeneratorFunction]"===t}function U(e,t,n){var i;n=void 0===n?{}:n,"function"==typeof r.CustomEvent?i=new CustomEvent(t,{detail:n}):(i=l.createEvent("CustomEvent")).initCustomEvent(t,!0,!0,n),e.dispatchEvent(i)}function G(e,t){return(e.matches||e.matchesSelector||e.msMatchesSelector||e.mozMatchesSelector||e.webkitMatchesSelector||e.oMatchesSelector).call(e,t)}function q(e,t){if("boolean"==typeof t)for(var n=0;n<e.length;n++)e[n].style.display=t?"block":"none";return e}function Q(e){var t=l.createElement("div");return t.innerHTML=e.trim(),t.firstChild}function $(e){e=x(e);for(var t=0;t<e.length;t++){var n=e[t];n&&n.parentElement&&n.parentNode.removeChild(n)}}function J(e,t,n){for(var i=e[n],o=[];i;)(G(i,t)||null==t)&&o.push(i),i=i[n];return o}function Z(e,t){return J(e,t,"nextElementSibling")}function ee(e,t){return J(e,t,"previousElementSibling")}function te(e){return e[e.length-1]}function ne(e,t){for(var n=0,i=e.slice(Math.max(e.length-t,1)),o=0;o<i.length;o++)n+=i[o];return Math.ceil(n/t)}function ie(e,t){e.setAttribute(t,W(e,"data-"+t)),e.removeAttribute("data-"+t)}function oe(e){return oe="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},oe(e)}r.NodeList&&!NodeList.prototype.forEach&&(NodeList.prototype.forEach=function(e,t){t=t||window;for(var n=0;n<this.length;n++)e.call(t,this[n],n,this)}),"function"!=typeof Object.assign&&Object.defineProperty(Object,"assign",{value:function(e,t){if(null==e)throw new TypeError("Cannot convert undefined or null to object");for(var n=Object(e),i=1;i<arguments.length;i++){var o=arguments[i];if(null!=o)for(var r in o)Object.prototype.hasOwnProperty.call(o,r)&&(n[r]=o[r])}return n},writable:!0,configurable:!0}),window.fp_utils={$:h,deepExtend:g,hasClass:m,getWindowHeight:S,css:y,prev:w,next:T,last:function(e){return e[e.length-1]},index:E,getList:x,hide:L,show:A,isArrayOrList:M,addClass:k,removeClass:O,appendTo:C,wrap:R,wrapAll:I,unwrap:D,closest:j,after:B,before:P,insertBefore:H,getScrollTop:N,siblings:z,preventDefault:F,isFunction:K,trigger:U,matches:G,toggle:q,createElementFromHTML:Q,remove:$,untilAll:J,nextAll:Z,prevAll:ee,showError:d};var re={events:{},on:function(e,t){var n=this;return"object"!==oe(this.events[e])&&(this.events[e]=[]),this.events[e].push(t),function(){return n.removeListener(e,t)}},removeListener:function(e,t){if("object"===oe(this.events[e])){var n=this.events[e].indexOf(t);n>-1&&this.events[e].splice(n,1)}},emit:function(e){for(var t=this,n=arguments.length,i=new Array(n>1?n-1:0),o=1;o<n;o++)i[o-1]=arguments[o];"object"===oe(this.events[e])&&this.events[e].forEach((function(e){return e.apply(t,i)}))},once:function(e,t){var n=this,i=this.on(e,(function(){i();for(var e=arguments.length,o=new Array(e),r=0;r<e;r++)o[r]=arguments[r];t.apply(n,o)}))}},le={numSections:0,numSlides:0,slides:[],sections:[],activeSection:null,scrollTrigger:null,isBeyondFullpage:!1,aboutToScrollToFullPage:!1,slideMoving:!1,isResizing:!1,isScrolling:!1,lastScrolledDestiny:void 0,lastScrolledSlide:void 0,activeAnimation:!1,canScroll:!0,touchDirection:"none",wheelDirection:"none",isGrabbing:!1,isUsingWheel:!1,isWindowFocused:!0,previousDestTop:0,windowsHeight:S(),isDoingContinousVertical:!1,timeouts:{},scrollY:0,scrollX:0};function ae(e){Object.assign(le,e)}function ce(){return le}function se(e){re.emit("onClickOrTouch",{e:e,target:e.target})}function ue(){["click","touchstart"].forEach((function(e){Y(e,se)}))}function fe(){ae({isWindowFocused:!0})}r.state=le,re.on("bindEvents",(function(){["click","touchstart"].forEach((function(e){_(e,se)})),V("focus",fe),re.on("onDestroy",ue)}));var de="fullpage-wrapper",ve="."+de,pe="fp-responsive",he="fp-notransition",ge="fp-destroyed",me="fp-enabled",Se="fp-viewing",be="active",ye=".active",we="fp-completely",Te="fp-section",Ee="."+Te,xe=Ee+ye,Le=".fp-tableCell",Ae="fp-auto-height",Me="fp-auto-height-responsive",ke="fp-nav",Oe="#fp-nav",Ce="fp-slide",Re="."+Ce,Ie=Re+ye,De="fp-slides",je=".fp-slides",Be="fp-slidesContainer",Pe="."+Be,He="fp-table",Ne="fp-overflow",ze="."+Ne,Fe="fp-slidesNav",We="."+Fe,_e=".fp-slidesNav a",Ve="fp-controlArrow",Ye="."+Ve,Xe="fp-prev",Ke=".fp-controlArrow.fp-prev",Ue="fp-next",Ge=".fp-controlArrow.fp-next",qe={menu:!1,anchors:[],lockAnchors:!1,navigation:!1,navigationPosition:"right",navigationTooltips:[],showActiveTooltip:!1,slidesNavigation:!1,slidesNavPosition:"bottom",scrollBar:!1,hybrid:!1,licenseKey:"",credits:{enabled:!0,label:"Made with fullPage.js",position:"right"},css3:!0,scrollingSpeed:700,autoScrolling:!0,fitToSection:!0,easing:"easeInOutCubic",easingcss3:"ease",loopBottom:!1,loopTop:!1,loopHorizontal:!0,continuousVertical:!1,continuousHorizontal:!1,scrollHorizontally:!1,interlockedSlides:!1,dragAndMove:!1,offsetSections:!1,resetSliders:!1,fadingEffect:!1,normalScrollElements:null,scrollOverflow:!0,scrollOverflowReset:!1,touchSensitivity:5,touchWrapper:null,bigSectionsDestination:null,keyboardScrolling:!0,animateAnchor:!0,recordHistory:!0,allowCorrectDirection:!1,scrollOverflowMacStyle:!0,controlArrows:!0,controlArrowsHTML:['<div class="fp-arrow"></div>','<div class="fp-arrow"></div>'],controlArrowColor:"#fff",verticalCentered:!0,sectionsColor:[],paddingTop:0,paddingBottom:0,fixedElements:null,responsive:0,responsiveWidth:0,responsiveHeight:0,responsiveSlides:!1,parallax:!1,parallaxOptions:{type:"reveal",percentage:62,property:"translate"},cards:!1,cardsOptions:{perspective:100,fadeContent:!0,fadeBackground:!0},sectionSelector:".section",slideSelector:".slide",afterLoad:null,beforeLeave:null,onLeave:null,afterRender:null,afterResize:null,afterReBuild:null,afterSlideLoad:null,onSlideLeave:null,afterResponsive:null,onScrollOverflow:null,lazyLoading:!0,observer:!0},Qe=null,$e=!1,Je=g({},qe),Ze=null;function et(e){return Qe}function tt(){return Ze||qe}function nt(){return Je}function it(e,t,n){Ze[e]=t,"internal"!==n&&(Je[e]=t)}function ot(){if(!tt().anchors.length){var e="[data-anchor]",t=h(tt().sectionSelector.split(",").join("[data-anchor],")+e,Qe);t.length&&t.length===h(tt().sectionSelector,Qe).length&&($e=!0,t.forEach((function(e){tt().anchors.push(W(e,"data-anchor").toString())})))}if(!tt().navigationTooltips.length){var n="[data-tooltip]",i=h(tt().sectionSelector.split(",").join("[data-tooltip],")+n,Qe);i.length&&i.forEach((function(e){tt().navigationTooltips.push(W(e,"data-tooltip").toString())}))}}var rt=function(e){this.anchor=e.anchor,this.item=e.item,this.index=e.index(),this.isLast=this.index===e.item.parentElement.querySelectorAll(e.selector).length-1,this.isFirst=!this.index,this.isActive=e.isActive},lt=function(e,t){this.parent=this.parent||null,this.selector=t,this.anchor=W(e,"data-anchor")||tt().anchors[E(e,tt().sectionSelector)],this.item=e,this.isVisible=v(e),this.isActive=m(e,be),this.hasScroll=m(e,Ne),this.isSection=t===tt().sectionSelector,this.container=j(e,Pe)||j(e,ve),this.index=function(){return this.siblings().indexOf(this)}};function at(e){return e.map((function(e){return e.item}))}function ct(e,t){return e.find((function(e){return e.item===t}))}lt.prototype.siblings=function(){return this.isSection?this.isVisible?le.sections:le.sectionsIncludingHidden:this.parent?this.parent.slides:0},lt.prototype.prev=function(){var e=this.siblings(),t=(this.isSection?e.indexOf(this):this.parent.slides.indexOf(this))-1;return t>=0?e[t]:null},lt.prototype.next=function(){var e=this.siblings(),t=(this.isSection?e.indexOf(this):this.parent.slides.indexOf(this))+1;return t<e.length?e[t]:null},lt.prototype.getSiblings=function(){return this.isSection?le.sections:le.panels};var st,ut=function(e){rt.call(this,e)},ft=function(e){rt.call(this,e)};function dt(e){var t=h(Ie,e);return t.length&&(e=t[0]),e}function vt(e){var t,n,i=tt();return i.autoScrolling&&!i.scrollBar?(t=-e,n=h(ve)[0]):i.fitToSection?(t=e,n=l.body):(t=e,n=window),{options:t,element:n}}function pt(e,t){!tt().autoScrolling||tt().scrollBar||e.self!=window&&m(e,De)?e.self!=window&&m(e,De)?e.scrollLeft=t:e.scrollTo(0,t):e.style.top=t+"px"}function ht(e){var t="transform "+tt().scrollingSpeed+"ms "+tt().easingcss3;return O(e,he),y(e,{"-webkit-transition":t,transition:t})}function gt(e,t){var n=e.index(),i=E(t,Ee);return n==i?"none":n>i?"up":"down"}function mt(e){return k(e,he)}function St(e){return{"-webkit-transform":e,"-moz-transform":e,"-ms-transform":e,transform:e}}function bt(e,t){t?ht(et()):mt(et()),clearTimeout(st),y(et(),St(e)),u.test.translate3d=e,st=setTimeout((function(){O(et(),he)}),10)}function yt(e){var t=Math.round(e);if(tt().css3&&tt().autoScrolling&&!tt().scrollBar)bt("translate3d(0px, -"+t+"px, 0px)",!1);else if(tt().autoScrolling&&!tt().scrollBar)y(et(),{top:-t+"px"}),u.test.top=-t+"px";else{var n=vt(t);pt(n.element,n.options)}}function wt(e,t){it("scrollingSpeed",e,t)}function Tt(e,t,n,i){var o,a=function(e){return e.self!=r&&m(e,De)?e.scrollLeft:!tt().autoScrolling||tt().scrollBar?N(tt()):e.offsetTop}(e),c=t-a,s=!1;ae({activeAnimation:!0}),e===l.body&&y(l.body,{"scroll-snap-type":"none"});window.requestAnimationFrame((function l(u){o||(o=u);var f=Math.floor(u-o);if(le.activeAnimation){var d=t;n&&(d=r.fp_easings[tt().easing](f,a,c,n)),f<=n&&pt(e,d),f<n?window.requestAnimationFrame(l):void 0===i||s||(i(),s=!0)}else s||(i(),s=!0)}))}function Et(e){return e&&!e.item?new ut(new nn(e)):e?new ut(e):null}function xt(e){return e?new ft(e):null}function Lt(e,t){var n,i=function(e,t){var n={afterRender:function(){return{section:Et(ce().activeSection),slide:xt(ce().activeSection.activeSlide)}},onLeave:function(){return{origin:Et(t.items.origin),destination:Et(t.items.destination),direction:t.direction,trigger:ce().scrollTrigger}},afterLoad:function(){return n.onLeave()},afterSlideLoad:function(){return{section:Et(t.items.section),origin:Et(t.items.origin),destination:Et(t.items.destination),direction:t.direction,trigger:ce().scrollTrigger}},onSlideLeave:function(){return n.afterSlideLoad()},beforeLeave:function(){return n.onLeave()},onScrollOverflow:function(){return{section:Et(ce().activeSection),slide:xt(ce().activeSection.activeSlide),position:t.position,direction:t.direction}}};return n[e]()}(e,t);return U(et(),e,i),!1!==tt()[e].apply(i[Object.keys(i)[0]],(n=i,Object.keys(n).map((function(e){return n[e]}))))}function At(e){var t=dt(e);h("video, audio",t).forEach((function(e){e.hasAttribute("data-autoplay")&&"function"==typeof e.play&&e.play()})),h('iframe[src*="youtube.com/embed/"]',t).forEach((function(e){e.hasAttribute("data-autoplay")&&Mt(e),e.onload=function(){e.hasAttribute("data-autoplay")&&Mt(e)}}))}function Mt(e){e.contentWindow.postMessage('{"event":"command","func":"playVideo","args":""}',"*")}function kt(e){var t=dt(e);h("video, audio",t).forEach((function(e){e.hasAttribute("data-keepplaying")||"function"!=typeof e.pause||e.pause()})),h('iframe[src*="youtube.com/embed/"]',t).forEach((function(e){/youtube\.com\/embed\//.test(W(e,"src"))&&!e.hasAttribute("data-keepplaying")&&e.contentWindow.postMessage('{"event":"command","func":"pauseVideo","args":""}',"*")}))}function Ot(){h('iframe[src*="youtube.com/embed/"]',et()).forEach((function(e){var t,n,i;n="enablejsapi=1",i=W(t=e,"src"),t.setAttribute("src",i+(/\?/.test(i)?"&":"?")+n)}))}function Ct(e){tt().lazyLoading&&h("img[data-src], img[data-srcset], source[data-src], source[data-srcset], video[data-src], audio[data-src], iframe[data-src]",dt(e)).forEach((function(e){if(["src","srcset"].forEach((function(t){var n=W(e,"data-"+t);null!=n&&n&&(ie(e,t),e.addEventListener("load",(function(){})))})),G(e,"source")){var t=j(e,"video, audio");t&&(t.load(),t.onloadeddata=function(){})}}))}u.setScrollingSpeed=wt;var Rt=null,It=null,Dt=null;function jt(){var e=ce().activeSection.item,t=ce().activeSection.activeSlide,n=Bt(e),i=String(n);t&&(i=i+"-"+Bt(t.item)),i=i.replace("/","-").replace("#","");var o=new RegExp("\\b\\s?fp-viewing-[^\\s]+\\b","g");Rt.className=Rt.className.replace(o,""),k(Rt,"fp-viewing-"+i)}function Bt(e){if(!e)return null;var t=W(e,"data-anchor"),n=E(e);return null==t&&(t=n),t}function Pt(e,t,n){var i="";tt().anchors.length&&!tt().lockAnchors&&(e?(null!=n&&(i=n),null==t&&(t=e),ae({lastScrolledSlide:t}),Ht(i+"/"+t)):null!=e?(ae({lastScrolledSlide:t}),Ht(n)):Ht(n)),jt()}function Ht(e){if(tt().recordHistory)location.hash=e;else if(a||s)r.history.replaceState(void 0,void 0,"#"+e);else{var t=r.location.href.split("#")[0];r.location.replace(t+"#"+e)}}function Nt(e,t,n){var i="Section"===t?tt().anchors[e]:W(n,"data-anchor");return encodeURI(tt().navigationTooltips[e]||i||t+" "+(e+1))}function zt(e){F(e),ae({scrollTrigger:"horizontalNav"});var t=j(this,Ee),n=h(je,j(this,Ee))[0],i=ct(ce().sections,t).slides[E(j(this,"li"))];re.emit("landscapeScroll",{slides:n,destination:i.item})}var Ft,Wt={};function _t(e,t,n){"all"!==t?Wt[n][t]=e:Object.keys(Wt[n]).forEach((function(t){Wt[n][t]=e}))}function Vt(){return Wt}function Yt(){var e=j(this,Ee);m(this,Xe)?Vt().m.left&&(ae({scrollTrigger:"slideArrow"}),re.emit("moveSlideLeft",{section:e})):Vt().m.right&&(ae({scrollTrigger:"slideArrow"}),re.emit("moveSlideRight",{section:e}))}function Xt(){clearTimeout(Ft)}function Kt(e,t,n){var i,o,r=j(e,Ee),l=ce().sections.filter((function(e){return e.item==r}))[0],a=l.slides.filter((function(e){return e.item==t}))[0],c={slides:e,destiny:t,direction:n,destinyPos:{left:t.offsetLeft},slideIndex:a.index(),section:r,sectionIndex:l.index(),anchorLink:l.anchor,slidesNav:h(We,r)[0],slideAnchor:a.anchor,prevSlide:l.activeSlide.item,prevSlideIndex:l.activeSlide.index(),items:{section:l,origin:l.activeSlide,destination:a},localIsResizing:le.isResizing};c.xMovement=(i=c.prevSlideIndex,o=c.slideIndex,i==o?"none":i>o?"left":"right"),c.direction=c.direction?c.direction:c.xMovement,c.localIsResizing||ae({canScroll:!1}),tt().onSlideLeave&&!c.localIsResizing&&"none"!==c.xMovement&&K(tt().onSlideLeave)&&!1===Lt("onSlideLeave",c)?ae({slideMoving:!1}):(k(t,be),O(z(t),be),Jt(),c.localIsResizing||(kt(c.prevSlide),Ct(t)),function(e){!tt().loopHorizontal&&tt().controlArrows&&(q(h(Ke,e.section),0!==e.slideIndex),q(h(Ge,e.section),null!=T(e.destiny)))}(c),l.isActive&&!c.localIsResizing&&Pt(c.slideIndex,c.slideAnchor,c.anchorLink),function(e,t,n){var i=t.destinyPos;if(r=t.slidesNav,l=t.slideIndex,tt().slidesNavigation&&null!=r&&(O(h(ye,r),be),k(h("a",h("li",r)[l]),be)),ae({scrollX:Math.round(i.left)}),tt().css3){var o="translate3d(-"+Math.round(i.left)+"px, 0px, 0px)";u.test.translate3dH[t.sectionIndex]=o,y(ht(h(Pe,e)),St(o)),clearTimeout(Ft),Ft=setTimeout((function(){n&&Gt(t)}),tt().scrollingSpeed)}else u.test.left[t.sectionIndex]=Math.round(i.left),Tt(e,Math.round(i.left),tt().scrollingSpeed,(function(){n&&Gt(t)}));var r,l}(e,c,!0))}function Ut(){clearTimeout(Ft)}function Gt(e){e.localIsResizing||(K(tt().afterSlideLoad)&&Lt("afterSlideLoad",e),ae({canScroll:!0}),At(e.destiny)),ae({slideMoving:!1})}function qt(e,t){wt(0,"internal"),void 0!==t&&ae({isResizing:!0}),Kt(j(e,je),e),void 0!==t&&ae({isResizing:!1}),wt(nt().scrollingSpeed,"internal")}Wt.m={up:!0,down:!0,left:!0,right:!0},Wt.k=g({},Wt.m),re.on("onClickOrTouch",(function(e){var t=e.target;(G(t,Ye)||j(t,Ye))&&Yt.call(t,e)})),u.landscapeScroll=Kt,re.on("bindEvents",(function(){re.on("onPerformMovement",Xt)}));var Qt=null,$t=null;function Jt(){le.activeSection=null,le.sections.map((function(e){var t=m(e.item,be);e.isActive=t,e.hasScroll=m(e.item,Ne),t&&(le.activeSection=e),e.slides.length&&(e.activeSlide=null,e.slides.map((function(t){var n=m(t.item,be);t.hasScroll=m(t.item,Ne),t.isActive=n,n&&(e.activeSlide=t)})))})),function(){var e=le.activeSection,t=!!le.activeSection&&le.activeSection.slides.length,n=le.activeSection?le.activeSection.activeSlide:null;if(!e&&le.sections.length&&!ce().isBeyondFullpage&&Qt){var i=tn(Qt,le.sections);i&&(le.activeSection=i,le.activeSection.isActive=!0,k(le.activeSection.item,be)),le.activeSection&&yt(le.activeSection.item.offsetTop)}if(t&&!n&&$t){var o=tn($t,le.activeSection.slides);o&&(le.activeSection.activeSlide=o,le.activeSection.activeSlide.isActive=!0,k(le.activeSection.activeSlide.item,be)),le.activeSection.activeSlide&&qt(le.activeSection.activeSlide.item,"internal")}}()}function Zt(){var e=h(tt().sectionSelector,et()),t=p(e),n=Array.from(e).map((function(e){return new nn(e)})),i=n.filter((function(e){return e.isVisible})),o=i.reduce((function(e,t){return e.concat(t.slides)}),[]);Qt=en(le.activeSection),$t=en(le.activeSection?le.activeSection.activeSlide:null),le.numSections=t.length,le.numSlides=i.reduce((function(e,t){return e+t.slides.length}),0),le.sections=i,le.sectionsIncludingHidden=n,le.slides=o,le.panels=le.sections.concat(le.slides)}function en(e){if(!e)return null;var t=e?e.item:null,n=e.isSection?le.sectionsIncludingHidden:le.activeSection.slidesIncludingHidden;if(t){var i=ct(n,t);return i?i.index():null}return null}function tn(e,t){var n,i=e-1,o=e;do{if(n=t[i]||t[o])break;i-=1,o+=1}while(i>=0||o<t.length);return n}var nn=function(e){var t=this;[].push.call(arguments,tt().sectionSelector),lt.apply(this,arguments),this.allSlidesItems=h(tt().slideSelector,e),this.slidesIncludingHidden=Array.from(this.allSlidesItems).map((function(e){return new on(e,t)})),this.slides=this.slidesIncludingHidden.filter((function(e){return e.isVisible})),this.activeSlide=this.slides.length?this.slides.filter((function(e){return e.isActive}))[0]||this.slides[0]:null};nn.prototype=lt.prototype,nn.prototype.constructor=nn;var on=function(e,t){this.parent=t,lt.call(this,e,tt().slideSelector)};function rn(){k(h(tt().sectionSelector,et()),Te),k(h(tt().slideSelector,et()),Ce)}function ln(){U(w(this),"click")}function an(){$(h(Oe));var e=l.createElement("div");e.setAttribute("id",ke);var t=l.createElement("ul");e.appendChild(t),C(e,Rt);var n=h(Oe)[0];k(n,"fp-"+tt().navigationPosition),tt().showActiveTooltip&&k(n,"fp-show-active");for(var i="",o=0;o<ce().sections.length;o++){var r=ce().sections[o],a="";tt().anchors.length&&(a=r.anchor),i+='<li><a href="#'+encodeURI(a)+'"><span class="fp-sr-only">'+Nt(r.index(),"Section")+"</span><span></span></a>";var c=tt().navigationTooltips[r.index()];void 0!==c&&""!==c&&(i+='<div class="fp-tooltip fp-'+tt().navigationPosition+'">'+c+"</div>"),i+="</li>"}h("ul",n)[0].innerHTML=i;var s=h("li",h(Oe)[0])[ce().activeSection.index()];k(h("a",s),be)}function cn(e){e.preventDefault&&F(e),ae({scrollTrigger:"verticalNav"});var t=E(j(this,"#fp-nav li"));re.emit("scrollPage",{destination:ce().sections[t]})}function sn(e,t){it("recordHistory",e,t)}function un(e,t){e||yt(0),it("autoScrolling",e,t);var n=ce().activeSection.item;if(tt().autoScrolling&&!tt().scrollBar)y(Dt,{overflow:"hidden",height:"100%"}),O(Rt,"fp-scrollable"),sn(nt().recordHistory,"internal"),y(et(),{"-ms-touch-action":"none","touch-action":"none"}),null!=n&&yt(n.offsetTop);else if(y(Dt,{overflow:"visible",height:"initial"}),k(Rt,"fp-scrollable"),sn(!!tt().autoScrolling&&nt().recordHistory,"internal"),y(et(),{"-ms-touch-action":"","touch-action":""}),null!=n){y(Dt,{"scroll-behavior":"unset"});var i=vt(n.offsetTop);i.element.scrollTo(0,i.options)}}on.prototype=lt.prototype,on.prototype.constructor=nn,u.setRecordHistory=sn,u.setAutoScrolling=un,u.test.setAutoScrolling=un,u.setFitToSection=vn,u.fitToSection=function(){};var fn,dn="scrollSnapAlign"in(fn=l.documentElement.style)||"webkitScrollSnapAlign"in fn||"msScrollSnapAlign"in fn;function vn(e,t){pn(e),it("fitToSection",e,t)}function pn(e){dn&&(tt().fitToSection&&(!tt().autoScrolling||tt().scrollBar)&&e?k:O)(It,"fp-snaps")}function hn(){var e=tt().responsive||tt().responsiveWidth,t=tt().responsiveHeight,n=e&&r.innerWidth<e,i=t&&r.innerHeight<t;e&&t?gn(n||i):e?gn(n):t&&gn(i)}function gn(e){var t=mn();e?t||(un(!1,"internal"),vn(!1,"internal"),L(h(Oe)),k(Rt,pe),K(tt().afterResponsive)&&tt().afterResponsive.call(et(),e)):t&&(un(nt().autoScrolling,"internal"),vn(nt().autoScrolling,"internal"),A(h(Oe)),O(Rt,pe),K(tt().afterResponsive)&&tt().afterResponsive.call(et(),e))}function mn(){return m(Rt,pe)}u.setResponsive=gn,re.on("bindEvents",(function(){r.addEventListener("load",(function(){tt().scrollOverflow&&!tt().scrollBar&&(bn.makeScrollable(),bn.afterSectionLoads())})),tt().scrollOverflow&&at(ce().panels).forEach((function(e){e.addEventListener("scroll",bn.onPanelScroll),e.addEventListener("wheel",bn.preventScrollWhileMoving),e.addEventListener("keydown",bn.preventScrollWhileMoving),e.addEventListener("keydown",bn.blurFocusOnAfterLoad)}))}));var Sn,bn={focusedElem:null,timeBeforeReachingLimit:null,timeLastScroll:null,preventScrollWhileMoving:function(e){if(!le.canScroll)return F(e),!1},afterSectionLoads:function(){l.activeElement===this.focusedElem&&this.focusedElem.blur(),h(".fp-overflow.active",ce().activeSection.item)[0]&&(this.focusedElem=h(ze,ce().activeSection.item)[0],this.focusedElem.focus())},makeScrollable:function(){tt().scrollOverflowMacStyle&&!c&&k(Rt,"fp-scroll-mac"),ce().panels.forEach((function(e){if(!(m(e.item,"fp-noscroll")||m(e.item,Ae)||m(e.item,Me)&&mn())){var t=bn.scrollable(e.item),n=bn.shouldBeScrollable(e.item);n?(k(t,Ne),t.setAttribute("tabindex","-1")):(O(t,Ne),t.removeAttribute("tabindex")),e.hasScroll=n}}))},scrollable:function(e){return h(Ie,e)[0]||e},isScrollable:function(e){return e.isSection&&e.activeSlide?e.activeSlide.hasScroll:e.hasScroll},shouldBeScrollable:function(e){return e.scrollHeight>r.innerHeight},isScrolled:function(e,t){if(!le.canScroll)return!1;if(!tt().scrollOverflow)return!0;var n=bn.scrollable(t),i=n.scrollTop,o="up"===e&&i<=0,r="down"===e&&n.scrollHeight<=Math.ceil(n.offsetHeight+i),l=o||r;return l||(this.timeBeforeReachingLimit=(new Date).getTime()),l},shouldMovePage:function(){this.timeLastScroll=(new Date).getTime();var e=this.timeLastScroll-bn.timeBeforeReachingLimit,t=(a||s)&&le.isGrabbing,n=le.isUsingWheel&&e>600;return t&&e>400||n},onPanelScroll:(Sn=0,function(e){var t=e.target.scrollTop,n="none"!==le.touchDirection?le.touchDirection:Sn<t?"down":"up";Sn=t,K(tt().onScrollOverflow)&&Lt("onScrollOverflow",{position:t,direction:n}),m(e.target,Ne)&&le.canScroll&&bn.isScrolled(n,e.target)&&bn.shouldMovePage()&&re.emit("onScrollOverflowScrolled",{direction:n})})};function yn(e){tt().verticalCentered&&(bn.isScrollable(e)||m(e.item,He)||k(e.item,He))}function wn(e){var t=e.slides.length,n=e.allSlidesItems,i=e.slides,o=100*t,r=100/t;if(!h(je,e.item)[0]){var a=l.createElement("div");a.className=De,I(n,a);var c=l.createElement("div");c.className=Be,I(n,c)}y(h(Pe,e.item),{width:o+"%"}),t>1&&(tt().controlArrows&&function(e){var t=e.item,n=[Q(tt().controlArrowsHTML[0]),Q(tt().controlArrowsHTML[1])];B(h(je,t)[0],n),k(n,Ve),k(n[0],Xe),k(n[1],Ue),"#fff"!==tt().controlArrowColor&&(y(h(Ge,t),{"border-color":"transparent transparent transparent "+tt().controlArrowColor}),y(h(Ke,t),{"border-color":"transparent "+tt().controlArrowColor+" transparent transparent"})),tt().loopHorizontal||L(h(Ke,t))}(e),tt().slidesNavigation&&function(e){var t=e.item,n=e.slides.length;C(Q('<div class="fp-slidesNav"><ul></ul></div>'),t);var i=h(We,t)[0];k(i,"fp-"+tt().slidesNavPosition);for(var o=0;o<n;o++)C(Q('<li><a href="#"><span class="fp-sr-only">'+Nt(o,"Slide",h(Re,t)[o])+"</span><span></span></a></li>"),h("ul",i)[0]);y(i,{"margin-left":"-"+i.innerWidth/2+"px"});var r=e.activeSlide?e.activeSlide.index():0;k(h("a",h("li",i)[r]),be)}(e)),i.forEach((function(e){y(e.item,{width:r+"%"}),tt().verticalCentered&&yn(e)}));var s=e.activeSlide||null;null!=s&&le.activeSection&&(0!==le.activeSection.index()||0===le.activeSection.index()&&0!==s.index())?qt(s.item,"internal"):k(n[0],be)}var Tn,En=null;function xn(e){var t=e.item,n=e.allSlidesItems.length,i=e.index();!ce().activeSection&&e.isVisible&&(k(t,be),Jt()),En=ce().activeSection.item,tt().paddingTop&&y(t,{"padding-top":tt().paddingTop}),tt().paddingBottom&&y(t,{"padding-bottom":tt().paddingBottom}),void 0!==tt().sectionsColor[i]&&y(t,{"background-color":tt().sectionsColor[i]}),void 0!==tt().anchors[i]&&t.setAttribute("data-anchor",e.anchor),n||yn(e)}u.getActiveSection=function(){return ce().activeSection};var Ln={attributes:!1,subtree:!0,childList:!0,characterData:!0};function An(){return p(h(tt().slideSelector,et())).length!==ce().numSlides}function Mn(){return An()||p(h(tt().sectionSelector,et())).length!==ce().numSections}function kn(e){var t=An();Mn()&&!le.isDoingContinousVertical&&(tt().observer&&Tn&&Tn.disconnect(),Zt(),Jt(),tt().anchors=[],$(h(Oe)),rn(),ot(),tt().navigation&&an(),t&&($(h(We)),$(h(Ye))),ce().sections.forEach((function(e){e.slides.length?t&&wn(e):xn(e)}))),tt().observer&&Tn&&h(ve)[0]&&Tn.observe(h(ve)[0],Ln)}re.on("bindEvents",(function(){var e,t,n;tt().observer&&"MutationObserver"in window&&h(ve)[0]&&(e=h(ve)[0],t=Ln,(n=new MutationObserver(kn)).observe(e,t),Tn=n),re.on("contentChanged",kn)})),u.render=kn;var On=function(){var e=!1;try{var t=Object.defineProperty({},"passive",{get:function(){e=!0}});V("testPassive",null,t),X("testPassive",null,t)}catch(e){}return function(){return e}}();function Cn(){return!!On()&&{passive:!1}}(new Date).getTime();var Rn,In,Dn,jn,Bn,Pn,Hn=(Pn=(new Date).getTime(),function(e,t){var n=(new Date).getTime(),i="wheel"===e?tt().scrollingSpeed:100;return n-Pn>=i&&(Bn=t(),Pn=n),void 0===Bn||Bn}),Nn=(Dn=(new Date).getTime(),jn=[],{registerEvent:function(e){var t=(e=e||r.event).wheelDelta||-e.deltaY||-e.detail,n=Math.max(-1,Math.min(1,t)),i=void 0!==e.wheelDeltaX||void 0!==e.deltaX;Rn=Math.abs(e.wheelDeltaX)<Math.abs(e.wheelDelta)||Math.abs(e.deltaX)<Math.abs(e.deltaY)||!i;var o=(new Date).getTime();In=n<0?"down":"up",jn.length>149&&jn.shift(),jn.push(Math.abs(t));var l=o-Dn;Dn=o,l>200&&(jn=[])},isAccelerating:function(){var e=ne(jn,10)>=ne(jn,70);return!!jn.length&&e&&Rn},getDirection:function(){return In}});function zn(){var e=tt().css3?N(tt())+S():te(ce().sections).item.offsetTop+te(ce().sections).item.offsetHeight,t=vt(e);u.test.top=-e+"px",y(l.body,{"scroll-snap-type":"none"}),y(Dt,{"scroll-behavior":"unset"}),ae({canScroll:!1}),Tt(t.element,t.options,tt().scrollingSpeed,(function(){setTimeout((function(){ae({isBeyondFullpage:!0}),ae({canScroll:!0})}),30)}))}function Fn(){et().getBoundingClientRect().bottom>=0&&Wn()}function Wn(){var e=vt(te(ce().sections).item.offsetTop);ae({canScroll:!1}),Tt(e.element,e.options,tt().scrollingSpeed,(function(){ae({canScroll:!0}),ae({isBeyondFullpage:!1}),ae({isAboutToScrollToFullPage:!1})}))}var _n,Vn,Yn,Xn,Kn,Un=(Yn=!1,Xn={},Kn={},function(e,t,n){switch(e){case"set":Xn[t]=(new Date).getTime(),Kn[t]=n;break;case"isNewKeyframe":var i=(new Date).getTime();Yn=i-Xn[t]>Kn[t]}return Yn});function Gn(e){ae({isDoingContinousVertical:!0});var t=ce().activeSection.item;return e.isMovementUp?P(t,Z(t,Ee)):B(t,ee(t,Ee).reverse()),yt(ce().activeSection.item.offsetTop),function(){for(var e=h(Ie),t=0;t<e.length;t++)qt(e[t],"internal")}(),e.wrapAroundElements=t,e.dtop=e.element.offsetTop,e.yMovement=gt(ce().activeSection,e.element),e}function qn(e){null!=e.wrapAroundElements&&(e.isMovementUp?P(h(Ee)[0],e.wrapAroundElements):B(h(Ee)[ce().sections.length-1],e.wrapAroundElements),yt(ce().activeSection.item.offsetTop),function(){for(var e=h(Ie),t=0;t<e.length;t++)qt(e[t],"internal")}(),ae({isDoingContinousVertical:!1}))}function Qn(){var e=h(".fp-auto-height")[0]||mn()&&h(".fp-auto-height-responsive")[0];tt().lazyLoading&&e&&h(Ee+":not("+".active)").forEach((function(e){var t,n,i,o,r,l;t=e.getBoundingClientRect(),n=t.top,i=t.bottom,r=n+(o=2)<le.windowsHeight&&n>0,l=i>o&&i<le.windowsHeight,(r||l)&&Ct(e)}))}function $n(e,t){var n;n=e,tt().menu&&tt().menu.length&&h(tt().menu).forEach((function(e){null!=e&&(O(h(ye,e),be),k(h('[data-menuanchor="'+n+'"]',e),be))})),function(e,t){var n=h(Oe)[0];tt().navigation&&null!=n&&"none"!==n.style.display&&(O(h(ye,n),be),k(e?h('a[href="#'+e+'"]',n):h("a",h("li",n)[t]),be))}(e,t)}function Jn(e,t){if(K(tt().beforeLeave))return Hn(ce().scrollTrigger,(function(){return Lt(e,t)}))}function Zn(e,t,n){var i=e.item;if(null!=i){var o,r,l={element:i,callback:t,isMovementUp:n,dtop:ei(i),yMovement:gt(ce().activeSection,i),anchorLink:e.anchor,sectionIndex:e.index(),activeSlide:e.activeSlide?e.activeSlide.item:null,leavingSection:ce().activeSection.index()+1,localIsResizing:le.isResizing,items:{origin:ce().activeSection,destination:e},direction:null};if(!(ce().activeSection.item==i&&!le.isResizing||tt().scrollBar&&N(tt())===l.dtop&&!m(i,Ae))){if(null!=l.activeSlide&&(o=W(l.activeSlide,"data-anchor"),r=E(l.activeSlide,null)),!l.localIsResizing){var a=l.yMovement;if(void 0!==n&&(a=n?"up":"down"),l.direction=a,K(tt().beforeLeave)&&!1===Jn("beforeLeave",l))return;if(K(tt().onLeave)&&!Lt("onLeave",l))return}tt().autoScrolling&&tt().continuousVertical&&void 0!==l.isMovementUp&&(!l.isMovementUp&&"up"==l.yMovement||l.isMovementUp&&"down"==l.yMovement)&&(l=Gn(l)),l.localIsResizing||kt(ce().activeSection.item),k(i,be),O(z(i),be),Jt(),Ct(i),ae({canScroll:u.test.isTesting}),Pt(r,o,l.anchorLink),function(e){var t=tt().scrollingSpeed<700,n=t?700:tt().scrollingSpeed;if(ae({touchDirection:"none",scrollY:Math.round(e.dtop)}),re.emit("onPerformMovement"),tt().css3&&tt().autoScrolling&&!tt().scrollBar)bt("translate3d(0px, -"+Math.round(e.dtop)+"px, 0px)",!0),tt().scrollingSpeed?(clearTimeout(_n),_n=setTimeout((function(){ti(e),ae({canScroll:!t||u.test.isTesting})}),tt().scrollingSpeed)):ti(e);else{var i=vt(e.dtop);u.test.top=-e.dtop+"px",y(Dt,{"scroll-behavior":"unset"}),clearTimeout(_n),Tt(i.element,i.options,tt().scrollingSpeed,(function(){tt().scrollBar?_n=setTimeout((function(){ti(e)}),30):(ti(e),ae({canScroll:!t||u.test.isTesting}))}))}t&&(clearTimeout(Vn),Vn=setTimeout((function(){ae({canScroll:!0})}),n))}(l),ae({lastScrolledDestiny:l.anchorLink}),$n(l.anchorLink,l.sectionIndex)}}}function ei(e){var t=e.offsetHeight,n=e.offsetTop,i=n,o=n>le.previousDestTop,r=i-S()+t,l=tt().bigSectionsDestination;return t>S()?(o||l)&&"bottom"!==l||(i=r):(o||le.isResizing&&null==T(e))&&(i=r),ae({previousDestTop:i}),i}function ti(e){tt().fitToSection&&m(h(xe)[0],Ae)&&y(l.body,{"scroll-snap-type":"none"}),ae({isBeyondFullpage:!1}),qn(e),K(tt().afterLoad)&&!e.localIsResizing&&Lt("afterLoad",e),Jt(),e.localIsResizing||At(e.element),k(e.element,we),O(z(e.element),we),Qn(),bn.afterSectionLoads(),ae({canScroll:!0}),K(e.callback)&&e.callback()}function ni(){var e=ce().activeSection.next();e||!tt().loopBottom&&!tt().continuousVertical||(e=ce().sections[0]),null!=e?Zn(e,null,!1):et().scrollHeight<Rt.scrollHeight&&re.emit("scrollBeyondFullpage")}function ii(){var e=ce().activeSection.prev();e||!tt().loopTop&&!tt().continuousVertical||(e=te(ce().sections)),null!=e&&Zn(e,null,!0)}u.moveTo=moveTo,u.getScrollY=function(){return le.scrollY},re.on("onDestroy",(function(){clearTimeout(_n),clearTimeout(Vn)})),u.moveSectionDown=ni,u.moveSectionUp=ii;var oi=0;function ri(e){tt().autoScrolling&&(le.canScroll&&(e.pageY<oi&&Vt().m.up?ii():e.pageY>oi&&Vt().m.down&&ni()),oi=e.pageY)}function li(e){if(Vt().m[e]){var t="down"===e?ni:ii;tt().scrollOverflow&&bn.isScrollable(ce().activeSection)?bn.isScrolled(e,ce().activeSection.item)&&bn.shouldMovePage()&&t():t()}}var ai,ci,si,ui=0,fi=0,di=0,vi=0,pi=(r.PointerEvent&&(si={down:"pointerdown",move:"pointermove"}),si),hi={touchmove:"ontouchmove"in window?"touchmove":pi?pi.move:null,touchstart:"ontouchstart"in window?"touchstart":pi?pi.down:null};function gi(e){var t=j(e.target,Ee)||ce().activeSection.item,n=bn.isScrollable(ce().activeSection);if(mi(e)){ae({isGrabbing:!0,isUsingWheel:!1}),tt().autoScrolling&&(!n||n&&!le.canScroll)&&F(e);var i=yi(e);di=i.y,vi=i.x;var o=Math.abs(ui-di)>r.innerHeight/100*tt().touchSensitivity,l=Math.abs(fi-vi)>b()/100*tt().touchSensitivity,a=h(je,t).length&&Math.abs(fi-vi)>Math.abs(ui-di),c=ui>di?"down":"up";ae({touchDirection:a?fi>vi?"right":"left":c}),a?!le.slideMoving&&l&&(fi>vi?Vt().m.right&&re.emit("moveSlideRight",{section:t}):Vt().m.left&&re.emit("moveSlideLeft",{section:t})):tt().autoScrolling&&le.canScroll&&o&&li(c)}}function mi(e){return void 0===e.pointerType||"mouse"!=e.pointerType}function Si(e){if(tt().fitToSection&&ae({activeAnimation:!1}),mi(e)){var t=yi(e);ui=t.y,fi=t.x}V("touchend",bi)}function bi(){X("touchend",bi),ae({isGrabbing:!1})}function yi(e){var t={};return t.y=void 0!==e.pageY&&(e.pageY||e.pageX)?e.pageY:e.touches[0].pageY,t.x=void 0!==e.pageX&&(e.pageY||e.pageX)?e.pageX:e.touches[0].pageX,s&&mi(e)&&tt().scrollBar&&void 0!==e.touches&&(t.y=e.touches[0].pageY,t.x=e.touches[0].pageX),t}function wi(e){tt().autoScrolling&&mi(e)&&Vt().m.up&&(le.canScroll||F(e))}function Ti(e,t){var n=null==t?ce().activeSection.item:t,i=ct(le.sections,n),o=h(je,n)[0];if(!(null==o||le.slideMoving||i.slides.length<2)){var r=i.activeSlide,l="left"===e?r.prev():r.next();if(!l){if(!tt().loopHorizontal)return;l="left"===e?te(i.slides):i.slides[0]}ae({slideMoving:!u.test.isTesting}),Kt(o,l.item,e)}}function Ei(e){Ti("left",e)}function xi(e){Ti("right",e)}function Li(e){var t=ce().sections.filter((function(t){return t.anchor===e}))[0];if(!t){var n=void 0!==e?e-1:0;t=ce().sections[n]}return t}function Ai(e){null!=e&&Kt(j(e,je),e)}function Mi(e,t){var n=Li(e);if(null!=n){var i=function(e,t){var n=t.slides.filter((function(t){return t.anchor===e}))[0];return null==n&&(e=void 0!==e?e:0,n=t.slides[e]),n?n.item:null}(t,n);n.anchor===le.lastScrolledDestiny||m(n.item,be)?Ai(i):Zn(n,(function(){Ai(i)}))}}function ki(e,t){var n=Li(e);void 0!==t?Mi(e,t):null!=n&&Zn(n)}function Oi(){clearTimeout(ci),Y("keydown",Ri),Y("keyup",Ii)}function Ci(){var e=l.activeElement;return G(e,"textarea")||G(e,"input")||G(e,"select")||"true"==W(e,"contentEditable")||""==W(e,"contentEditable")}function Ri(e){clearTimeout(ci);var t=e.keyCode,n=[37,39].indexOf(t)>-1,i=tt().autoScrolling||n;9===t?function(e){var t=e.shiftKey,n=l.activeElement,i=ji(dt(ce().activeSection.item));function o(e){return F(e),i[0]?i[0].focus():null}(function(e){var t=ji(l),n=t.indexOf(l.activeElement),i=t[e.shiftKey?n-1:n+1],o=j(i,Re),r=j(i,Ee);return!o&&!r})(e)||(n?null==j(n,xe+","+xe+" "+Ie)&&(n=o(e)):o(e),(!t&&n==i[i.length-1]||t&&n==i[0])&&F(e))}(e):!Ci()&&tt().keyboardScrolling&&i&&(ai=e.ctrlKey,ci=setTimeout((function(){!function(e){var t=e.shiftKey,n=l.activeElement,i=G(n,"video")||G(n,"audio"),o={up:bn.isScrolled("up",ce().activeSection.item),down:bn.isScrolled("down",ce().activeSection.item)},r=[37,39].indexOf(e.keyCode)>-1;if(Pi(e),le.canScroll||r)switch(ae({scrollTrigger:"keydown"}),e.keyCode){case 38:case 33:Vt().k.up&&o.up&&(le.isBeyondFullpage?re.emit("onKeyDown",{e:e}):ii());break;case 32:if(t&&Vt().k.up&&!i&&o.up){ii();break}case 40:case 34:if(Vt().k.down&&o.down){if(le.isBeyondFullpage)return;32===e.keyCode&&i||ni()}break;case 36:Vt().k.up&&ki(1);break;case 35:Vt().k.down&&ki(ce().sections.length);break;case 37:Vt().k.left&&Ei();break;case 39:Vt().k.right&&xi();break;default:;}}(e)}),0))}function Ii(e){le.isWindowFocused&&(ai=e.ctrlKey)}function Di(){ae({isWindowFocused:!1}),ai=!1}function ji(e){return[].slice.call(h('a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, [tabindex="0"], [contenteditable]',e)).filter((function(e){return"-1"!==W(e,"tabindex")&&null!==e.offsetParent}))}function Bi(e){Ci()||Pi(e)}function Pi(e){(function(e){return[40,38,32,33,34].indexOf(e.keyCode)>-1&&!le.isBeyondFullpage})(e)&&!j(e.target,ze)&&e.preventDefault()}u.moveSlideLeft=Ei,u.moveSlideRight=xi,u.moveTo=ki,re.on("bindEvents",(function(){V("blur",Di),_("keydown",Ri),Rt.addEventListener("keydown",Bi),_("keyup",Ii),re.on("onDestroy",Oi)}));var Hi=(new Date).getTime(),Ni=[];function zi(e){e?(function(){var e,t="";r.addEventListener?e="addEventListener":(e="attachEvent",t="on");var n="onwheel"in l.createElement("div")?"wheel":void 0!==l.onmousewheel?"mousewheel":"DOMMouseScroll",i=Cn();"DOMMouseScroll"==n?l[e](t+"MozMousePixelScroll",Fi,i):l[e](t+n,Fi,i)}(),et().addEventListener("mousedown",Wi),et().addEventListener("mouseup",_i)):(l.addEventListener?(Y("mousewheel",Fi,!1),Y("wheel",Fi,!1),Y("MozMousePixelScroll",Fi,!1)):l.detachEvent("onmousewheel",Fi),et().removeEventListener("mousedown",Wi),et().removeEventListener("mouseup",_i))}function Fi(e){var t=(new Date).getTime(),n=m(h(".fp-completely")[0],"fp-normal-scroll"),i=function(e,t){(new Date).getTime();var n=ce().isBeyondFullpage&&e.getBoundingClientRect().bottom>=0&&"up"===Nn.getDirection(),i=ce().isAboutToScrollToFullPage;if(i)return F(t),!1;if(ce().isBeyondFullpage){if(n){var o;if(!(i||Un("isNewKeyframe","beyondFullpage")&&Nn.isAccelerating()))return(o=vt(te(ce().sections).item.offsetTop+te(ce().sections).item.offsetHeight)).element.scrollTo(0,o.options),ae({isAboutToScrollToFullPage:!1}),F(t),!1;if(Nn.isAccelerating())return n=!1,ae({isAboutToScrollToFullPage:!0}),ae({scrollTrigger:"wheel"}),Wn(),F(t),!1}else Un("set","beyondFullpage",1e3);if(!i&&!n)return!0}}(et(),e);if(le.isUsingWheel||ae({isGrabbing:!1,isUsingWheel:!0,touchDirection:"none"}),!Vt().m.down&&!Vt().m.up)return F(e),!1;if(i)return!0;if(!1===i)return F(e),!1;if(tt().autoScrolling&&!ai&&!n){var o=(e=e||r.event).wheelDelta||-e.deltaY||-e.detail,l=Math.max(-1,Math.min(1,o)),a=void 0!==e.wheelDeltaX||void 0!==e.deltaX,c=Math.abs(e.wheelDeltaX)<Math.abs(e.wheelDelta)||Math.abs(e.deltaX)<Math.abs(e.deltaY)||!a,s=l<0?"down":l>0?"up":"none";Ni.length>149&&Ni.shift(),Ni.push(Math.abs(o)),tt().scrollBar&&F(e);var u=t-Hi;return Hi=t,u>200&&(Ni=[]),ae({wheelDirection:s}),le.canScroll&&ne(Ni,10)>=ne(Ni,70)&&c&&(ae({scrollTrigger:"wheel"}),li(l<0?"down":"up")),!1}tt().fitToSection&&ae({activeAnimation:!1})}function Wi(e){var t;2==e.which&&(t=e.pageY,oi=t,et().addEventListener("mousemove",ri))}function _i(e){2==e.which&&et().removeEventListener("mousemove",ri)}function Vi(e){e?(zi(!0),function(){if(hi.touchmove&&(a||s)){tt().autoScrolling&&(Rt.removeEventListener(hi.touchmove,wi,{passive:!1}),Rt.addEventListener(hi.touchmove,wi,{passive:!1}));var e=tt().touchWrapper;e.removeEventListener(hi.touchstart,Si),e.removeEventListener(hi.touchmove,gi,{passive:!1}),e.addEventListener(hi.touchstart,Si),e.addEventListener(hi.touchmove,gi,{passive:!1})}}()):(zi(!1),function(){if(hi.touchmove&&(a||s)){tt().autoScrolling&&(Rt.removeEventListener(hi.touchmove,gi,{passive:!1}),Rt.removeEventListener(hi.touchmove,wi,{passive:!1}));var e=tt().touchWrapper;e.removeEventListener(hi.touchstart,Si),e.removeEventListener(hi.touchmove,gi,{passive:!1})}}())}u.setMouseWheelScrolling=zi;var Yi=!0;function Xi(){["mouseenter","touchstart","mouseleave","touchend"].forEach((function(e){Y(e,Ui,!0)}))}function Ki(e,t){document["fp_"+e]=t,_(e,Ui,!0)}function Ui(e){var t=e.type,n=!1,i="mouseleave"===t?e.toElement||e.relatedTarget:e.target;i!=document&&i?("touchend"===t&&(Yi=!1,setTimeout((function(){Yi=!0}),800)),("mouseenter"!==t||Yi)&&(tt().normalScrollElements.split(",").forEach((function(e){if(!n){var t=G(i,e),o=j(i,e);(t||o)&&(u.shared.isNormalScrollElement||Vi(!1),u.shared.isNormalScrollElement=!0,n=!0)}})),!n&&u.shared.isNormalScrollElement&&(Vi(!0),u.shared.isNormalScrollElement=!1))):Vi(!0)}function Gi(e,t){wt(0,"internal"),ki(e,t),wt(nt().scrollingSpeed,"internal")}re.on("bindEvents",(function(){tt().normalScrollElements&&(["mouseenter","touchstart"].forEach((function(e){Ki(e,!1)})),["mouseleave","touchend"].forEach((function(e){Ki(e,!0)}))),re.on("onDestroy",Xi)})),u.silentMoveTo=Gi;var qi,Qi,$i=S(),Ji=b(),Zi=!1;function eo(){clearTimeout(qi),clearTimeout(Qi),X("resize",to)}function to(){Zi||(tt().autoScrolling&&!tt().scrollBar||!tt().fitToSection)&&io(S()),function(){if(a)for(var e=0;e<4;e++)Qi=setTimeout((function(){window.requestAnimationFrame((function(){tt().autoScrolling&&!tt().scrollBar&&Gi(le.activeSection.index()+1)}))}),200*e)}(),Zi=!0,clearTimeout(qi),qi=setTimeout((function(){(function(){if(ae({isResizing:!0}),io(""),!tt().fitToSection||tt().autoScrolling||le.isBeyondFullpage||function(){if(!tt().autoScrolling||tt().scrollBar){var e=.01*r.innerHeight;l.documentElement.style.setProperty("--vh","".concat(e,"px"))}}(),re.emit("contentChanged"),Jt(),hn(),a){var e=l.activeElement;if(!G(e,"textarea")&&!G(e,"input")&&!G(e,"select")){var t=S();Math.abs(t-$i)>20*Math.max($i,t)/100&&(no(!0),$i=t)}}else n=S(),i=b(),le.windowsHeight===n&&Ji===i||(ae({windowsHeight:n}),Ji=i,no(!0));var n,i;ae({isResizing:!1})})(),Zi=!1}),400)}function no(e){if(!m(et(),ge)){ae({isResizing:!0,windowsHeight:S(),windowsWidth:b()});for(var t=ce().sections,n=0;n<t.length;++n){var i=t[n],o=h(je,i.item)[0];i.slides.length>1&&Kt(o,i.activeSlide.item)}tt().scrollOverflow&&bn.makeScrollable();var l=ce().activeSection.index();le.isBeyondFullpage||l&&Gi(l+1),ae({isResizing:!1}),K(tt().afterResize)&&e&&tt().afterResize.call(et(),r.innerWidth,r.innerHeight),K(tt().afterReBuild)&&!e&&tt().afterReBuild.call(et()),U(et(),"afterRebuild")}}function io(e){var t=""===e?"":e+"px";ce().sections.forEach((function(e){y(e.item,{height:t})}))}function oo(){var e,t,n=r.location.hash;if(n.length){var i=n.replace("#","").split("/"),o=n.indexOf("#/")>-1;e=o?"/"+i[1]:decodeURIComponent(i[0]);var l=o?i[2]:i[1];l&&l.length&&(t=decodeURIComponent(l))}return{section:e,slide:t}}function ro(){X("hashchange",lo)}function lo(){if(!le.isScrolling&&!tt().lockAnchors){var e=oo(),t=e.section,n=e.slide,i=void 0===le.lastScrolledDestiny,o=void 0===le.lastScrolledDestiny&&void 0===n&&!le.slideMoving;t&&t.length&&(t&&t!==le.lastScrolledDestiny&&!i||o||!le.slideMoving&&le.lastScrolledSlide!=n)&&re.emit("onScrollPageAndSlide",{sectionAnchor:t,slideAnchor:n})}}function ao(e){var t=e.target;j(t,tt().menu+" [data-menuanchor]")&&co.call(t,e)}function co(e){ae({scrollTrigger:"menu"}),!h(tt().menu)[0]||!tt().lockAnchors&&tt().anchors.length||(F(e),re.emit("onMenuClick",{anchor:W(this,"data-menuanchor")}))}function so(e){var t=e.target;t&&j(t,"#fp-nav a")?cn.call(t,e.e):G(t,".fp-tooltip")?ln.call(t):(G(t,_e)||null!=j(t,_e))&&zt.call(t,e.e)}u.reBuild=no,re.on("bindEvents",(function(){V("resize",to),re.on("onDestroy",eo)})),u.setLockAnchors=function(e){tt().lockAnchors=e},re.on("bindEvents",(function(){V("hashchange",lo),re.on("onDestroy",ro)})),re.on("bindEvents",(function(){_("wheel",Nn.registerEvent,Cn()),re.on("scrollBeyondFullpage",zn),re.on("onKeyDown",Fn)})),re.on("bindEvents",(function(){re.on("onClickOrTouch",ao)})),re.on("bindEvents",(function(){re.on("onClickOrTouch",so)}));var uo,fo=0;function vo(e){var t,n,i,o,r;if(!le.isResizing&&ce().activeSection&&(te(ce().sections),!ce().isBeyondFullpage&&!ce().isAboutToScrollToFullPage&&(!tt().autoScrolling||tt().scrollBar))){var a=N(tt()),c=function(e){var t=e>fo?"down":"up";return fo=e,ae({previousDestTop:e}),t}(a),s=0,u=a+S()/2,f=Rt.scrollHeight-S()===a,d=ce().sections;if(ae({scrollY:a}),f)s=d.length-1;else if(a)for(var v=0;v<d.length;++v)d[v].item.offsetTop<=u&&(s=v);else s=0;if(i=c,o=ce().activeSection.item.offsetTop,r=o+S(),("up"==i?r>=N(tt())+S():o<=N(tt()))&&(m(ce().activeSection.item,we)||(k(ce().activeSection.item,we),O(z(ce().activeSection.item),we))),n=(t=d[s]).item,!t.isActive){ae({isScrolling:!0});var p,h,g=ce().activeSection.item,b=ce().activeSection.index()+1,w=gt(ce().activeSection,n),T=t.anchor,E=t.index()+1,x=t.activeSlide,L={activeSection:g,sectionIndex:E-1,anchorLink:T,element:n,leavingSection:b,direction:w,items:{origin:ce().activeSection,destination:t}};x&&(h=x.anchor,p=x.index()),le.canScroll&&(k(n,be),O(z(n),be),K(tt().beforeLeave)&&Jn("beforeLeave",L),K(tt().onLeave)&&Lt("onLeave",L),K(tt().afterLoad)&&Lt("afterLoad",L),kt(g),Ct(n),At(n),$n(T,E-1),tt().anchors.length&&ae({lastScrolledDestiny:T}),Pt(p,h,T),Jt()),tt().fitToSection&&le.canScroll&&(clearTimeout(uo),uo=setTimeout((function(){ae({isScrolling:!1}),le.sections.filter((function(e){var t=e.item.getBoundingClientRect();return Math.round(t.bottom)===Math.round(S())||0===Math.round(t.top)})).length||y(l.body,{"scroll-snap-type":"y mandatory"})}),300))}}}function po(e,t){void 0!==t?(t=t.replace(/ /g,"").split(",")).forEach((function(t){_t(e,t,"k")})):(_t(e,"all","k"),tt().keyboardScrolling=e)}function ho(e){var t=e.index();void 0!==tt().anchors[t]&&e.isActive&&$n(tt().anchors[t],t),tt().menu&&tt().css3&&null!=j(h(tt().menu)[0],ve)&&h(tt().menu).forEach((function(e){Rt.appendChild(e)}))}function go(){y(function(e,t){var n=[e];do{e=e.parentNode,n.push(e)}while(!G(e,t));return n}(et(),"body"),{height:"100%",position:"relative"}),k(et(),de),k(It,me),ae({windowsHeight:S()}),O(et(),ge),rn();for(var e=ce().sectionsIncludingHidden,t=0;t<e.length;t++){var n=e[t],i=n.allSlidesItems;n.item.setAttribute("data-fp-styles",W(n.item,"style")),xn(n),ho(n),i.length>0&&wn(n)}tt().fixedElements&&tt().css3&&h(tt().fixedElements).forEach((function(e){Rt.appendChild(e)})),tt().navigation&&an(),Ot()}function mo(){var e,t,n=ce().activeSection,i=ce().activeSection.item;k(i,we),Ct(i),Qn(),At(i),e=oo(),t=Li(e.section),(!e.section||!t||void 0!==t&&t.index()===E(En))&&K(tt().afterLoad)&&Lt("afterLoad",{activeSection:i,element:i,direction:null,anchorLink:n.anchor,sectionIndex:n.index(),items:{origin:ce().activeSection,destination:ce().activeSection}}),K(tt().afterRender)&&Lt("afterRender")}function So(e,t){void 0!==t?(t=t.replace(/ /g,"").split(",")).forEach((function(t){_t(e,t,"m")})):_t(e,"all","m")}function bo(){var e=oo(),t=e.section,n=e.slide;t&&(tt().animateAnchor?Mi(t,n):Gi(t,n))}function yo(){yt(0),h("img[data-src], source[data-src], audio[data-src], iframe[data-src]",et()).forEach((function(e){ie(e,"src")})),h("img[data-srcset]").forEach((function(e){ie(e,"srcset")})),$(h("#fp-nav, .fp-slidesNav, .fp-controlArrow")),y(at(ce().sections),{height:"","background-color":"",padding:""}),y(at(ce().slides),{width:""}),y(et(),{height:"",position:"","-ms-touch-action":"","touch-action":""}),y(Dt,{overflow:"",height:""}),O(It,me),O(Rt,pe),Rt.className.split(/\s+/).forEach((function(e){0===e.indexOf(Se)&&O(Rt,e)})),at(ce().panels).forEach((function(e){tt().scrollOverflow&&O(e,Ne),O(e,"fp-table active "+we),W(e,"data-fp-styles")&&e.setAttribute("style",W(e,"data-fp-styles")),m(e,Te)&&!$e&&e.removeAttribute("data-anchor")})),mt(et()),[Le,Pe,je].forEach((function(e){h(e,et()).forEach((function(e){D(e)}))})),y(et(),{"-webkit-transition":"none",transition:"none"}),r.scrollTo(0,0),[Te,Ce,Be].forEach((function(e){O(h("."+e),e)}))}re.on("onDestroy",(function(){clearTimeout(uo),clearTimeout(undefined)})),re.on("bindEvents",(function(){V("scroll",vo),l.body.addEventListener("scroll",vo),re.on("onScrollPageAndSlide",(function(e){Mi(e.sectionAnchor,e.slideAnchor)})),re.on("onMenuClick",(function(e){ki(e.anchor,void 0)})),re.on("onScrollOverflowScrolled",(function(e){("down"===e.direction?ni:ii)()})),re.on("scrollPage",(function(e){Zn(e.destination)}))})),re.on("onDestroy",(function(){X("scroll",vo)})),u.getActiveSlide=function(){return xt(ce().activeSection.activeSlide)},u.getScrollX=function(){return le.scrollX},re.on("bindEvents",(function(){re.on("onDestroy",Ut),re.on("landscapeScroll",(function(e){Kt(e.slides,e.destination)})),re.on("moveSlideRight",(function(e){xi(e.section)})),re.on("moveSlideLeft",(function(e){Ei(e.section)}))})),re.on("bindEvents",(function(){var e=tt().credits.position,t=["left","right"].indexOf(e)>-1?"".concat(e,": 0;"):"",n='\n        <div class="fp-watermark" style="'.concat(t,'">\n            <a href="https://alvarotrigo.com/fullPage/" \n                rel="nofollow noopener" \n                target="_blank" \n                style="text-decoration:none; color: #000;">\n                    ').concat(tt().credits.label,"\n            </a>\n        </div>\n    "),i=te(le.sections),o=tt().credits.enabled&&!le.isValid;i&&i.item&&o&&i.item.insertAdjacentHTML("beforeend",n)})),function(){re.on("onInitialise",(function(){var t,a;ae({isValid:(tt().licenseKey,t=tt().licenseKey,a=function(t){var n=parseInt("514").toString(16);if(!t||t.length<29||4===t.split(e[0]).length)return null;var i=["Each","for"][o()]().join(""),a=t[["split"]]("-"),c=[];a[i]((function(e,t){if(t<4){var i=function(e){var t=e[e.length-1],n=["NaN","is"][o()]().join("");return window[n](t)?r(t):function(e){return e-be.length}(t)}(e);c.push(i);var l=r(e[i]);if(1===t){var a=["pa","dS","t","art"].join("");l=l.toString()[a](2,"0")}n+=l,0!==t&&1!==t||(n+="-")}}));var s=0,u="";return t.split("-").forEach((function(e,t){if(t<4){for(var n=0,i=0;i<4;i++)i!==c[t]&&(n+=Math.abs(r(e[i])),isNaN(e[i])||s++);var o=l(n);u+=o}})),u+=l(s),{v:new Date(n+"T00:00"),o:n.split("-")[2]===8*(be.length-2)+"",l:u}}(t),a&&(tt().credits&&a&&n<=a.v&&a.l===t.split(e[0])[4]||function(e){var t=i[o()]().join("");return e&&0===t.indexOf(e)&&e.length===t.length}(t)||a.o)||!1)})}));var e=["-"],t="2022-4-30".split("-"),n=new Date(t[0],t[1],t[2]),i=["se","licen","-","v3","l","gp"];function o(){return[["re","verse"].join("")]["".length]}function r(e){return e?isNaN(e)?e.charCodeAt(0)-72:e:""}function l(e){var t=72+e;return t>90&&t<97&&(t+=15),String.fromCharCode(t).toUpperCase()}}(),u.setKeyboardScrolling=po,u.shared.afterRenderActions=mo,u.setAllowScrolling=So,u.destroy=function(e){un(!1,"internal"),So(!0),Vi(!1),po(!1),k(et(),ge),re.emit("onDestroy"),e&&yo()};function wo(){var e=tt().licenseKey,t="font-size: 15px;background:yellow;";tt()&&le.isValid||l.domain.indexOf("alvarotrigo.com")>-1?e&&e.length<20&&(console.warn("%c This website was made using fullPage.js slider. More info on the following website:",t),console.warn("%c https://alvarotrigo.com/fullPage/",t)):(d("error","Fullpage.js requires a `licenseKey` option. Read about it on the following URL:"),d("error","https://github.com/alvarotrigo/fullPage.js#options")),m(It,me)?d("error","Fullpage.js can only be initialized once and you are doing it multiple times!"):(tt().continuousVertical&&(tt().loopTop||tt().loopBottom)&&(tt().continuousVertical=!1,d("warn","Option `loopTop/loopBottom` is mutually exclusive with `continuousVertical`; `continuousVertical` disabled")),!tt().scrollOverflow||!tt().scrollBar&&tt().autoScrolling||d("warn","Options scrollBar:true and autoScrolling:false are mutually exclusive with scrollOverflow:true. Sections with scrollOverflow might not work well in Firefox"),!tt().continuousVertical||!tt().scrollBar&&tt().autoScrolling||(tt().continuousVertical=!1,d("warn","Scroll bars (`scrollBar:true` or `autoScrolling:false`) are mutually exclusive with `continuousVertical`; `continuousVertical` disabled")),f.forEach((function(e){tt()[e]&&d("warn","fullpage.js extensions require fullpage.extensions.min.js file instead of the usual fullpage.js. Requested: "+e)})),tt().anchors.forEach((function(e){var t=[].slice.call(h("[name]")).filter((function(t){return W(t,"name")&&W(t,"name").toLowerCase()==e.toLowerCase()})),n=[].slice.call(h("[id]")).filter((function(t){return W(t,"id")&&W(t,"id").toLowerCase()==e.toLowerCase()}));if(n.length||t.length){d("error","data-anchor tags can not have the same value as any `id` element on the site (or `name` element for IE).");var i=n.length?"id":"name";(n.length||t.length)&&d("error",'"'+e+'" is is being used by another element `'+i+"` property")}})))}function To(e,t){if(Rt=h("body")[0],It=h("html")[0],Dt=h("html, body"),!m(It,me))return n="touchWrapper",i="string"==typeof e?h(e)[0]:e,qe[n]=i,function(e){Ze=g({},qe,e),Je=Object.assign({},Ze)}(t),function(e){Qe=e}("string"==typeof e?h(e)[0]:e),re.emit("onInitialise"),wo(),u.getFullpageData=function(){return{options:tt()}},u.version="4.0.9",u.test=Object.assign(u.test,{top:"0px",translate3d:"translate3d(0px, 0px, 0px)",translate3dH:function(){for(var e=[],t=0;t<h(tt().sectionSelector,et()).length;t++)e.push("translate3d(0px, 0px, 0px)");return e}(),left:function(){for(var e=[],t=0;t<h(tt().sectionSelector,et()).length;t++)e.push(0);return e}(),options:tt(),setAutoScrolling:null}),u.shared=Object.assign(u.shared,{afterRenderActions:null,isNormalScrollElement:!1}),r.fullpage_api=u,et()&&(re.emit("beforeInit"),Zt(),Jt(),tt().scrollBar=tt().scrollBar||tt().hybrid,ot(),go(),pn(!0),So(!0),Vi(!0),un(tt().autoScrolling,"internal"),hn(),jt(),"complete"===l.readyState&&bo(),V("load",bo),mo(),Zt(),Jt(),re.emit("bindEvents")),r.fullpage_api;var n,i;wo()}return r.fp_easings=g(r.fp_easings,{easeInOutCubic:function(e,t,n,i){return(e/=i/2)<1?n/2*e*e*e+t:n/2*((e-=2)*e*e+2)+t}}),r.jQuery&&function(e,t){e&&t?e.fn.fullpage=function(n){n=e.extend({},n,{$:e}),new t(this[0],n),Object.keys(u).forEach((function(e){tt().$.fn.fullpage[e]=u[e]}))}:d("error","jQuery is required to use the jQuery fullpage adapter!")}(r.jQuery,To),To}()},607:function(e,t,n){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(n(615)),r=i(n(276));(0,o.default)("#fullpage",{navigation:!1,animateAnchor:!1,anchors:r.default.Sections,menu:".menu",scrollingSpeed:800,licenseKey:"9VK18-QK38H-MKGHI-J8N2H-OVNXN"});const l=document.querySelectorAll(".parallax");for(let e of l)document.addEventListener("mousemove",(t=>a(t,e)));function a(e,t){const n=t.getBoundingClientRect();let i=n.width/2,o=n.height/2,r=`translate(${.06*(e.clientX-n.left-i)}px, ${.06*(e.clientY-n.top-o)}px)`;t.style.transform=r,t.style.transition=""}},276:function(e){"use strict";e.exports=JSON.parse('{"Title":"Yoshi van Belkom | Tech Lead | Gameplay Programmer ","Description":"It\'s my portfolio, look at how cool it is and how cool I am. Wow!","Games":[{"ImageRow":"./public/games/minimal-affect_tall.jpg","ImageColumn":"./public/games/minimal-affect_wide.jpg","Title":"Minimal Affect","Company":"Toadman Interactive","Role":"Tech Lead"},{"ImageRow":"./public/games/evilevil_tall.jpg","ImageColumn":"./public/games/evilevil_wide.jpg","Title":"EvilvEvil","Company":"Toadman Interactive","Role":"Gameplay Programmer"},{"ImageRow":"./public/games/interstellar-rift_tall.jpg","ImageColumn":"./public/games/interstellar-rift_wide.jpg","Title":"Interstellar Rift","Company":"Split Polygon","Role":"Tools Programmer"}],"Hobbies":[{"ImageRow":"./public/hobbies/sculpting_tall.jpg","ImageColumn":"./public/hobbies/sculpting_wide.jpg","Title":"Sculpting"},{"ImageRow":"./public/hobbies/painting.jpg","ImageColumn":"./public/hobbies/painting.jpg","Title":"Painting"},{"ImageRow":"./public/hobbies/gamedev-force_tall.jpg","ImageColumn":"./public/hobbies/gamedev-force_wide.jpg","Title":"GameDev Force"},{"ImageRow":"./public/hobbies/baking.jpg","ImageColumn":"./public/hobbies/baking.jpg","Title":"Baking/Cooking"}],"Sections":["Intro","Games","Pastimes","Contact"],"Portrait":"./public/portrait_drawing.png","Name":"Yoshi van Belkom","PrimaryRole":"Tech Lead","SecondaryRole":"Gameplay Programmer","ContactHeaders":["Feel free to reach out to me throught the channels linked here!","Things worthy of note:"],"ContactNotes":["I do read all the emails and messages sent to me, even if I don\'t always have the time to respond.","Please don\'t invite me for a phone meeting, cause I will not respond to them.","If you are adding me on linkedin please add a message so I know why you are adding me!"],"ContactLinks":[{"Link":"https://linkedin.com/in/yoshivanbelkom","Icon":"fa-brands fa-linkedin","Title":"yoshivanbelkom"},{"Link":"mailto:contact@yoshivanbelkom.com","Icon":"fa-solid fa-square-envelope","Title":"contact@yoshivanbelkom.com"}]}')}},t={};!function n(i){var o=t[i];if(void 0!==o)return o.exports;var r=t[i]={exports:{}};return e[i].call(r.exports,r,r.exports,n),r.exports}(607)}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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SEFvOEIsRUFBb0JGLEdBQVU1NkIsS0FBS3ZCLEVBQU9DLFFBQVNELEVBQVFBLEVBQU9DLFFBQVNpOEIsR0FHcEVsOEIsRUFBT0MsT0FDZixDQ25CMEJpOEIsQ0FBb0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvZnVsbHBhZ2UuanMvZGlzdC9mdWxscGFnZS5qcyIsIndlYnBhY2s6Ly9wb3J0Zm9saW8vLi9zcmMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vcG9ydGZvbGlvL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3BvcnRmb2xpby93ZWJwYWNrL3N0YXJ0dXAiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4qIGZ1bGxQYWdlIDQuMC45XG4qIGh0dHBzOi8vZ2l0aHViLmNvbS9hbHZhcm90cmlnby9mdWxsUGFnZS5qc1xuKlxuKiBAbGljZW5zZSBHUEx2MyBmb3Igb3BlbiBzb3VyY2UgdXNlIG9ubHlcbiogb3IgRnVsbHBhZ2UgQ29tbWVyY2lhbCBMaWNlbnNlIGZvciBjb21tZXJjaWFsIHVzZVxuKiBodHRwOi8vYWx2YXJvdHJpZ28uY29tL2Z1bGxQYWdlL3ByaWNpbmcvXG4qXG4qIENvcHlyaWdodCAoQykgMjAxOCBodHRwOi8vYWx2YXJvdHJpZ28uY29tL2Z1bGxQYWdlIC0gQSBwcm9qZWN0IGJ5IEFsdmFybyBUcmlnb1xuKi9cblxuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKSA6XG4gICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGZhY3RvcnkpIDpcbiAgICAoZ2xvYmFsID0gdHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsVGhpcyA6IGdsb2JhbCB8fCBzZWxmLCBnbG9iYWwuZnVsbHBhZ2UgPSBmYWN0b3J5KCkpO1xufSkodGhpcywgKGZ1bmN0aW9uICgpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbmRcbiAgICBpZiAoIUFycmF5LnByb3RvdHlwZS5maW5kKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQXJyYXkucHJvdG90eXBlLCAnZmluZCcsIHtcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHZhbHVlKHByZWRpY2F0ZSkge1xuICAgICAgICAgIC8vIDEuIExldCBPIGJlID8gVG9PYmplY3QodGhpcyB2YWx1ZSkuXG4gICAgICAgICAgaWYgKHRoaXMgPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJ0aGlzXCIgaXMgbnVsbCBvciBub3QgZGVmaW5lZCcpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBvID0gT2JqZWN0KHRoaXMpOyAvLyAyLiBMZXQgbGVuIGJlID8gVG9MZW5ndGgoPyBHZXQoTywgXCJsZW5ndGhcIikpLlxuXG4gICAgICAgICAgdmFyIGxlbiA9IG8ubGVuZ3RoID4+PiAwOyAvLyAzLiBJZiBJc0NhbGxhYmxlKHByZWRpY2F0ZSkgaXMgZmFsc2UsIHRocm93IGEgVHlwZUVycm9yIGV4Y2VwdGlvbi5cblxuICAgICAgICAgIGlmICh0eXBlb2YgcHJlZGljYXRlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdwcmVkaWNhdGUgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gICAgICAgICAgfSAvLyA0LiBJZiB0aGlzQXJnIHdhcyBzdXBwbGllZCwgbGV0IFQgYmUgdGhpc0FyZzsgZWxzZSBsZXQgVCBiZSB1bmRlZmluZWQuXG5cblxuICAgICAgICAgIHZhciB0aGlzQXJnID0gYXJndW1lbnRzWzFdOyAvLyA1LiBMZXQgayBiZSAwLlxuXG4gICAgICAgICAgdmFyIGsgPSAwOyAvLyA2LiBSZXBlYXQsIHdoaWxlIGsgPCBsZW5cblxuICAgICAgICAgIHdoaWxlIChrIDwgbGVuKSB7XG4gICAgICAgICAgICAvLyBhLiBMZXQgUGsgYmUgISBUb1N0cmluZyhrKS5cbiAgICAgICAgICAgIC8vIGIuIExldCBrVmFsdWUgYmUgPyBHZXQoTywgUGspLlxuICAgICAgICAgICAgLy8gYy4gTGV0IHRlc3RSZXN1bHQgYmUgVG9Cb29sZWFuKD8gQ2FsbChwcmVkaWNhdGUsIFQsIMKrIGtWYWx1ZSwgaywgTyDCuykpLlxuICAgICAgICAgICAgLy8gZC4gSWYgdGVzdFJlc3VsdCBpcyB0cnVlLCByZXR1cm4ga1ZhbHVlLlxuICAgICAgICAgICAgdmFyIGtWYWx1ZSA9IG9ba107XG5cbiAgICAgICAgICAgIGlmIChwcmVkaWNhdGUuY2FsbCh0aGlzQXJnLCBrVmFsdWUsIGssIG8pKSB7XG4gICAgICAgICAgICAgIHJldHVybiBrVmFsdWU7XG4gICAgICAgICAgICB9IC8vIGUuIEluY3JlYXNlIGsgYnkgMS5cblxuXG4gICAgICAgICAgICBrKys7XG4gICAgICAgICAgfSAvLyA3LiBSZXR1cm4gdW5kZWZpbmVkLlxuXG5cbiAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBQcm9kdWN0aW9uIHN0ZXBzIG9mIEVDTUEtMjYyLCBFZGl0aW9uIDYsIDIyLjEuMi4xXG4gICAgaWYgKCFBcnJheS5mcm9tKSB7XG4gICAgICBBcnJheS5mcm9tID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG4gICAgICAgIHZhciBpc0NhbGxhYmxlID0gZnVuY3Rpb24gaXNDYWxsYWJsZShmbikge1xuICAgICAgICAgIHJldHVybiB0eXBlb2YgZm4gPT09ICdmdW5jdGlvbicgfHwgdG9TdHIuY2FsbChmbikgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIHRvSW50ZWdlciA9IGZ1bmN0aW9uIHRvSW50ZWdlcih2YWx1ZSkge1xuICAgICAgICAgIHZhciBudW1iZXIgPSBOdW1iZXIodmFsdWUpO1xuXG4gICAgICAgICAgaWYgKGlzTmFOKG51bWJlcikpIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChudW1iZXIgPT09IDAgfHwgIWlzRmluaXRlKG51bWJlcikpIHtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIChudW1iZXIgPiAwID8gMSA6IC0xKSAqIE1hdGguZmxvb3IoTWF0aC5hYnMobnVtYmVyKSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIG1heFNhZmVJbnRlZ2VyID0gTWF0aC5wb3coMiwgNTMpIC0gMTtcblxuICAgICAgICB2YXIgdG9MZW5ndGggPSBmdW5jdGlvbiB0b0xlbmd0aCh2YWx1ZSkge1xuICAgICAgICAgIHZhciBsZW4gPSB0b0ludGVnZXIodmFsdWUpO1xuICAgICAgICAgIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChsZW4sIDApLCBtYXhTYWZlSW50ZWdlcik7XG4gICAgICAgIH07IC8vIFRoZSBsZW5ndGggcHJvcGVydHkgb2YgdGhlIGZyb20gbWV0aG9kIGlzIDEuXG5cblxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gZnJvbShhcnJheUxpa2VcbiAgICAgICAgLyosIG1hcEZuLCB0aGlzQXJnICovXG4gICAgICAgICkge1xuICAgICAgICAgIC8vIDEuIExldCBDIGJlIHRoZSB0aGlzIHZhbHVlLlxuICAgICAgICAgIHZhciBDID0gdGhpczsgLy8gMi4gTGV0IGl0ZW1zIGJlIFRvT2JqZWN0KGFycmF5TGlrZSkuXG5cbiAgICAgICAgICB2YXIgaXRlbXMgPSBPYmplY3QoYXJyYXlMaWtlKTsgLy8gMy4gUmV0dXJuSWZBYnJ1cHQoaXRlbXMpLlxuXG4gICAgICAgICAgaWYgKGFycmF5TGlrZSA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcnJheS5mcm9tIHJlcXVpcmVzIGFuIGFycmF5LWxpa2Ugb2JqZWN0IC0gbm90IG51bGwgb3IgdW5kZWZpbmVkJyk7XG4gICAgICAgICAgfSAvLyA0LiBJZiBtYXBmbiBpcyB1bmRlZmluZWQsIHRoZW4gbGV0IG1hcHBpbmcgYmUgZmFsc2UuXG5cblxuICAgICAgICAgIHZhciBtYXBGbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdm9pZCB1bmRlZmluZWQ7XG4gICAgICAgICAgdmFyIFQ7XG5cbiAgICAgICAgICBpZiAodHlwZW9mIG1hcEZuICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgLy8gNS4gZWxzZVxuICAgICAgICAgICAgLy8gNS4gYSBJZiBJc0NhbGxhYmxlKG1hcGZuKSBpcyBmYWxzZSwgdGhyb3cgYSBUeXBlRXJyb3IgZXhjZXB0aW9uLlxuICAgICAgICAgICAgaWYgKCFpc0NhbGxhYmxlKG1hcEZuKSkge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcnJheS5mcm9tOiB3aGVuIHByb3ZpZGVkLCB0aGUgc2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICAgICAgICAgICAgfSAvLyA1LiBiLiBJZiB0aGlzQXJnIHdhcyBzdXBwbGllZCwgbGV0IFQgYmUgdGhpc0FyZzsgZWxzZSBsZXQgVCBiZSB1bmRlZmluZWQuXG5cblxuICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAyKSB7XG4gICAgICAgICAgICAgIFQgPSBhcmd1bWVudHNbMl07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSAvLyAxMC4gTGV0IGxlblZhbHVlIGJlIEdldChpdGVtcywgXCJsZW5ndGhcIikuXG4gICAgICAgICAgLy8gMTEuIExldCBsZW4gYmUgVG9MZW5ndGgobGVuVmFsdWUpLlxuXG5cbiAgICAgICAgICB2YXIgbGVuID0gdG9MZW5ndGgoaXRlbXMubGVuZ3RoKTsgLy8gMTMuIElmIElzQ29uc3RydWN0b3IoQykgaXMgdHJ1ZSwgdGhlblxuICAgICAgICAgIC8vIDEzLiBhLiBMZXQgQSBiZSB0aGUgcmVzdWx0IG9mIGNhbGxpbmcgdGhlIFtbQ29uc3RydWN0XV0gaW50ZXJuYWwgbWV0aG9kXG4gICAgICAgICAgLy8gb2YgQyB3aXRoIGFuIGFyZ3VtZW50IGxpc3QgY29udGFpbmluZyB0aGUgc2luZ2xlIGl0ZW0gbGVuLlxuICAgICAgICAgIC8vIDE0LiBhLiBFbHNlLCBMZXQgQSBiZSBBcnJheUNyZWF0ZShsZW4pLlxuXG4gICAgICAgICAgdmFyIEEgPSBpc0NhbGxhYmxlKEMpID8gT2JqZWN0KG5ldyBDKGxlbikpIDogbmV3IEFycmF5KGxlbik7IC8vIDE2LiBMZXQgayBiZSAwLlxuXG4gICAgICAgICAgdmFyIGsgPSAwOyAvLyAxNy4gUmVwZWF0LCB3aGlsZSBrIDwgbGVu4oCmIChhbHNvIHN0ZXBzIGEgLSBoKVxuXG4gICAgICAgICAgdmFyIGtWYWx1ZTtcblxuICAgICAgICAgIHdoaWxlIChrIDwgbGVuKSB7XG4gICAgICAgICAgICBrVmFsdWUgPSBpdGVtc1trXTtcblxuICAgICAgICAgICAgaWYgKG1hcEZuKSB7XG4gICAgICAgICAgICAgIEFba10gPSB0eXBlb2YgVCA9PT0gJ3VuZGVmaW5lZCcgPyBtYXBGbihrVmFsdWUsIGspIDogbWFwRm4uY2FsbChULCBrVmFsdWUsIGspO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgQVtrXSA9IGtWYWx1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgayArPSAxO1xuICAgICAgICAgIH0gLy8gMTguIExldCBwdXRTdGF0dXMgYmUgUHV0KEEsIFwibGVuZ3RoXCIsIGxlbiwgdHJ1ZSkuXG5cblxuICAgICAgICAgIEEubGVuZ3RoID0gbGVuOyAvLyAyMC4gUmV0dXJuIEEuXG5cbiAgICAgICAgICByZXR1cm4gQTtcbiAgICAgICAgfTtcbiAgICAgIH0oKTtcbiAgICB9XG5cbiAgICB2YXIgd2luID0gd2luZG93O1xuICAgIHZhciBkb2MgPSBkb2N1bWVudDtcbiAgICB2YXIgaXNUb3VjaERldmljZSA9IG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goLyhpUGhvbmV8aVBvZHxpUGFkfEFuZHJvaWR8cGxheWJvb2t8c2lsa3xCbGFja0JlcnJ5fEJCMTB8V2luZG93cyBQaG9uZXxUaXplbnxCYWRhfHdlYk9TfElFTW9iaWxlfE9wZXJhIE1pbmkpLyk7XG4gICAgdmFyIGlzTWFjRGV2aWNlID0gLyhNYWN8aVBob25lfGlQb2R8aVBhZCkvaS50ZXN0KHdpbi5uYXZpZ2F0b3IudXNlckFnZW50KTsgLy8gQHRzLWlnbm9yZVxuXG4gICAgdmFyIGlzVG91Y2ggPSAnb250b3VjaHN0YXJ0JyBpbiB3aW4gfHwgbmF2aWdhdG9yLm1zTWF4VG91Y2hQb2ludHMgPiAwIHx8IG5hdmlnYXRvci5tYXhUb3VjaFBvaW50czsgLy8gdGFrZW4gZnJvbSBodHRwczovL2dpdGh1Yi5jb20vdWRhY2l0eS91ZDg5MS9ibG9iL2doLXBhZ2VzL2xlc3NvbjItZm9jdXMvMDctbW9kYWxzLWFuZC1rZXlib2FyZC10cmFwcy9zb2x1dGlvbi9tb2RhbC5qc1xuXG4gICAgdmFyIGZvY3VzYWJsZUVsZW1lbnRzU3RyaW5nID0gJ2FbaHJlZl0sIGFyZWFbaHJlZl0sIGlucHV0Om5vdChbZGlzYWJsZWRdKSwgc2VsZWN0Om5vdChbZGlzYWJsZWRdKSwgdGV4dGFyZWE6bm90KFtkaXNhYmxlZF0pLCBidXR0b246bm90KFtkaXNhYmxlZF0pLCBpZnJhbWUsIG9iamVjdCwgZW1iZWQsIFt0YWJpbmRleD1cIjBcIl0sIFtjb250ZW50ZWRpdGFibGVdJzsgLy8gY2FjaGUgY29tbW9uIGVsZW1lbnRzXG5cbiAgICB2YXIgRlAgPSB7XG4gICAgICB0ZXN0OiB7fSxcbiAgICAgIHNoYXJlZDoge31cbiAgICB9O1xuICAgIHZhciBleHRlbnNpb25zID0gWydwYXJhbGxheCcsICdzY3JvbGxPdmVyZmxvd1Jlc2V0JywgJ2RyYWdBbmRNb3ZlJywgJ29mZnNldFNlY3Rpb25zJywgJ2ZhZGluZ0VmZmVjdCcsICdyZXNwb25zaXZlU2xpZGVzJywgJ2NvbnRpbnVvdXNIb3Jpem9udGFsJywgJ2ludGVybG9ja2VkU2xpZGVzJywgJ3Njcm9sbEhvcml6b250YWxseScsICdyZXNldFNsaWRlcnMnLCAnY2FyZHMnLCAnZHJvcEVmZmVjdCcsICd3YXRlckVmZmVjdCddO1xuXG4gICAgLyoqXG4gICAgKiBmb3JFYWNoIHBvbHlmaWxsIGZvciBJRVxuICAgICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL05vZGVMaXN0L2ZvckVhY2gjQnJvd3Nlcl9Db21wYXRpYmlsaXR5XG4gICAgKi9cblxuICAgIGlmICh3aW4uTm9kZUxpc3QgJiYgIU5vZGVMaXN0LnByb3RvdHlwZS5mb3JFYWNoKSB7XG4gICAgICBOb2RlTGlzdC5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIChjYWxsYmFjaywgdGhpc0FyZykge1xuICAgICAgICB0aGlzQXJnID0gdGhpc0FyZyB8fCB3aW5kb3c7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgY2FsbGJhY2suY2FsbCh0aGlzQXJnLCB0aGlzW2ldLCBpLCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIE9iamVjdC5hc3NpZ24gIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgLy8gTXVzdCBiZSB3cml0YWJsZTogdHJ1ZSwgZW51bWVyYWJsZTogZmFsc2UsIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE9iamVjdCwgJ2Fzc2lnbicsIHtcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFzc2lnbih0YXJnZXQsIHZhckFyZ3MpIHtcblxuICAgICAgICAgIGlmICh0YXJnZXQgPT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gVHlwZUVycm9yIGlmIHVuZGVmaW5lZCBvciBudWxsXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY29udmVydCB1bmRlZmluZWQgb3IgbnVsbCB0byBvYmplY3QnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgdG8gPSBPYmplY3QodGFyZ2V0KTtcblxuICAgICAgICAgIGZvciAodmFyIGluZGV4ID0gMTsgaW5kZXggPCBhcmd1bWVudHMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgICB2YXIgbmV4dFNvdXJjZSA9IGFyZ3VtZW50c1tpbmRleF07XG5cbiAgICAgICAgICAgIGlmIChuZXh0U291cmNlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgLy8gU2tpcCBvdmVyIGlmIHVuZGVmaW5lZCBvciBudWxsXG4gICAgICAgICAgICAgIGZvciAodmFyIG5leHRLZXkgaW4gbmV4dFNvdXJjZSkge1xuICAgICAgICAgICAgICAgIC8vIEF2b2lkIGJ1Z3Mgd2hlbiBoYXNPd25Qcm9wZXJ0eSBpcyBzaGFkb3dlZFxuICAgICAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobmV4dFNvdXJjZSwgbmV4dEtleSkpIHtcbiAgICAgICAgICAgICAgICAgIHRvW25leHRLZXldID0gbmV4dFNvdXJjZVtuZXh0S2V5XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gdG87XG4gICAgICAgIH0sXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vdXRpbHNcbiAgICAvKipcbiAgICAqIFNob3dzIGEgbWVzc2FnZSBpbiB0aGUgY29uc29sZSBvZiB0aGUgZ2l2ZW4gdHlwZS5cbiAgICAqL1xuXG4gICAgZnVuY3Rpb24gc2hvd0Vycm9yKHR5cGUsIHRleHQpIHtcbiAgICAgIHdpbi5jb25zb2xlICYmIHdpbi5jb25zb2xlW3R5cGVdICYmIHdpbi5jb25zb2xlW3R5cGVdKCdmdWxsUGFnZTogJyArIHRleHQpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBpc1Zpc2libGUoZWwpIHtcbiAgICAgIHZhciBzdHlsZSA9IHdpbi5nZXRDb21wdXRlZFN0eWxlKGVsKTtcbiAgICAgIHJldHVybiBzdHlsZS5kaXNwbGF5ICE9PSAnbm9uZSc7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldFZpc2libGUoZWxlbWVudHMpIHtcbiAgICAgIHJldHVybiBBcnJheS5mcm9tKGVsZW1lbnRzKS5maWx0ZXIoZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgcmV0dXJuIGlzVmlzaWJsZShlKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAqIEVxdWl2YWxlbnQgb2YgalF1ZXJ5IGZ1bmN0aW9uICQoKS5cbiAgICAqL1xuXG4gICAgZnVuY3Rpb24gJChzZWxlY3RvciwgY29udGV4dCkge1xuICAgICAgY29udGV4dCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gY29udGV4dCA6IGRvY3VtZW50O1xuICAgICAgcmV0dXJuIGNvbnRleHQgPyBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpIDogbnVsbDtcbiAgICB9XG4gICAgLyoqXG4gICAgKiBFeHRlbmRzIGEgZ2l2ZW4gT2JqZWN0IHByb3BlcnRpZXMgYW5kIGl0cyBjaGlsZHMuXG4gICAgKi9cblxuICAgIGZ1bmN0aW9uIGRlZXBFeHRlbmQob3V0KSB7XG4gICAgICBvdXQgPSBvdXQgfHwge307XG5cbiAgICAgIGZvciAodmFyIGkgPSAxLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgICAgdmFyIG9iaiA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgICBpZiAoIW9iaikge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgICAgIGlmICghb2JqLmhhc093blByb3BlcnR5KGtleSkgfHwga2V5ID09ICdfX3Byb3RvX18nIHx8IGtleSA9PSAnY29uc3RydWN0b3InKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IC8vIGJhc2VkIG9uIGh0dHBzOi8vamF2YXNjcmlwdHdlYmxvZy53b3JkcHJlc3MuY29tLzIwMTEvMDgvMDgvZml4aW5nLXRoZS1qYXZhc2NyaXB0LXR5cGVvZi1vcGVyYXRvci9cblxuXG4gICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmpba2V5XSkgPT09ICdbb2JqZWN0IE9iamVjdF0nKSB7XG4gICAgICAgICAgICBvdXRba2V5XSA9IGRlZXBFeHRlbmQob3V0W2tleV0sIG9ialtrZXldKTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIG91dFtrZXldID0gb2JqW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG4gICAgLyoqXG4gICAgKiBDaGVja3MgaWYgdGhlIHBhc3NlZCBlbGVtZW50IGNvbnRhaW5zIHRoZSBwYXNzZWQgY2xhc3MuXG4gICAgKi9cblxuICAgIGZ1bmN0aW9uIGhhc0NsYXNzKGVsLCBjbGFzc05hbWUpIHtcbiAgICAgIGlmIChlbCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGVsLmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpO1xuICAgIH1cbiAgICAvKipcbiAgICAqIEdldHMgdGhlIHdpbmRvdyBoZWlnaHQuIENyb3NzYnJvd3Nlci5cbiAgICAqL1xuXG4gICAgZnVuY3Rpb24gZ2V0V2luZG93SGVpZ2h0KCkge1xuICAgICAgcmV0dXJuICdpbm5lckhlaWdodCcgaW4gd2luID8gd2luLmlubmVySGVpZ2h0IDogZG9jLmRvY3VtZW50RWxlbWVudC5vZmZzZXRIZWlnaHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICogR2V0cyB0aGUgd2luZG93IHdpZHRoLlxuICAgICovXG5cbiAgICBmdW5jdGlvbiBnZXRXaW5kb3dXaWR0aCgpIHtcbiAgICAgIHJldHVybiB3aW4uaW5uZXJXaWR0aDtcbiAgICB9XG4gICAgLyoqXG4gICAgKiBTZXQncyB0aGUgQ1NTIHByb3BlcnRpZXMgZm9yIHRoZSBwYXNzZWQgaXRlbS9zLlxuICAgICogQHBhcmFtIHtOb2RlTGlzdHxIVE1MRWxlbWVudHxPYmplY3R9IGl0ZW1zXG4gICAgKiBAcGFyYW0ge09iamVjdH0gcHJvcHMgY3NzIHByb3BlcnRpZXMgYW5kIHZhbHVlcy5cbiAgICAqL1xuXG4gICAgZnVuY3Rpb24gY3NzKGl0ZW1zLCBwcm9wcykge1xuICAgICAgaXRlbXMgPSBnZXRMaXN0KGl0ZW1zKTtcbiAgICAgIHZhciBrZXk7XG5cbiAgICAgIGZvciAoa2V5IGluIHByb3BzKSB7XG4gICAgICAgIGlmIChwcm9wcy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgaWYgKGtleSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpdGVtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICB2YXIgaXRlbSA9IGl0ZW1zW2ldO1xuICAgICAgICAgICAgICBpdGVtLnN0eWxlW2tleV0gPSBwcm9wc1trZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gaXRlbXM7XG4gICAgfVxuICAgIC8qKlxuICAgICogR2V0cyB0aGUgcHJldmlvdXMgZWxlbWVudCB0byB0aGUgcGFzc2VkIGVsZW1lbnQuXG4gICAgKi9cblxuICAgIGZ1bmN0aW9uIHByZXYoaXRlbSkge1xuICAgICAgcmV0dXJuIGl0ZW0ucHJldmlvdXNFbGVtZW50U2libGluZztcbiAgICB9XG4gICAgLyoqXG4gICAgKiBHZXRzIHRoZSBuZXh0IGVsZW1lbnQgdG8gdGhlIHBhc3NlZCBlbGVtZW50LlxuICAgICovXG5cbiAgICBmdW5jdGlvbiBuZXh0KGl0ZW0pIHtcbiAgICAgIHJldHVybiBpdGVtLm5leHRFbGVtZW50U2libGluZztcbiAgICB9XG4gICAgLyoqXG4gICAgKiBHZXRzIHRoZSBsYXN0IGVsZW1lbnQgZnJvbSB0aGUgcGFzc2VkIGxpc3Qgb2YgZWxlbWVudHMuXG4gICAgKi9cblxuICAgIGZ1bmN0aW9uIGxhc3QoaXRlbSkge1xuICAgICAgcmV0dXJuIGl0ZW1baXRlbS5sZW5ndGggLSAxXTtcbiAgICB9XG4gICAgLyoqXG4gICAgKiBHZXRzIGluZGV4IGZyb20gdGhlIHBhc3NlZCBlbGVtZW50LlxuICAgICogQHBhcmFtIHtTdHJpbmd9IHNlbGVjdG9yIGlzIG9wdGlvbmFsLlxuICAgICovXG5cbiAgICBmdW5jdGlvbiBpbmRleChpdGVtLCBzZWxlY3Rvcikge1xuICAgICAgaXRlbSA9IGlzQXJyYXlPckxpc3QoaXRlbSkgPyBpdGVtWzBdIDogaXRlbTtcbiAgICAgIHZhciBjaGlsZHJlbiA9IHNlbGVjdG9yICE9IG51bGwgPyAkKHNlbGVjdG9yLCBpdGVtLnBhcmVudE5vZGUpIDogaXRlbS5wYXJlbnROb2RlLmNoaWxkTm9kZXM7XG4gICAgICB2YXIgbnVtID0gMDtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoY2hpbGRyZW5baV0gPT0gaXRlbSkgcmV0dXJuIG51bTtcbiAgICAgICAgaWYgKGNoaWxkcmVuW2ldLm5vZGVUeXBlID09IDEpIG51bSsrO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuICAgIC8qKlxuICAgICogR2V0cyBhbiBpdGVyYWJsZSBlbGVtZW50IGZvciB0aGUgcGFzc2VkIGVsZW1lbnQvc1xuICAgICovXG5cbiAgICBmdW5jdGlvbiBnZXRMaXN0KGl0ZW0pIHtcbiAgICAgIHJldHVybiAhaXNBcnJheU9yTGlzdChpdGVtKSA/IFtpdGVtXSA6IGl0ZW07XG4gICAgfVxuICAgIC8qKlxuICAgICogQWRkcyB0aGUgZGlzcGxheT1ub25lIHByb3BlcnR5IGZvciB0aGUgcGFzc2VkIGVsZW1lbnQvc1xuICAgICovXG5cbiAgICBmdW5jdGlvbiBoaWRlKGVsKSB7XG4gICAgICBlbCA9IGdldExpc3QoZWwpO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVsLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGVsW2ldLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBlbDtcbiAgICB9XG4gICAgLyoqXG4gICAgKiBBZGRzIHRoZSBkaXNwbGF5PWJsb2NrIHByb3BlcnR5IGZvciB0aGUgcGFzc2VkIGVsZW1lbnQvc1xuICAgICovXG5cbiAgICBmdW5jdGlvbiBzaG93KGVsKSB7XG4gICAgICBlbCA9IGdldExpc3QoZWwpO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVsLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGVsW2ldLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZWw7XG4gICAgfVxuICAgIC8qKlxuICAgICogQ2hlY2tzIGlmIHRoZSBwYXNzZWQgZWxlbWVudCBpcyBhbiBpdGVyYWJsZSBlbGVtZW50IG9yIG5vdFxuICAgICovXG5cbiAgICBmdW5jdGlvbiBpc0FycmF5T3JMaXN0KGVsKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGVsKSA9PT0gJ1tvYmplY3QgQXJyYXldJyB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZWwpID09PSAnW29iamVjdCBOb2RlTGlzdF0nO1xuICAgIH1cbiAgICAvKipcbiAgICAqIEFkZHMgdGhlIHBhc3NlZCBjbGFzcyB0byB0aGUgcGFzc2VkIGVsZW1lbnQvc1xuICAgICovXG5cbiAgICBmdW5jdGlvbiBhZGRDbGFzcyhlbCwgY2xhc3NOYW1lKSB7XG4gICAgICBlbCA9IGdldExpc3QoZWwpO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVsLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBpdGVtID0gZWxbaV07XG4gICAgICAgIGl0ZW0uY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZWw7XG4gICAgfVxuICAgIC8qKlxuICAgICogUmVtb3ZlcyB0aGUgcGFzc2VkIGNsYXNzIHRvIHRoZSBwYXNzZWQgZWxlbWVudC9zXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gYGNsYXNzTmFtZWAgY2FuIGJlIG11bHRpcGxlIGNsYXNzbmFtZXMgc2VwYXJhdGVkIGJ5IHdoaXRlc3BhY2VcbiAgICAqL1xuXG4gICAgZnVuY3Rpb24gcmVtb3ZlQ2xhc3MoZWwsIGNsYXNzTmFtZSkge1xuICAgICAgZWwgPSBnZXRMaXN0KGVsKTtcbiAgICAgIHZhciBjbGFzc05hbWVzID0gY2xhc3NOYW1lLnNwbGl0KCcgJyk7XG5cbiAgICAgIGZvciAodmFyIGEgPSAwOyBhIDwgY2xhc3NOYW1lcy5sZW5ndGg7IGErKykge1xuICAgICAgICBjbGFzc05hbWUgPSBjbGFzc05hbWVzW2FdO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWwubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB2YXIgaXRlbSA9IGVsW2ldO1xuICAgICAgICAgIGl0ZW0uY2xhc3NMaXN0LnJlbW92ZShjbGFzc05hbWUpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBlbDtcbiAgICB9XG4gICAgLyoqXG4gICAgKiBBcHBlbmRzIHRoZSBnaXZlbiBlbGVtZW50IG90IHRoZSBnaXZlbiBwYXJlbnQuXG4gICAgKi9cblxuICAgIGZ1bmN0aW9uIGFwcGVuZFRvKGVsLCBwYXJlbnQpIHtcbiAgICAgIHBhcmVudC5hcHBlbmRDaGlsZChlbCk7XG4gICAgfVxuICAgIC8qKlxuICAgIFVzYWdlOlxuXG4gICAgdmFyIHdyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB3cmFwcGVyLmNsYXNzTmFtZSA9ICdmcC1zbGlkZXMnO1xuICAgIHdyYXAoJCgnLnNsaWRlJyksIHdyYXBwZXIpO1xuXG4gICAgaHR0cHM6Ly9qc2ZpZGRsZS5uZXQvcXd6YzdveTMvMTUvICh2YW5pbGxhKVxuICAgIGh0dHBzOi8vanNmaWRkbGUubmV0L295YTZuZGthLzEvIChqcXVlcnkgZXF1aXZhbGVudClcbiAgICAqL1xuXG4gICAgZnVuY3Rpb24gd3JhcCh0b1dyYXAsIHdyYXBwZXIsIGlzV3JhcEFsbCkge1xuICAgICAgdmFyIG5ld1BhcmVudDtcbiAgICAgIHdyYXBwZXIgPSB3cmFwcGVyIHx8IGRvYy5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b1dyYXAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGl0ZW0gPSB0b1dyYXBbaV07XG5cbiAgICAgICAgaWYgKGlzV3JhcEFsbCAmJiAhaSB8fCAhaXNXcmFwQWxsKSB7XG4gICAgICAgICAgbmV3UGFyZW50ID0gd3JhcHBlci5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgICAgICAgaXRlbS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShuZXdQYXJlbnQsIGl0ZW0pO1xuICAgICAgICB9XG5cbiAgICAgICAgbmV3UGFyZW50LmFwcGVuZENoaWxkKGl0ZW0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdG9XcmFwO1xuICAgIH1cbiAgICAvKipcbiAgICBVc2FnZTpcbiAgICB2YXIgd3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHdyYXBwZXIuY2xhc3NOYW1lID0gJ2ZwLXNsaWRlcyc7XG4gICAgd3JhcCgkKCcuc2xpZGUnKSwgd3JhcHBlcik7XG5cbiAgICBodHRwczovL2pzZmlkZGxlLm5ldC9xd3pjN295My8yNy8gKHZhbmlsbGEpXG4gICAgaHR0cHM6Ly9qc2ZpZGRsZS5uZXQvb3lhNm5ka2EvNC8gKGpxdWVyeSBlcXVpdmFsZW50KVxuICAgICovXG5cbiAgICBmdW5jdGlvbiB3cmFwQWxsKHRvV3JhcCwgd3JhcHBlcikge1xuICAgICAgd3JhcCh0b1dyYXAsIHdyYXBwZXIsIHRydWUpO1xuICAgIH1cbiAgICAvKipcbiAgICAqIFVzYWdlOlxuICAgICogdW53cmFwKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNwZXBlJykpO1xuICAgICogdW53cmFwKGVsZW1lbnQpO1xuICAgICpcbiAgICAqIGh0dHBzOi8vanNmaWRkbGUubmV0L3N6anQwaHhxLzEvXG4gICAgKlxuICAgICovXG5cbiAgICBmdW5jdGlvbiB1bndyYXAod3JhcHBlcikge1xuICAgICAgdmFyIHdyYXBwZXJDb250ZW50ID0gZG9jLmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcblxuICAgICAgd2hpbGUgKHdyYXBwZXIuZmlyc3RDaGlsZCkge1xuICAgICAgICB3cmFwcGVyQ29udGVudC5hcHBlbmRDaGlsZCh3cmFwcGVyLmZpcnN0Q2hpbGQpO1xuICAgICAgfVxuXG4gICAgICB3cmFwcGVyLnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKHdyYXBwZXJDb250ZW50LCB3cmFwcGVyKTtcbiAgICB9XG4gICAgLyoqXG4gICAgKiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzIyMTAwODUzL2RvbS1wdXJlLWphdmFzY3JpcHQtc29sdXRpb24tdG8tanF1ZXJ5LWNsb3Nlc3QtaW1wbGVtZW50YXRpb25cbiAgICAqIFJldHVybnMgdGhlIGVsZW1lbnQgb3IgYGZhbHNlYCBpZiB0aGVyZSdzIG5vbmVcbiAgICAqL1xuXG4gICAgZnVuY3Rpb24gY2xvc2VzdChlbCwgc2VsZWN0b3IpIHtcbiAgICAgIGlmIChlbCAmJiBlbC5ub2RlVHlwZSA9PT0gMSkge1xuICAgICAgICBpZiAobWF0Y2hlcyhlbCwgc2VsZWN0b3IpKSB7XG4gICAgICAgICAgcmV0dXJuIGVsO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNsb3Nlc3QoZWwucGFyZW50Tm9kZSwgc2VsZWN0b3IpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgLyoqXG4gICAgKiBQbGFjZXMgb25lIGVsZW1lbnQgKHJlbCkgYWZ0ZXIgYW5vdGhlciBvbmUgb3IgZ3JvdXAgb2YgdGhlbSAocmVmZXJlbmNlKS5cbiAgICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHJlZmVyZW5jZVxuICAgICogQHBhcmFtIHtIVE1MRWxlbWVudHxOb2RlTGlzdHxTdHJpbmd8QXJyYXl9IGVsXG4gICAgKiBodHRwczovL2pzZmlkZGxlLm5ldC85czk3aGh6di8xL1xuICAgICovXG5cbiAgICBmdW5jdGlvbiBhZnRlcihyZWZlcmVuY2UsIGVsKSB7XG4gICAgICBpbnNlcnRCZWZvcmUocmVmZXJlbmNlLCByZWZlcmVuY2UubmV4dFNpYmxpbmcsIGVsKTtcbiAgICB9XG4gICAgLyoqXG4gICAgKiBQbGFjZXMgb25lIGVsZW1lbnQgKHJlbCkgYmVmb3JlIGFub3RoZXIgb25lIG9yIGdyb3VwIG9mIHRoZW0gKHJlZmVyZW5jZSkuXG4gICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSByZWZlcmVuY2VcbiAgICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR8Tm9kZUxpc3R8U3RyaW5nfEFycmF5fSBlbFxuICAgICogaHR0cHM6Ly9qc2ZpZGRsZS5uZXQvOXM5N2hoenYvMS9cbiAgICAqL1xuXG4gICAgZnVuY3Rpb24gYmVmb3JlKHJlZmVyZW5jZSwgZWwpIHtcbiAgICAgIGluc2VydEJlZm9yZShyZWZlcmVuY2UsIHJlZmVyZW5jZSwgZWwpO1xuICAgIH1cbiAgICAvKipcbiAgICAqIEJhc2VkIGluIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xOTMxNjAyNC8xMDgxMzk2XG4gICAgKiBhbmQgaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzQ3OTM2MzAvMTA4MTM5NlxuICAgICovXG5cbiAgICBmdW5jdGlvbiBpbnNlcnRCZWZvcmUocmVmZXJlbmNlLCBiZWZvcmVFbGVtZW50LCBlbCkge1xuICAgICAgaWYgKCFpc0FycmF5T3JMaXN0KGVsKSkge1xuICAgICAgICBpZiAodHlwZW9mIGVsID09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgZWwgPSBjcmVhdGVFbGVtZW50RnJvbUhUTUwoZWwpO1xuICAgICAgICB9XG5cbiAgICAgICAgZWwgPSBbZWxdO1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVsLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJlZmVyZW5jZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShlbFtpXSwgYmVmb3JlRWxlbWVudCk7XG4gICAgICB9XG4gICAgfSAvL2h0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMzQ2NDg3Ni9qYXZhc2NyaXB0LWdldC13aW5kb3cteC15LXBvc2l0aW9uLWZvci1zY3JvbGxcblxuICAgIGZ1bmN0aW9uIGdldFNjcm9sbFRvcChvcHRpb25zKSB7XG4gICAgICBpZiAodHlwZW9mIG9wdGlvbnMgIT09ICd1bmRlZmluZWQnICYmIG9wdGlvbnMuZml0VG9TZWN0aW9uKSB7XG4gICAgICAgIHJldHVybiBkb2MuYm9keS5zY3JvbGxUb3A7XG4gICAgICB9XG5cbiAgICAgIHZhciBkb2NFbGVtZW50ID0gZG9jLmRvY3VtZW50RWxlbWVudDtcbiAgICAgIHJldHVybiAod2luLnBhZ2VZT2Zmc2V0IHx8IGRvY0VsZW1lbnQuc2Nyb2xsVG9wKSAtIChkb2NFbGVtZW50LmNsaWVudFRvcCB8fCAwKTtcbiAgICB9XG4gICAgLyoqXG4gICAgKiBHZXRzIHRoZSBzaWJsaW5ncyBvZiB0aGUgcGFzc2VkIGVsZW1lbnRcbiAgICAqL1xuXG4gICAgZnVuY3Rpb24gc2libGluZ3MoZWwpIHtcbiAgICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuZmlsdGVyLmNhbGwoZWwucGFyZW50Tm9kZS5jaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgIHJldHVybiBjaGlsZCAhPT0gZWw7XG4gICAgICB9KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcHJldmVudERlZmF1bHQoZXZlbnQpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldEF0dHIoZWwsIGF0dHIpIHtcbiAgICAgIHJldHVybiBlbC5nZXRBdHRyaWJ1dGUoYXR0cik7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGRvY0FkZEV2ZW50KGV2ZW50LCBjYWxsYmFjaywgb3B0aW9ucykge1xuICAgICAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGNhbGxiYWNrLCBvcHRpb25zID09PSAndW5kZWZpbmVkJyA/IG51bGwgOiBvcHRpb25zKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gd2luZG93QWRkRXZlbnQoZXZlbnQsIGNhbGxiYWNrLCBvcHRpb25zKSB7XG4gICAgICB3aW4uYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgY2FsbGJhY2ssIG9wdGlvbnMgPT09ICd1bmRlZmluZWQnID8gbnVsbCA6IG9wdGlvbnMpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBkb2NSZW1vdmVFdmVudChldmVudCwgY2FsbGJhY2ssIG9wdGlvbnMpIHtcbiAgICAgIGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBjYWxsYmFjaywgb3B0aW9ucyA9PT0gJ3VuZGVmaW5lZCcgPyBudWxsIDogb3B0aW9ucyk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHdpbmRvd1JlbW92ZUV2ZW50KGV2ZW50LCBjYWxsYmFjaywgb3B0aW9ucykge1xuICAgICAgd2luLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGNhbGxiYWNrLCBvcHRpb25zID09PSAndW5kZWZpbmVkJyA/IG51bGwgOiBvcHRpb25zKTtcbiAgICB9XG4gICAgLyoqXG4gICAgKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHBhc3NlZCBpdGVtIGlzIG9mIGZ1bmN0aW9uIHR5cGUuXG4gICAgKi9cblxuICAgIGZ1bmN0aW9uIGlzRnVuY3Rpb24oaXRlbSkge1xuICAgICAgaWYgKHR5cGVvZiBpdGVtID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgdHlwZSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpdGVtKTtcbiAgICAgIHJldHVybiB0eXBlID09PSAnW29iamVjdCBGdW5jdGlvbl0nIHx8IHR5cGUgPT09ICdbb2JqZWN0IEdlbmVyYXRvckZ1bmN0aW9uXSc7XG4gICAgfVxuICAgIC8qKlxuICAgICogVHJpZ2dlciBjdXN0b20gZXZlbnRzXG4gICAgKi9cblxuICAgIGZ1bmN0aW9uIHRyaWdnZXIoZWwsIGV2ZW50TmFtZSwgZGF0YSkge1xuICAgICAgdmFyIGV2ZW50O1xuICAgICAgZGF0YSA9IHR5cGVvZiBkYXRhID09PSAndW5kZWZpbmVkJyA/IHt9IDogZGF0YTsgLy8gTmF0aXZlXG5cbiAgICAgIGlmICh0eXBlb2Ygd2luLkN1c3RvbUV2ZW50ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgZXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQoZXZlbnROYW1lLCB7XG4gICAgICAgICAgZGV0YWlsOiBkYXRhXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZXZlbnQgPSBkb2MuY3JlYXRlRXZlbnQoJ0N1c3RvbUV2ZW50Jyk7XG4gICAgICAgIGV2ZW50LmluaXRDdXN0b21FdmVudChldmVudE5hbWUsIHRydWUsIHRydWUsIGRhdGEpO1xuICAgICAgfVxuXG4gICAgICBlbC5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgICB9XG4gICAgLyoqXG4gICAgKiBQb2x5ZmlsbCBvZiAubWF0Y2hlcygpXG4gICAgKi9cblxuICAgIGZ1bmN0aW9uIG1hdGNoZXMoZWwsIHNlbGVjdG9yKSB7XG4gICAgICByZXR1cm4gKGVsLm1hdGNoZXMgfHwgZWwubWF0Y2hlc1NlbGVjdG9yIHx8IGVsLm1zTWF0Y2hlc1NlbGVjdG9yIHx8IGVsLm1vek1hdGNoZXNTZWxlY3RvciB8fCBlbC53ZWJraXRNYXRjaGVzU2VsZWN0b3IgfHwgZWwub01hdGNoZXNTZWxlY3RvcikuY2FsbChlbCwgc2VsZWN0b3IpO1xuICAgIH1cbiAgICAvKipcbiAgICAqIFRvZ2dsZXMgdGhlIHZpc2liaWxpdHkgb2YgdGhlIHBhc3NlZCBlbGVtZW50IGVsLlxuICAgICovXG5cbiAgICBmdW5jdGlvbiB0b2dnbGUoZWwsIHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcImJvb2xlYW5cIikge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVsLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgZWxbaV0uc3R5bGUuZGlzcGxheSA9IHZhbHVlID8gJ2Jsb2NrJyA6ICdub25lJztcbiAgICAgICAgfVxuICAgICAgfSAvL3dlIGRvbid0IHVzZSBpdCBpbiBvdGhlciB3YXksIHNvIG5vIGVsc2UgOilcblxuXG4gICAgICByZXR1cm4gZWw7XG4gICAgfVxuICAgIC8qKlxuICAgICogQ3JlYXRlcyBhIEhUTUxFbGVtZW50IGZyb20gdGhlIHBhc3NlZCBIVE1MIHN0cmluZy5cbiAgICAqIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS80OTQzNDgvMTA4MTM5NlxuICAgICovXG5cbiAgICBmdW5jdGlvbiBjcmVhdGVFbGVtZW50RnJvbUhUTUwoaHRtbFN0cmluZykge1xuICAgICAgdmFyIGRpdiA9IGRvYy5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIGRpdi5pbm5lckhUTUwgPSBodG1sU3RyaW5nLnRyaW0oKTsgLy8gQ2hhbmdlIHRoaXMgdG8gZGl2LmNoaWxkTm9kZXMgdG8gc3VwcG9ydCBtdWx0aXBsZSB0b3AtbGV2ZWwgbm9kZXNcblxuICAgICAgcmV0dXJuIGRpdi5maXJzdENoaWxkO1xuICAgIH1cbiAgICAvKipcbiAgICAqIFJlbW92ZXMgdGhlIHBhc3NlZCBpdGVtL3MgZnJvbSB0aGUgRE9NLlxuICAgICovXG5cbiAgICBmdW5jdGlvbiByZW1vdmUoaXRlbXMpIHtcbiAgICAgIGl0ZW1zID0gZ2V0TGlzdChpdGVtcyk7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaXRlbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGl0ZW0gPSBpdGVtc1tpXTtcblxuICAgICAgICBpZiAoaXRlbSAmJiBpdGVtLnBhcmVudEVsZW1lbnQpIHtcbiAgICAgICAgICBpdGVtLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoaXRlbSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IC8vaHR0cHM6Ly9qc2ZpZGRsZS5uZXQvdzFya3RlY3ovXG5cbiAgICBmdW5jdGlvbiB1bnRpbEFsbChpdGVtLCBzZWxlY3RvciwgZm4pIHtcbiAgICAgIHZhciBzaWJsaW5nID0gaXRlbVtmbl07XG4gICAgICB2YXIgc2libGluZ3MgPSBbXTtcblxuICAgICAgd2hpbGUgKHNpYmxpbmcpIHtcbiAgICAgICAgaWYgKG1hdGNoZXMoc2libGluZywgc2VsZWN0b3IpIHx8IHNlbGVjdG9yID09IG51bGwpIHtcbiAgICAgICAgICBzaWJsaW5ncy5wdXNoKHNpYmxpbmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgc2libGluZyA9IHNpYmxpbmdbZm5dO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc2libGluZ3M7XG4gICAgfVxuICAgIC8qKlxuICAgICogR2V0cyBhbGwgbmV4dCBlbGVtZW50cyBtYXRjaGluZyB0aGUgcGFzc2VkIHNlbGVjdG9yLlxuICAgICovXG5cbiAgICBmdW5jdGlvbiBuZXh0QWxsKGl0ZW0sIHNlbGVjdG9yKSB7XG4gICAgICByZXR1cm4gdW50aWxBbGwoaXRlbSwgc2VsZWN0b3IsICduZXh0RWxlbWVudFNpYmxpbmcnKTtcbiAgICB9XG4gICAgLyoqXG4gICAgKiBHZXRzIGFsbCBwcmV2aW91cyBlbGVtZW50cyBtYXRjaGluZyB0aGUgcGFzc2VkIHNlbGVjdG9yLlxuICAgICovXG5cbiAgICBmdW5jdGlvbiBwcmV2QWxsKGl0ZW0sIHNlbGVjdG9yKSB7XG4gICAgICByZXR1cm4gdW50aWxBbGwoaXRlbSwgc2VsZWN0b3IsICdwcmV2aW91c0VsZW1lbnRTaWJsaW5nJyk7XG4gICAgfVxuICAgIC8qKlxuICAgICogQ29udmVydHMgYW4gb2JqZWN0IHRvIGFuIGFycmF5LlxuICAgICovXG5cbiAgICBmdW5jdGlvbiB0b0FycmF5KG9iamVjdERhdGEpIHtcbiAgICAgIHJldHVybiBPYmplY3Qua2V5cyhvYmplY3REYXRhKS5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgICAgICByZXR1cm4gb2JqZWN0RGF0YVtrZXldO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldExhc3QoaXRlbXMpIHtcbiAgICAgIHJldHVybiBpdGVtc1tpdGVtcy5sZW5ndGggLSAxXTtcbiAgICB9XG4gICAgLyoqXG4gICAgKiBHZXRzIHRoZSBhdmVyYWdlIG9mIHRoZSBsYXN0IGBudW1iZXJgIGVsZW1lbnRzIG9mIHRoZSBnaXZlbiBhcnJheS5cbiAgICAqL1xuXG4gICAgZnVuY3Rpb24gZ2V0QXZlcmFnZShlbGVtZW50cywgbnVtYmVyKSB7XG4gICAgICB2YXIgc3VtID0gMDsgLy90YWtpbmcgYG51bWJlcmAgZWxlbWVudHMgZnJvbSB0aGUgZW5kIHRvIG1ha2UgdGhlIGF2ZXJhZ2UsIGlmIHRoZXJlIGFyZSBub3QgZW5vdWdodCwgMVxuXG4gICAgICB2YXIgbGFzdEVsZW1lbnRzID0gZWxlbWVudHMuc2xpY2UoTWF0aC5tYXgoZWxlbWVudHMubGVuZ3RoIC0gbnVtYmVyLCAxKSk7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdEVsZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHN1bSA9IHN1bSArIGxhc3RFbGVtZW50c1tpXTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIE1hdGguY2VpbChzdW0gLyBudW1iZXIpO1xuICAgIH1cbiAgICAvKipcbiAgICAqIFNldHMgdGhlIHZhbHVlIGZvciB0aGUgZ2l2ZW4gYXR0cmlidXRlIGZyb20gdGhlIGBkYXRhLWAgYXR0cmlidXRlIHdpdGggdGhlIHNhbWUgc3VmZml4XG4gICAgKiBpZTogZGF0YS1zcmNzZXQgPT0+IHNyY3NldCAgfCAgZGF0YS1zcmMgPT0+IHNyY1xuICAgICovXG5cbiAgICBmdW5jdGlvbiBzZXRTcmMoZWxlbWVudCwgYXR0cmlidXRlKSB7XG4gICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShhdHRyaWJ1dGUsIGdldEF0dHIoZWxlbWVudCwgJ2RhdGEtJyArIGF0dHJpYnV0ZSkpO1xuICAgICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ2RhdGEtJyArIGF0dHJpYnV0ZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldFBhcmVudHNVbnRpbChpdGVtLCB0b3BQYXJlbnRTZWxlY3Rvcikge1xuICAgICAgdmFyIHBhcmVudHMgPSBbaXRlbV07XG5cbiAgICAgIGRvIHtcbiAgICAgICAgaXRlbSA9IGl0ZW0ucGFyZW50Tm9kZTtcbiAgICAgICAgcGFyZW50cy5wdXNoKGl0ZW0pO1xuICAgICAgfSB3aGlsZSAoIW1hdGNoZXMoaXRlbSwgdG9wUGFyZW50U2VsZWN0b3IpKTtcblxuICAgICAgcmV0dXJuIHBhcmVudHM7XG4gICAgfSAvL3V0aWxzIGFyZSBwdWJsaWMsIHNvIHdlIGNhbiB1c2UgaXQgd2hlcmV2ZXIgd2Ugd2FudFxuICAgIC8vIEB0cy1pZ25vcmVcblxuICAgIHdpbmRvd1tcImZwX3V0aWxzXCJdID0ge1xuICAgICAgXCIkXCI6ICQsXG4gICAgICBcImRlZXBFeHRlbmRcIjogZGVlcEV4dGVuZCxcbiAgICAgIFwiaGFzQ2xhc3NcIjogaGFzQ2xhc3MsXG4gICAgICBcImdldFdpbmRvd0hlaWdodFwiOiBnZXRXaW5kb3dIZWlnaHQsXG4gICAgICBcImNzc1wiOiBjc3MsXG4gICAgICBcInByZXZcIjogcHJldixcbiAgICAgIFwibmV4dFwiOiBuZXh0LFxuICAgICAgXCJsYXN0XCI6IGxhc3QsXG4gICAgICBcImluZGV4XCI6IGluZGV4LFxuICAgICAgXCJnZXRMaXN0XCI6IGdldExpc3QsXG4gICAgICBcImhpZGVcIjogaGlkZSxcbiAgICAgIFwic2hvd1wiOiBzaG93LFxuICAgICAgXCJpc0FycmF5T3JMaXN0XCI6IGlzQXJyYXlPckxpc3QsXG4gICAgICBcImFkZENsYXNzXCI6IGFkZENsYXNzLFxuICAgICAgXCJyZW1vdmVDbGFzc1wiOiByZW1vdmVDbGFzcyxcbiAgICAgIFwiYXBwZW5kVG9cIjogYXBwZW5kVG8sXG4gICAgICBcIndyYXBcIjogd3JhcCxcbiAgICAgIFwid3JhcEFsbFwiOiB3cmFwQWxsLFxuICAgICAgXCJ1bndyYXBcIjogdW53cmFwLFxuICAgICAgXCJjbG9zZXN0XCI6IGNsb3Nlc3QsXG4gICAgICBcImFmdGVyXCI6IGFmdGVyLFxuICAgICAgXCJiZWZvcmVcIjogYmVmb3JlLFxuICAgICAgXCJpbnNlcnRCZWZvcmVcIjogaW5zZXJ0QmVmb3JlLFxuICAgICAgXCJnZXRTY3JvbGxUb3BcIjogZ2V0U2Nyb2xsVG9wLFxuICAgICAgXCJzaWJsaW5nc1wiOiBzaWJsaW5ncyxcbiAgICAgIFwicHJldmVudERlZmF1bHRcIjogcHJldmVudERlZmF1bHQsXG4gICAgICBcImlzRnVuY3Rpb25cIjogaXNGdW5jdGlvbixcbiAgICAgIFwidHJpZ2dlclwiOiB0cmlnZ2VyLFxuICAgICAgXCJtYXRjaGVzXCI6IG1hdGNoZXMsXG4gICAgICBcInRvZ2dsZVwiOiB0b2dnbGUsXG4gICAgICBcImNyZWF0ZUVsZW1lbnRGcm9tSFRNTFwiOiBjcmVhdGVFbGVtZW50RnJvbUhUTUwsXG4gICAgICBcInJlbW92ZVwiOiByZW1vdmUsXG4gICAgICAvLyBcImZpbHRlclwiOiBmaWx0ZXIsXG4gICAgICBcInVudGlsQWxsXCI6IHVudGlsQWxsLFxuICAgICAgXCJuZXh0QWxsXCI6IG5leHRBbGwsXG4gICAgICBcInByZXZBbGxcIjogcHJldkFsbCxcbiAgICAgIFwic2hvd0Vycm9yXCI6IHNob3dFcnJvclxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICAgICAgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiO1xuXG4gICAgICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHtcbiAgICAgICAgX3R5cGVvZiA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgICByZXR1cm4gdHlwZW9mIG9iajtcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF90eXBlb2YgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgICAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfdHlwZW9mKG9iaik7XG4gICAgfVxuXG4gICAgdmFyIEV2ZW50RW1pdHRlciA9IHtcbiAgICAgIGV2ZW50czoge30sXG4gICAgICBvbjogZnVuY3Rpb24gb24oZXZlbnQsIGxpc3RlbmVyKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF90eXBlb2YodGhpcy5ldmVudHNbZXZlbnRdKSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICB0aGlzLmV2ZW50c1tldmVudF0gPSBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZXZlbnRzW2V2ZW50XS5wdXNoKGxpc3RlbmVyKTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMucmVtb3ZlTGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyKTtcbiAgICAgICAgfTtcbiAgICAgIH0sXG4gICAgICByZW1vdmVMaXN0ZW5lcjogZnVuY3Rpb24gcmVtb3ZlTGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyKSB7XG4gICAgICAgIGlmIChfdHlwZW9mKHRoaXMuZXZlbnRzW2V2ZW50XSkgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgdmFyIGlkeCA9IHRoaXMuZXZlbnRzW2V2ZW50XS5pbmRleE9mKGxpc3RlbmVyKTtcblxuICAgICAgICAgIGlmIChpZHggPiAtMSkge1xuICAgICAgICAgICAgdGhpcy5ldmVudHNbZXZlbnRdLnNwbGljZShpZHgsIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGVtaXQ6IGZ1bmN0aW9uIGVtaXQoZXZlbnQpIHtcbiAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF90eXBlb2YodGhpcy5ldmVudHNbZXZlbnRdKSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICB0aGlzLmV2ZW50c1tldmVudF0uZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBsaXN0ZW5lci5hcHBseShfdGhpczIsIGFyZ3MpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgb25jZTogZnVuY3Rpb24gb25jZShldmVudCwgbGlzdGVuZXIpIHtcbiAgICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgICAgdmFyIHJlbW92ZSA9IHRoaXMub24oZXZlbnQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZW1vdmUoKTtcblxuICAgICAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGxpc3RlbmVyLmFwcGx5KF90aGlzMywgYXJncyk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgc3RhdGUgPSB7XG4gICAgICBudW1TZWN0aW9uczogMCxcbiAgICAgIG51bVNsaWRlczogMCxcbiAgICAgIHNsaWRlczogW10sXG4gICAgICBzZWN0aW9uczogW10sXG4gICAgICBhY3RpdmVTZWN0aW9uOiBudWxsLFxuICAgICAgc2Nyb2xsVHJpZ2dlcjogbnVsbCxcbiAgICAgIGlzQmV5b25kRnVsbHBhZ2U6IGZhbHNlLFxuICAgICAgYWJvdXRUb1Njcm9sbFRvRnVsbFBhZ2U6IGZhbHNlLFxuICAgICAgc2xpZGVNb3Zpbmc6IGZhbHNlLFxuICAgICAgaXNSZXNpemluZzogZmFsc2UsXG4gICAgICBpc1Njcm9sbGluZzogZmFsc2UsXG4gICAgICBsYXN0U2Nyb2xsZWREZXN0aW55OiB1bmRlZmluZWQsXG4gICAgICBsYXN0U2Nyb2xsZWRTbGlkZTogdW5kZWZpbmVkLFxuICAgICAgYWN0aXZlQW5pbWF0aW9uOiBmYWxzZSxcbiAgICAgIGNhblNjcm9sbDogdHJ1ZSxcbiAgICAgIHRvdWNoRGlyZWN0aW9uOiAnbm9uZScsXG4gICAgICB3aGVlbERpcmVjdGlvbjogJ25vbmUnLFxuICAgICAgaXNHcmFiYmluZzogZmFsc2UsXG4gICAgICBpc1VzaW5nV2hlZWw6IGZhbHNlLFxuICAgICAgaXNXaW5kb3dGb2N1c2VkOiB0cnVlLFxuICAgICAgcHJldmlvdXNEZXN0VG9wOiAwLFxuICAgICAgd2luZG93c0hlaWdodDogZ2V0V2luZG93SGVpZ2h0KCksXG4gICAgICBpc0RvaW5nQ29udGlub3VzVmVydGljYWw6IGZhbHNlLFxuICAgICAgdGltZW91dHM6IHt9LFxuICAgICAgc2Nyb2xsWTogMCxcbiAgICAgIHNjcm9sbFg6IDBcbiAgICB9OyAvLyBAdHMtaWdub3JlXG5cbiAgICB3aW4uc3RhdGUgPSBzdGF0ZTtcbiAgICBmdW5jdGlvbiBzZXRTdGF0ZShwcm9wcykge1xuICAgICAgT2JqZWN0LmFzc2lnbihzdGF0ZSwgcHJvcHMpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZXRTdGF0ZSgpIHtcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9XG5cbiAgICBFdmVudEVtaXR0ZXIub24oJ2JpbmRFdmVudHMnLCBiaW5kRXZlbnRzJGMpO1xuXG4gICAgZnVuY3Rpb24gYmluZEV2ZW50cyRjKCkge1xuICAgICAgLy9TY3JvbGxzIHRvIHRoZSBzZWN0aW9uIHdoZW4gY2xpY2tpbmcgdGhlIG5hdmlnYXRpb24gYnVsbGV0XG4gICAgICAvL3NpbXVsYXRpbmcgdGhlIGpRdWVyeSAub24oJ2NsaWNrJykgZXZlbnQgdXNpbmcgZGVsZWdhdGlvblxuICAgICAgWydjbGljaycsICd0b3VjaHN0YXJ0J10uZm9yRWFjaChmdW5jdGlvbiAoZXZlbnROYW1lKSB7XG4gICAgICAgIGRvY0FkZEV2ZW50KGV2ZW50TmFtZSwgZGVsZWdhdGVkRXZlbnRzKTtcbiAgICAgIH0pO1xuICAgICAgd2luZG93QWRkRXZlbnQoJ2ZvY3VzJywgZm9jdXNIYW5kbGVyKTtcbiAgICAgIGludGVybmFsRXZlbnRzKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW50ZXJuYWxFdmVudHMoKSB7XG4gICAgICBFdmVudEVtaXR0ZXIub24oJ29uRGVzdHJveScsIG9uRGVzdHJveSQ4KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkZWxlZ2F0ZWRFdmVudHMoZSkge1xuICAgICAgRXZlbnRFbWl0dGVyLmVtaXQoJ29uQ2xpY2tPclRvdWNoJywge1xuICAgICAgICBlOiBlLFxuICAgICAgICB0YXJnZXQ6IGUudGFyZ2V0XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbkRlc3Ryb3kkOCgpIHtcbiAgICAgIFsnY2xpY2snLCAndG91Y2hzdGFydCddLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50TmFtZSkge1xuICAgICAgICBkb2NSZW1vdmVFdmVudChldmVudE5hbWUsIGRlbGVnYXRlZEV2ZW50cyk7XG4gICAgICB9KTtcbiAgICB9IC8vIGNoYW5naW5nIGlzV2luZG93Rm9jdXNlZCB0byB0cnVlIG9uIGZvY3VzIGV2ZW50XG5cblxuICAgIGZ1bmN0aW9uIGZvY3VzSGFuZGxlcigpIHtcbiAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgaXNXaW5kb3dGb2N1c2VkOiB0cnVlXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBrZWVwaW5nIGNlbnRyYWwgc2V0IG9mIGNsYXNzbmFtZXMgYW5kIHNlbGVjdG9yc1xuICAgIHZhciBXUkFQUEVSID0gJ2Z1bGxwYWdlLXdyYXBwZXInO1xuICAgIHZhciBXUkFQUEVSX1NFTCA9ICcuJyArIFdSQVBQRVI7IC8vIHNsaW1zY3JvbGxcblxuICAgIHZhciBSRVNQT05TSVZFID0gJ2ZwLXJlc3BvbnNpdmUnO1xuICAgIHZhciBOT19UUkFOU0lUSU9OID0gJ2ZwLW5vdHJhbnNpdGlvbic7XG4gICAgdmFyIERFU1RST1lFRCA9ICdmcC1kZXN0cm95ZWQnO1xuICAgIHZhciBFTkFCTEVEID0gJ2ZwLWVuYWJsZWQnO1xuICAgIHZhciBWSUVXSU5HX1BSRUZJWCA9ICdmcC12aWV3aW5nJztcbiAgICB2YXIgQUNUSVZFID0gJ2FjdGl2ZSc7XG4gICAgdmFyIEFDVElWRV9TRUwgPSAnLicgKyBBQ1RJVkU7XG4gICAgdmFyIENPTVBMRVRFTFkgPSAnZnAtY29tcGxldGVseSc7XG4gICAgdmFyIENPTVBMRVRFTFlfU0VMID0gJy4nICsgQ09NUExFVEVMWTtcbiAgICB2YXIgU05BUFMgPSAnZnAtc25hcHMnOyAvLyBzZWN0aW9uXG5cbiAgICB2YXIgU0VDVElPTl9ERUZBVUxUX1NFTCA9ICcuc2VjdGlvbic7XG4gICAgdmFyIFNFQ1RJT04gPSAnZnAtc2VjdGlvbic7XG4gICAgdmFyIFNFQ1RJT05fU0VMID0gJy4nICsgU0VDVElPTjtcbiAgICB2YXIgU0VDVElPTl9BQ1RJVkVfU0VMID0gU0VDVElPTl9TRUwgKyBBQ1RJVkVfU0VMO1xuICAgIHZhciBUQUJMRV9DRUxMID0gJ2ZwLXRhYmxlQ2VsbCc7XG4gICAgdmFyIFRBQkxFX0NFTExfU0VMID0gJy4nICsgVEFCTEVfQ0VMTDtcbiAgICB2YXIgQVVUT19IRUlHSFQgPSAnZnAtYXV0by1oZWlnaHQnO1xuICAgIHZhciBBVVRPX0hFSUdIVF9TRUwgPSAnLicgKyBBVVRPX0hFSUdIVDtcbiAgICB2YXIgQVVUT19IRUlHSFRfUkVTUE9OU0lWRSA9ICdmcC1hdXRvLWhlaWdodC1yZXNwb25zaXZlJztcbiAgICB2YXIgQVVUT19IRUlHSFRfUkVTUE9OU0lWRV9TRUwgPSAnLicgKyBBVVRPX0hFSUdIVF9SRVNQT05TSVZFO1xuICAgIHZhciBOT1JNQUxfU0NST0xMID0gJ2ZwLW5vcm1hbC1zY3JvbGwnO1xuXG4gICAgdmFyIFNFQ1RJT05fTkFWID0gJ2ZwLW5hdic7XG4gICAgdmFyIFNFQ1RJT05fTkFWX1NFTCA9ICcjJyArIFNFQ1RJT05fTkFWO1xuICAgIHZhciBTRUNUSU9OX05BVl9UT09MVElQID0gJ2ZwLXRvb2x0aXAnO1xuICAgIHZhciBTRUNUSU9OX05BVl9UT09MVElQX1NFTCA9ICcuJyArIFNFQ1RJT05fTkFWX1RPT0xUSVA7XG4gICAgdmFyIFNIT1dfQUNUSVZFX1RPT0xUSVAgPSAnZnAtc2hvdy1hY3RpdmUnOyAvLyBzbGlkZVxuXG4gICAgdmFyIFNMSURFX0RFRkFVTFRfU0VMID0gJy5zbGlkZSc7XG4gICAgdmFyIFNMSURFID0gJ2ZwLXNsaWRlJztcbiAgICB2YXIgU0xJREVfU0VMID0gJy4nICsgU0xJREU7XG4gICAgdmFyIFNMSURFX0FDVElWRV9TRUwgPSBTTElERV9TRUwgKyBBQ1RJVkVfU0VMO1xuICAgIHZhciBTTElERVNfV1JBUFBFUiA9ICdmcC1zbGlkZXMnO1xuICAgIHZhciBTTElERVNfV1JBUFBFUl9TRUwgPSAnLicgKyBTTElERVNfV1JBUFBFUjtcbiAgICB2YXIgU0xJREVTX0NPTlRBSU5FUiA9ICdmcC1zbGlkZXNDb250YWluZXInO1xuICAgIHZhciBTTElERVNfQ09OVEFJTkVSX1NFTCA9ICcuJyArIFNMSURFU19DT05UQUlORVI7XG4gICAgdmFyIFRBQkxFID0gJ2ZwLXRhYmxlJztcbiAgICB2YXIgT1ZFUkZMT1cgPSAnZnAtb3ZlcmZsb3cnO1xuICAgIHZhciBPVkVSRkxPV19TRUwgPSAnLicgKyBPVkVSRkxPVzsgLy8gc2xpZGUgbmF2XG5cbiAgICB2YXIgU0xJREVTX05BViA9ICdmcC1zbGlkZXNOYXYnO1xuICAgIHZhciBTTElERVNfTkFWX1NFTCA9ICcuJyArIFNMSURFU19OQVY7XG4gICAgdmFyIFNMSURFU19OQVZfTElOS19TRUwgPSBTTElERVNfTkFWX1NFTCArICcgYSc7XG4gICAgdmFyIFNMSURFU19TVFlMRURfQVJST1cgPSAnZnAtYXJyb3cnO1xuICAgIHZhciBTTElERVNfQVJST1cgPSAnZnAtY29udHJvbEFycm93JztcbiAgICB2YXIgU0xJREVTX0FSUk9XX1NFTCA9ICcuJyArIFNMSURFU19BUlJPVztcbiAgICB2YXIgU0xJREVTX1BSRVYgPSAnZnAtcHJldic7XG4gICAgdmFyIFNMSURFU19QUkVWX1NFTCA9ICcuJyArIFNMSURFU19QUkVWO1xuICAgIHZhciBTTElERVNfQVJST1dfUFJFVl9TRUwgPSBTTElERVNfQVJST1dfU0VMICsgU0xJREVTX1BSRVZfU0VMO1xuICAgIHZhciBTTElERVNfTkVYVCA9ICdmcC1uZXh0JztcbiAgICB2YXIgU0xJREVTX05FWFRfU0VMID0gJy4nICsgU0xJREVTX05FWFQ7XG4gICAgdmFyIFNMSURFU19BUlJPV19ORVhUX1NFTCA9IFNMSURFU19BUlJPV19TRUwgKyBTTElERVNfTkVYVF9TRUw7XG5cbiAgICB2YXIgZGVmYXVsdE9wdGlvbnMgPSB7XG4gICAgICAvL25hdmlnYXRpb25cbiAgICAgIG1lbnU6IGZhbHNlLFxuICAgICAgYW5jaG9yczogW10sXG4gICAgICBsb2NrQW5jaG9yczogZmFsc2UsXG4gICAgICBuYXZpZ2F0aW9uOiBmYWxzZSxcbiAgICAgIG5hdmlnYXRpb25Qb3NpdGlvbjogJ3JpZ2h0JyxcbiAgICAgIG5hdmlnYXRpb25Ub29sdGlwczogW10sXG4gICAgICBzaG93QWN0aXZlVG9vbHRpcDogZmFsc2UsXG4gICAgICBzbGlkZXNOYXZpZ2F0aW9uOiBmYWxzZSxcbiAgICAgIHNsaWRlc05hdlBvc2l0aW9uOiAnYm90dG9tJyxcbiAgICAgIHNjcm9sbEJhcjogZmFsc2UsXG4gICAgICBoeWJyaWQ6IGZhbHNlLFxuICAgICAgbGljZW5zZUtleTogJycsXG4gICAgICBjcmVkaXRzOiB7XG4gICAgICAgIFwiZW5hYmxlZFwiOiB0cnVlLFxuICAgICAgICBcImxhYmVsXCI6ICdNYWRlIHdpdGggZnVsbFBhZ2UuanMnLFxuICAgICAgICBcInBvc2l0aW9uXCI6ICdyaWdodCdcbiAgICAgIH0sXG4gICAgICAvL3Njcm9sbGluZ1xuICAgICAgY3NzMzogdHJ1ZSxcbiAgICAgIHNjcm9sbGluZ1NwZWVkOiA3MDAsXG4gICAgICBhdXRvU2Nyb2xsaW5nOiB0cnVlLFxuICAgICAgZml0VG9TZWN0aW9uOiB0cnVlLFxuICAgICAgZWFzaW5nOiAnZWFzZUluT3V0Q3ViaWMnLFxuICAgICAgZWFzaW5nY3NzMzogJ2Vhc2UnLFxuICAgICAgbG9vcEJvdHRvbTogZmFsc2UsXG4gICAgICBsb29wVG9wOiBmYWxzZSxcbiAgICAgIGxvb3BIb3Jpem9udGFsOiB0cnVlLFxuICAgICAgY29udGludW91c1ZlcnRpY2FsOiBmYWxzZSxcbiAgICAgIGNvbnRpbnVvdXNIb3Jpem9udGFsOiBmYWxzZSxcbiAgICAgIHNjcm9sbEhvcml6b250YWxseTogZmFsc2UsXG4gICAgICBpbnRlcmxvY2tlZFNsaWRlczogZmFsc2UsXG4gICAgICBkcmFnQW5kTW92ZTogZmFsc2UsXG4gICAgICBvZmZzZXRTZWN0aW9uczogZmFsc2UsXG4gICAgICByZXNldFNsaWRlcnM6IGZhbHNlLFxuICAgICAgZmFkaW5nRWZmZWN0OiBmYWxzZSxcbiAgICAgIG5vcm1hbFNjcm9sbEVsZW1lbnRzOiBudWxsLFxuICAgICAgc2Nyb2xsT3ZlcmZsb3c6IHRydWUsXG4gICAgICBzY3JvbGxPdmVyZmxvd1Jlc2V0OiBmYWxzZSxcbiAgICAgIHRvdWNoU2Vuc2l0aXZpdHk6IDUsXG4gICAgICB0b3VjaFdyYXBwZXI6IG51bGwsXG4gICAgICBiaWdTZWN0aW9uc0Rlc3RpbmF0aW9uOiBudWxsLFxuICAgICAgLy9BY2Nlc3NpYmlsaXR5XG4gICAgICBrZXlib2FyZFNjcm9sbGluZzogdHJ1ZSxcbiAgICAgIGFuaW1hdGVBbmNob3I6IHRydWUsXG4gICAgICByZWNvcmRIaXN0b3J5OiB0cnVlLFxuICAgICAgYWxsb3dDb3JyZWN0RGlyZWN0aW9uOiBmYWxzZSxcbiAgICAgIC8vZGVzaWduXG4gICAgICBzY3JvbGxPdmVyZmxvd01hY1N0eWxlOiB0cnVlLFxuICAgICAgY29udHJvbEFycm93czogdHJ1ZSxcbiAgICAgIGNvbnRyb2xBcnJvd3NIVE1MOiBbJzxkaXYgY2xhc3M9XCInICsgU0xJREVTX1NUWUxFRF9BUlJPVyArICdcIj48L2Rpdj4nLCAnPGRpdiBjbGFzcz1cIicgKyBTTElERVNfU1RZTEVEX0FSUk9XICsgJ1wiPjwvZGl2PiddLFxuICAgICAgY29udHJvbEFycm93Q29sb3I6ICcjZmZmJyxcbiAgICAgIHZlcnRpY2FsQ2VudGVyZWQ6IHRydWUsXG4gICAgICBzZWN0aW9uc0NvbG9yOiBbXSxcbiAgICAgIHBhZGRpbmdUb3A6IDAsXG4gICAgICBwYWRkaW5nQm90dG9tOiAwLFxuICAgICAgZml4ZWRFbGVtZW50czogbnVsbCxcbiAgICAgIHJlc3BvbnNpdmU6IDAsXG4gICAgICAvL2JhY2t3YXJkcyBjb21wYWJpdGlsaXR5IHdpdGggcmVzcG9uc2l2ZVdpZGR0aFxuICAgICAgcmVzcG9uc2l2ZVdpZHRoOiAwLFxuICAgICAgcmVzcG9uc2l2ZUhlaWdodDogMCxcbiAgICAgIHJlc3BvbnNpdmVTbGlkZXM6IGZhbHNlLFxuICAgICAgcGFyYWxsYXg6IGZhbHNlLFxuICAgICAgcGFyYWxsYXhPcHRpb25zOiB7XG4gICAgICAgIHR5cGU6ICdyZXZlYWwnLFxuICAgICAgICBwZXJjZW50YWdlOiA2MixcbiAgICAgICAgcHJvcGVydHk6ICd0cmFuc2xhdGUnXG4gICAgICB9LFxuICAgICAgY2FyZHM6IGZhbHNlLFxuICAgICAgY2FyZHNPcHRpb25zOiB7XG4gICAgICAgIHBlcnNwZWN0aXZlOiAxMDAsXG4gICAgICAgIGZhZGVDb250ZW50OiB0cnVlLFxuICAgICAgICBmYWRlQmFja2dyb3VuZDogdHJ1ZVxuICAgICAgfSxcbiAgICAgIC8vQ3VzdG9tIHNlbGVjdG9yc1xuICAgICAgc2VjdGlvblNlbGVjdG9yOiBTRUNUSU9OX0RFRkFVTFRfU0VMLFxuICAgICAgc2xpZGVTZWxlY3RvcjogU0xJREVfREVGQVVMVF9TRUwsXG4gICAgICAvL2V2ZW50c1xuICAgICAgYWZ0ZXJMb2FkOiBudWxsLFxuICAgICAgYmVmb3JlTGVhdmU6IG51bGwsXG4gICAgICBvbkxlYXZlOiBudWxsLFxuICAgICAgYWZ0ZXJSZW5kZXI6IG51bGwsXG4gICAgICBhZnRlclJlc2l6ZTogbnVsbCxcbiAgICAgIGFmdGVyUmVCdWlsZDogbnVsbCxcbiAgICAgIGFmdGVyU2xpZGVMb2FkOiBudWxsLFxuICAgICAgb25TbGlkZUxlYXZlOiBudWxsLFxuICAgICAgYWZ0ZXJSZXNwb25zaXZlOiBudWxsLFxuICAgICAgb25TY3JvbGxPdmVyZmxvdzogbnVsbCxcbiAgICAgIGxhenlMb2FkaW5nOiB0cnVlLFxuICAgICAgb2JzZXJ2ZXI6IHRydWVcbiAgICB9O1xuXG4gICAgdmFyIGNvbnRhaW5lciA9IG51bGw7XG4gICAgdmFyIGdfaW5pdGlhbEFuY2hvcnNJbkRvbSA9IGZhbHNlO1xuICAgIHZhciBvcmlnaW5hbHMgPSBkZWVwRXh0ZW5kKHt9LCBkZWZhdWx0T3B0aW9ucyk7IC8vZGVlcCBjb3B5XG5cbiAgICB2YXIgZ19vcHRpb25zID0gbnVsbDtcbiAgICBmdW5jdGlvbiBnZXRJbml0aWFsQW5jaG9yc0luRG9tKCkge1xuICAgICAgcmV0dXJuIGdfaW5pdGlhbEFuY2hvcnNJbkRvbTtcbiAgICB9XG4gICAgZnVuY3Rpb24gc2V0Q29udGFpbmVyKHZhbHVlKSB7XG4gICAgICBjb250YWluZXIgPSB2YWx1ZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0Q29udGFpbmVyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gY29udGFpbmVyO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZXRPcHRpb25zKCkge1xuICAgICAgcmV0dXJuIGdfb3B0aW9ucyB8fCBkZWZhdWx0T3B0aW9ucztcbiAgICB9XG4gICAgZnVuY3Rpb24gc2V0T3B0aW9ucyhvcHRpb25zKSB7XG4gICAgICBnX29wdGlvbnMgPSBkZWVwRXh0ZW5kKHt9LCBkZWZhdWx0T3B0aW9ucywgb3B0aW9ucyk7XG4gICAgICBvcmlnaW5hbHMgPSBPYmplY3QuYXNzaWduKHt9LCBnX29wdGlvbnMpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZXRPcmlnaW5hbHMoKSB7XG4gICAgICByZXR1cm4gb3JpZ2luYWxzO1xuICAgIH1cbiAgICBmdW5jdGlvbiBzZXRPcHRpb24obmFtZSwgdmFsdWUpIHtcbiAgICAgIGRlZmF1bHRPcHRpb25zW25hbWVdID0gdmFsdWU7XG4gICAgfVxuICAgIC8qXG4gICAgKiBTZXRzIHRoZSBzdGF0ZSBmb3IgYSB2YXJpYWJsZSB3aXRoIG11bHRpcGxlIHN0YXRlcyAob3JpZ2luYWwsIGFuZCB0ZW1wb3JhbClcbiAgICAqIFNvbWUgdmFyaWFibGVzIHN1Y2ggYXMgYGF1dG9TY3JvbGxpbmdgIG9yIGByZWNvcmRIaXN0b3J5YCBtaWdodCBjaGFuZ2UgYXV0b21hdGljYWxseSBpdHMgc3RhdGUgd2hlbiB1c2luZyBgcmVzcG9uc2l2ZWAgb3IgYGF1dG9TY3JvbGxpbmc6ZmFsc2VgLlxuICAgICogVGhpcyBmdW5jdGlvbiBpcyB1c2VkIHRvIGtlZXAgdHJhY2sgb2YgYm90aCBzdGF0ZXMsIHRoZSBvcmlnaW5hbCBhbmQgdGhlIHRlbXBvcmFsIG9uZS5cbiAgICAqIElmIHR5cGUgaXMgbm90ICdpbnRlcm5hbCcsIHRoZW4gd2UgYXNzdW1lIHRoZSB1c2VyIGlzIGdsb2JhbGx5IGNoYW5naW5nIHRoZSB2YXJpYWJsZS5cbiAgICAqL1xuXG4gICAgZnVuY3Rpb24gc2V0VmFyaWFibGVTdGF0ZSh2YXJpYWJsZSwgdmFsdWUsIHR5cGUpIHtcbiAgICAgIGdfb3B0aW9uc1t2YXJpYWJsZV0gPSB2YWx1ZTtcblxuICAgICAgaWYgKHR5cGUgIT09ICdpbnRlcm5hbCcpIHtcbiAgICAgICAgb3JpZ2luYWxzW3ZhcmlhYmxlXSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAqIFNldHRpbmcgb3B0aW9ucyBmcm9tIERPTSBlbGVtZW50cyBpZiB0aGV5IGFyZSBub3QgcHJvdmlkZWQuXG4gICAgKi9cblxuICAgIGZ1bmN0aW9uIHNldE9wdGlvbnNGcm9tRE9NKCkge1xuICAgICAgLy9ubyBhbmNob3JzIG9wdGlvbj8gQ2hlY2tpbmcgZm9yIHRoZW0gaW4gdGhlIERPTSBhdHRyaWJ1dGVzXG4gICAgICBpZiAoIWdldE9wdGlvbnMoKS5hbmNob3JzLmxlbmd0aCkge1xuICAgICAgICB2YXIgYW5jaG9yc0F0dHJpYnV0ZSA9ICdbZGF0YS1hbmNob3JdJztcbiAgICAgICAgdmFyIGFuY2hvcnMgPSAkKGdldE9wdGlvbnMoKS5zZWN0aW9uU2VsZWN0b3Iuc3BsaXQoJywnKS5qb2luKGFuY2hvcnNBdHRyaWJ1dGUgKyAnLCcpICsgYW5jaG9yc0F0dHJpYnV0ZSwgY29udGFpbmVyKTtcblxuICAgICAgICBpZiAoYW5jaG9ycy5sZW5ndGggJiYgYW5jaG9ycy5sZW5ndGggPT09ICQoZ2V0T3B0aW9ucygpLnNlY3Rpb25TZWxlY3RvciwgY29udGFpbmVyKS5sZW5ndGgpIHtcbiAgICAgICAgICBnX2luaXRpYWxBbmNob3JzSW5Eb20gPSB0cnVlO1xuICAgICAgICAgIGFuY2hvcnMuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgICAgZ2V0T3B0aW9ucygpLmFuY2hvcnMucHVzaChnZXRBdHRyKGl0ZW0sICdkYXRhLWFuY2hvcicpLnRvU3RyaW5nKCkpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IC8vbm8gdG9vbHRpcHMgb3B0aW9uPyBDaGVja2luZyBmb3IgdGhlbSBpbiB0aGUgRE9NIGF0dHJpYnV0ZXNcblxuXG4gICAgICBpZiAoIWdldE9wdGlvbnMoKS5uYXZpZ2F0aW9uVG9vbHRpcHMubGVuZ3RoKSB7XG4gICAgICAgIHZhciB0b29sdGlwc0F0dHJpYnV0ZSA9ICdbZGF0YS10b29sdGlwXSc7XG4gICAgICAgIHZhciB0b29sdGlwcyA9ICQoZ2V0T3B0aW9ucygpLnNlY3Rpb25TZWxlY3Rvci5zcGxpdCgnLCcpLmpvaW4odG9vbHRpcHNBdHRyaWJ1dGUgKyAnLCcpICsgdG9vbHRpcHNBdHRyaWJ1dGUsIGNvbnRhaW5lcik7XG5cbiAgICAgICAgaWYgKHRvb2x0aXBzLmxlbmd0aCkge1xuICAgICAgICAgIHRvb2x0aXBzLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICAgIGdldE9wdGlvbnMoKS5uYXZpZ2F0aW9uVG9vbHRpcHMucHVzaChnZXRBdHRyKGl0ZW0sICdkYXRhLXRvb2x0aXAnKS50b1N0cmluZygpKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBwbGFpbkl0ZW0gPSBmdW5jdGlvbiBwbGFpbkl0ZW0ocGFuZWwpIHtcbiAgICAgIHRoaXMuYW5jaG9yID0gcGFuZWwuYW5jaG9yO1xuICAgICAgdGhpcy5pdGVtID0gcGFuZWwuaXRlbTtcbiAgICAgIHRoaXMuaW5kZXggPSBwYW5lbC5pbmRleCgpO1xuICAgICAgdGhpcy5pc0xhc3QgPSB0aGlzLmluZGV4ID09PSBwYW5lbC5pdGVtLnBhcmVudEVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChwYW5lbC5zZWxlY3RvcikubGVuZ3RoIC0gMTtcbiAgICAgIHRoaXMuaXNGaXJzdCA9ICF0aGlzLmluZGV4O1xuICAgICAgdGhpcy5pc0FjdGl2ZSA9IHBhbmVsLmlzQWN0aXZlO1xuICAgIH07XG4gICAgLyoqXG4gICAgKiBJdGVtLiBTbGlkZSBvciBTZWN0aW9uIG9iamVjdHMgc2hhcmUgdGhlIHNhbWUgcHJvcGVydGllcy5cbiAgICAqL1xuXG4gICAgdmFyIEl0ZW0gPSBmdW5jdGlvbiBJdGVtKGVsLCBzZWxlY3Rvcikge1xuICAgICAgdGhpcy5wYXJlbnQgPSB0aGlzLnBhcmVudCB8fCBudWxsO1xuICAgICAgdGhpcy5zZWxlY3RvciA9IHNlbGVjdG9yO1xuICAgICAgdGhpcy5hbmNob3IgPSBnZXRBdHRyKGVsLCAnZGF0YS1hbmNob3InKSB8fCBnZXRPcHRpb25zKCkuYW5jaG9yc1tpbmRleChlbCwgZ2V0T3B0aW9ucygpLnNlY3Rpb25TZWxlY3RvcildO1xuICAgICAgdGhpcy5pdGVtID0gZWw7XG4gICAgICB0aGlzLmlzVmlzaWJsZSA9IGlzVmlzaWJsZShlbCk7XG4gICAgICB0aGlzLmlzQWN0aXZlID0gaGFzQ2xhc3MoZWwsIEFDVElWRSk7XG4gICAgICB0aGlzLmhhc1Njcm9sbCA9IGhhc0NsYXNzKGVsLCBPVkVSRkxPVyk7XG4gICAgICB0aGlzLmlzU2VjdGlvbiA9IHNlbGVjdG9yID09PSBnZXRPcHRpb25zKCkuc2VjdGlvblNlbGVjdG9yO1xuICAgICAgdGhpcy5jb250YWluZXIgPSBjbG9zZXN0KGVsLCBTTElERVNfQ09OVEFJTkVSX1NFTCkgfHwgY2xvc2VzdChlbCwgV1JBUFBFUl9TRUwpO1xuXG4gICAgICB0aGlzLmluZGV4ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zaWJsaW5ncygpLmluZGV4T2YodGhpcyk7XG4gICAgICB9O1xuICAgIH07XG5cbiAgICBJdGVtLnByb3RvdHlwZS5zaWJsaW5ncyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICh0aGlzLmlzU2VjdGlvbikge1xuICAgICAgICBpZiAodGhpcy5pc1Zpc2libGUpIHtcbiAgICAgICAgICByZXR1cm4gc3RhdGUuc2VjdGlvbnM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHN0YXRlLnNlY3Rpb25zSW5jbHVkaW5nSGlkZGVuO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnBhcmVudCA/IHRoaXMucGFyZW50LnNsaWRlcyA6IDA7XG4gICAgfTtcblxuICAgIEl0ZW0ucHJvdG90eXBlLnByZXYgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgc2libGluZ3MgPSB0aGlzLnNpYmxpbmdzKCk7XG4gICAgICB2YXIgY3VycmVudEluZGV4ID0gdGhpcy5pc1NlY3Rpb24gPyBzaWJsaW5ncy5pbmRleE9mKHRoaXMpIDogdGhpcy5wYXJlbnQuc2xpZGVzLmluZGV4T2YodGhpcyk7XG4gICAgICB2YXIgcHJldkluZGV4ID0gY3VycmVudEluZGV4IC0gMTtcblxuICAgICAgaWYgKHByZXZJbmRleCA+PSAwKSB7XG4gICAgICAgIHJldHVybiBzaWJsaW5nc1twcmV2SW5kZXhdO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuXG4gICAgSXRlbS5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBzaWJsaW5ncyA9IHRoaXMuc2libGluZ3MoKTtcbiAgICAgIHZhciBjdXJyZW50SW5kZXggPSB0aGlzLmlzU2VjdGlvbiA/IHNpYmxpbmdzLmluZGV4T2YodGhpcykgOiB0aGlzLnBhcmVudC5zbGlkZXMuaW5kZXhPZih0aGlzKTtcbiAgICAgIHZhciBuZXh0SW5kZXggPSBjdXJyZW50SW5kZXggKyAxO1xuXG4gICAgICBpZiAobmV4dEluZGV4IDwgc2libGluZ3MubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBzaWJsaW5nc1tuZXh0SW5kZXhdO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuXG4gICAgSXRlbS5wcm90b3R5cGUuZ2V0U2libGluZ3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAodGhpcy5pc1NlY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIHN0YXRlLnNlY3Rpb25zO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc3RhdGUucGFuZWxzO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBnZXROb2RlcyhwYW5lbHMpIHtcbiAgICAgIHJldHVybiBwYW5lbHMubWFwKGZ1bmN0aW9uIChwYW5lbCkge1xuICAgICAgICByZXR1cm4gcGFuZWwuaXRlbTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZXRQYW5lbEJ5RWxlbWVudChwYW5lbHMsIGVsKSB7XG4gICAgICByZXR1cm4gcGFuZWxzLmZpbmQoZnVuY3Rpb24gKHBhbmVsKSB7XG4gICAgICAgIHJldHVybiBwYW5lbC5pdGVtID09PSBlbDtcbiAgICAgIH0pO1xuICAgIH1cbiAgICB2YXIgU2VjdGlvbiA9IGZ1bmN0aW9uIFNlY3Rpb24oZWwpIHtcbiAgICAgIHBsYWluSXRlbS5jYWxsKHRoaXMsIGVsKTtcbiAgICB9O1xuICAgIHZhciBTbGlkZSA9IGZ1bmN0aW9uIFNsaWRlKGVsKSB7XG4gICAgICBwbGFpbkl0ZW0uY2FsbCh0aGlzLCBlbCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICogR2V0cyB0aGUgYWN0aXZlIHNsaWRlIChvciBzZWN0aW9uKSBmb3IgdGhlIGdpdmVuIHNlY3Rpb25cbiAgICAqL1xuXG4gICAgZnVuY3Rpb24gZ2V0U2xpZGVPclNlY3Rpb24oZGVzdGlueSkge1xuICAgICAgdmFyIHNsaWRlID0gJChTTElERV9BQ1RJVkVfU0VMLCBkZXN0aW55KTtcblxuICAgICAgaWYgKHNsaWRlLmxlbmd0aCkge1xuICAgICAgICBkZXN0aW55ID0gc2xpZGVbMF07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBkZXN0aW55O1xuICAgIH1cbiAgICBmdW5jdGlvbiBpc0Z1bGxQYWdlQWJvdmUoKSB7XG4gICAgICByZXR1cm4gZ2V0Q29udGFpbmVyKCkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuYm90dG9tID49IDA7XG4gICAgfVxuICAgIC8qKlxuICAgICogR2V0cyB0aGUgc2Nyb2xsaW5nIHNldHRpbmdzIGRlcGVuZGluZyBvbiB0aGUgcGx1Z2luIGF1dG9TY3JvbGxpbmcgb3B0aW9uXG4gICAgKi9cblxuICAgIGZ1bmN0aW9uIGdldFNjcm9sbFNldHRpbmdzKHRvcCkge1xuICAgICAgdmFyIG9wdGlvbnMgPSBnZXRPcHRpb25zKCk7XG4gICAgICB2YXIgcG9zaXRpb247XG4gICAgICB2YXIgZWxlbWVudDsgLy90b3AgcHJvcGVydHkgYW5pbWF0aW9uXG5cbiAgICAgIGlmIChvcHRpb25zLmF1dG9TY3JvbGxpbmcgJiYgIW9wdGlvbnMuc2Nyb2xsQmFyKSB7XG4gICAgICAgIHBvc2l0aW9uID0gLXRvcDtcbiAgICAgICAgZWxlbWVudCA9ICQoV1JBUFBFUl9TRUwpWzBdO1xuICAgICAgfSBlbHNlIGlmIChvcHRpb25zLmZpdFRvU2VjdGlvbikge1xuICAgICAgICBwb3NpdGlvbiA9IHRvcDtcbiAgICAgICAgZWxlbWVudCA9IGRvYy5ib2R5O1xuICAgICAgfSAvL3dpbmRvdyByZWFsIHNjcm9sbGluZ1xuICAgICAgZWxzZSB7XG4gICAgICAgIHBvc2l0aW9uID0gdG9wO1xuICAgICAgICBlbGVtZW50ID0gd2luZG93O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBvcHRpb25zOiBwb3NpdGlvbixcbiAgICAgICAgZWxlbWVudDogZWxlbWVudFxuICAgICAgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgKiBTY3JvbGxzIHRoZSBwYWdlIC8gc2xpZGVyIHRoZSBnaXZlbiBudW1iZXIgb2YgcGl4ZWxzLlxuICAgICogSXQgd2lsbCBkbyBpdCBvbmUgb3IgYW5vdGhlciB3YXkgZGVwZW5kaW9uZyBvbiB0aGUgbGlicmFyeSdzIGNvbmZpZy5cbiAgICAqL1xuXG4gICAgZnVuY3Rpb24gc2V0U2Nyb2xsaW5nKGVsZW1lbnQsIHZhbCkge1xuICAgICAgaWYgKCFnZXRPcHRpb25zKCkuYXV0b1Njcm9sbGluZyB8fCBnZXRPcHRpb25zKCkuc2Nyb2xsQmFyIHx8IGVsZW1lbnQuc2VsZiAhPSB3aW5kb3cgJiYgaGFzQ2xhc3MoZWxlbWVudCwgU0xJREVTX1dSQVBQRVIpKSB7XG4gICAgICAgIC8vc2Nyb2xsaW5nIGhvcml6b250YWxseSB0aHJvdWdoIHRoZSBzbGlkZXM/XG4gICAgICAgIGlmIChlbGVtZW50LnNlbGYgIT0gd2luZG93ICYmIGhhc0NsYXNzKGVsZW1lbnQsIFNMSURFU19XUkFQUEVSKSkge1xuICAgICAgICAgIGVsZW1lbnQuc2Nyb2xsTGVmdCA9IHZhbDtcbiAgICAgICAgfSAvL3ZlcnRpY2FsIHNjcm9sbFxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBlbGVtZW50LnNjcm9sbFRvKDAsIHZhbCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsZW1lbnQuc3R5bGUudG9wID0gdmFsICsgJ3B4JztcbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgKiBBZGRzIHRyYW5zaXRpb24gYW5pbWF0aW9ucyBmb3IgdGhlIGdpdmVuIGVsZW1lbnRcbiAgICAqL1xuXG4gICAgZnVuY3Rpb24gYWRkQW5pbWF0aW9uKGVsZW1lbnQpIHtcbiAgICAgIHZhciB0cmFuc2l0aW9uID0gJ3RyYW5zZm9ybSAnICsgZ2V0T3B0aW9ucygpLnNjcm9sbGluZ1NwZWVkICsgJ21zICcgKyBnZXRPcHRpb25zKCkuZWFzaW5nY3NzMztcbiAgICAgIHJlbW92ZUNsYXNzKGVsZW1lbnQsIE5PX1RSQU5TSVRJT04pO1xuICAgICAgcmV0dXJuIGNzcyhlbGVtZW50LCB7XG4gICAgICAgICctd2Via2l0LXRyYW5zaXRpb24nOiB0cmFuc2l0aW9uLFxuICAgICAgICAndHJhbnNpdGlvbic6IHRyYW5zaXRpb25cbiAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAqIFJldHVucyBgdXBgIG9yIGBkb3duYCBkZXBlbmRpbmcgb24gdGhlIHNjcm9sbGluZyBtb3ZlbWVudCB0byByZWFjaCBpdHMgZGVzdGluYXRpb25cbiAgICAqIGZyb20gdGhlIGN1cnJlbnQgc2VjdGlvbi5cbiAgICAqL1xuXG4gICAgZnVuY3Rpb24gZ2V0WW1vdmVtZW50KGFjdGl2ZVNlY3Rpb24sIGRlc3RpbnkpIHtcbiAgICAgIHZhciBmcm9tSW5kZXggPSBhY3RpdmVTZWN0aW9uLmluZGV4KCk7XG4gICAgICB2YXIgdG9JbmRleCA9IGluZGV4KGRlc3RpbnksIFNFQ1RJT05fU0VMKTtcblxuICAgICAgaWYgKGZyb21JbmRleCA9PSB0b0luZGV4KSB7XG4gICAgICAgIHJldHVybiAnbm9uZSc7XG4gICAgICB9XG5cbiAgICAgIGlmIChmcm9tSW5kZXggPiB0b0luZGV4KSB7XG4gICAgICAgIHJldHVybiAndXAnO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gJ2Rvd24nO1xuICAgIH1cbiAgICAvKipcbiAgICAqIFJlbW92ZSB0cmFuc2l0aW9uIGFuaW1hdGlvbnMgZm9yIHRoZSBnaXZlbiBlbGVtZW50XG4gICAgKi9cblxuICAgIGZ1bmN0aW9uIHJlbW92ZUFuaW1hdGlvbihlbGVtZW50KSB7XG4gICAgICByZXR1cm4gYWRkQ2xhc3MoZWxlbWVudCwgTk9fVFJBTlNJVElPTik7XG4gICAgfVxuICAgIC8qKlxuICAgICogUmV0dXJucyB0aGUgY3Jvc3MtYnJvd3NlciB0cmFuc2Zvcm0gc3RyaW5nLlxuICAgICovXG5cbiAgICBmdW5jdGlvbiBnZXRUcmFuc2Zvcm1zKHRyYW5zbGF0ZTNkKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAnLXdlYmtpdC10cmFuc2Zvcm0nOiB0cmFuc2xhdGUzZCxcbiAgICAgICAgJy1tb3otdHJhbnNmb3JtJzogdHJhbnNsYXRlM2QsXG4gICAgICAgICctbXMtdHJhbnNmb3JtJzogdHJhbnNsYXRlM2QsXG4gICAgICAgICd0cmFuc2Zvcm0nOiB0cmFuc2xhdGUzZFxuICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgc2lsZW50U2Nyb2xsSWQ7XG4gICAgLyoqXG4gICAgKiBBZGRzIGEgY3NzMyB0cmFuc2Zvcm0gcHJvcGVydHkgdG8gdGhlIGNvbnRhaW5lciBjbGFzcyB3aXRoIG9yIHdpdGhvdXQgYW5pbWF0aW9uIGRlcGVuZGluZyBvbiB0aGUgYW5pbWF0ZWQgcGFyYW0uXG4gICAgKi9cblxuICAgIGZ1bmN0aW9uIHRyYW5zZm9ybUNvbnRhaW5lcih0cmFuc2xhdGUzZCwgYW5pbWF0ZWQpIHtcbiAgICAgIGlmIChhbmltYXRlZCkge1xuICAgICAgICBhZGRBbmltYXRpb24oZ2V0Q29udGFpbmVyKCkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVtb3ZlQW5pbWF0aW9uKGdldENvbnRhaW5lcigpKTtcbiAgICAgIH1cblxuICAgICAgY2xlYXJUaW1lb3V0KHNpbGVudFNjcm9sbElkKTtcbiAgICAgIGNzcyhnZXRDb250YWluZXIoKSwgZ2V0VHJhbnNmb3Jtcyh0cmFuc2xhdGUzZCkpO1xuICAgICAgRlAudGVzdC50cmFuc2xhdGUzZCA9IHRyYW5zbGF0ZTNkOyAvL3N5bmNyb25vdXNseSByZW1vdmluZyB0aGUgY2xhc3MgYWZ0ZXIgdGhlIGFuaW1hdGlvbiBoYXMgYmVlbiBhcHBsaWVkLlxuXG4gICAgICBzaWxlbnRTY3JvbGxJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICByZW1vdmVDbGFzcyhnZXRDb250YWluZXIoKSwgTk9fVFJBTlNJVElPTik7XG4gICAgICB9LCAxMCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBTY3JvbGxzIHNpbGVudGx5ICh3aXRoIG5vIGFuaW1hdGlvbikgdGhlIHBhZ2UgdG8gdGhlIGdpdmVuIFkgcG9zaXRpb24uXG4gICAgKi9cblxuICAgIGZ1bmN0aW9uIHNpbGVudFNjcm9sbCh0b3ApIHtcbiAgICAgIC8vIFRoZSBmaXJzdCBzZWN0aW9uIGNhbiBoYXZlIGEgbmVnYXRpdmUgdmFsdWUgaW4gaU9TIDEwLiBOb3QgcXVpdGUgc3VyZSB3aHk6IC0wLjAxNDI4MjIyNjU2MjVcbiAgICAgIC8vIHRoYXQncyB3aHkgd2Ugcm91bmQgaXQgdG8gMC5cbiAgICAgIHZhciByb3VuZGVkVG9wID0gTWF0aC5yb3VuZCh0b3ApO1xuXG4gICAgICBpZiAoZ2V0T3B0aW9ucygpLmNzczMgJiYgZ2V0T3B0aW9ucygpLmF1dG9TY3JvbGxpbmcgJiYgIWdldE9wdGlvbnMoKS5zY3JvbGxCYXIpIHtcbiAgICAgICAgdmFyIHRyYW5zbGF0ZTNkID0gJ3RyYW5zbGF0ZTNkKDBweCwgLScgKyByb3VuZGVkVG9wICsgJ3B4LCAwcHgpJztcbiAgICAgICAgdHJhbnNmb3JtQ29udGFpbmVyKHRyYW5zbGF0ZTNkLCBmYWxzZSk7XG4gICAgICB9IGVsc2UgaWYgKGdldE9wdGlvbnMoKS5hdXRvU2Nyb2xsaW5nICYmICFnZXRPcHRpb25zKCkuc2Nyb2xsQmFyKSB7XG4gICAgICAgIGNzcyhnZXRDb250YWluZXIoKSwge1xuICAgICAgICAgICd0b3AnOiAtcm91bmRlZFRvcCArICdweCdcbiAgICAgICAgfSk7XG4gICAgICAgIEZQLnRlc3QudG9wID0gLXJvdW5kZWRUb3AgKyAncHgnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHNjcm9sbFNldHRpbmdzID0gZ2V0U2Nyb2xsU2V0dGluZ3Mocm91bmRlZFRvcCk7XG4gICAgICAgIHNldFNjcm9sbGluZyhzY3JvbGxTZXR0aW5ncy5lbGVtZW50LCBzY3JvbGxTZXR0aW5ncy5vcHRpb25zKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBGUC5zZXRTY3JvbGxpbmdTcGVlZCA9IHNldFNjcm9sbGluZ1NwZWVkO1xuICAgIC8qKlxuICAgICogRGVmaW5lcyB0aGUgc2Nyb2xsaW5nIHNwZWVkXG4gICAgKi9cblxuICAgIGZ1bmN0aW9uIHNldFNjcm9sbGluZ1NwZWVkKHZhbHVlLCB0eXBlKSB7XG4gICAgICBzZXRWYXJpYWJsZVN0YXRlKCdzY3JvbGxpbmdTcGVlZCcsIHZhbHVlLCB0eXBlKTtcbiAgICB9XG5cbiAgICAvL0B0cy1jaGVja1xuICAgIC8qKlxuICAgICogU2ltdWxhdGVzIHRoZSBhbmltYXRlZCBzY3JvbGxUb3Agb2YgalF1ZXJ5LiBVc2VkIHdoZW4gY3NzMzpmYWxzZSBvciBzY3JvbGxCYXI6dHJ1ZSBvciBhdXRvU2Nyb2xsaW5nOmZhbHNlXG4gICAgKiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xNjEzNjc4OS8xMDgxMzk2XG4gICAgKi9cblxuICAgIGZ1bmN0aW9uIHNjcm9sbFRvKGVsZW1lbnQsIHRvLCBkdXJhdGlvbiwgY2FsbGJhY2spIHtcbiAgICAgIHZhciBzdGFydCA9IGdldFNjcm9sbGVkUG9zaXRpb24oZWxlbWVudCk7XG4gICAgICB2YXIgY2hhbmdlID0gdG8gLSBzdGFydDtcbiAgICAgIHZhciBpc0NhbGxiYWNrRmlyZWQgPSBmYWxzZTtcbiAgICAgIHZhciBzdGFydFRpbWU7XG4gICAgICBzZXRTdGF0ZSh7XG4gICAgICAgIGFjdGl2ZUFuaW1hdGlvbjogdHJ1ZVxuICAgICAgfSk7IC8vIE1ha2luZyBzdXJlIHdlIGNhbiB0cmlnZ2VyIGEgc2Nyb2xsIGFuaW1hdGlvblxuICAgICAgLy8gd2hlbiBjc3Mgc2Nyb2xsIHNuYXAgaXMgYWN0aXZlLiBUZW1wb3JhbGx5IGRpc2FibGluZyBpdC5cblxuICAgICAgaWYgKGVsZW1lbnQgPT09IGRvYy5ib2R5KSB7XG4gICAgICAgIGNzcyhkb2MuYm9keSwge1xuICAgICAgICAgICdzY3JvbGwtc25hcC10eXBlJzogJ25vbmUnXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICB2YXIgYW5pbWF0ZVNjcm9sbCA9IGZ1bmN0aW9uIGFuaW1hdGVTY3JvbGwodGltZXN0YW1wKSB7XG4gICAgICAgIGlmICghc3RhcnRUaW1lKSB7XG4gICAgICAgICAgc3RhcnRUaW1lID0gdGltZXN0YW1wO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGN1cnJlbnRUaW1lID0gTWF0aC5mbG9vcih0aW1lc3RhbXAgLSBzdGFydFRpbWUpO1xuXG4gICAgICAgIGlmIChzdGF0ZS5hY3RpdmVBbmltYXRpb24pIHtcbiAgICAgICAgICAvL2luIG9yZGVyIHRvIHN0b3BlIGl0IGZyb20gb3RoZXIgZnVuY3Rpb24gd2hlbmV2ZXIgd2Ugd2FudFxuICAgICAgICAgIHZhciB2YWwgPSB0bztcblxuICAgICAgICAgIGlmIChkdXJhdGlvbikge1xuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgdmFsID0gd2luLmZwX2Vhc2luZ3NbZ2V0T3B0aW9ucygpLmVhc2luZ10oY3VycmVudFRpbWUsIHN0YXJ0LCBjaGFuZ2UsIGR1cmF0aW9uKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoY3VycmVudFRpbWUgPD0gZHVyYXRpb24pIHtcbiAgICAgICAgICAgIHNldFNjcm9sbGluZyhlbGVtZW50LCB2YWwpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChjdXJyZW50VGltZSA8IGR1cmF0aW9uKSB7XG4gICAgICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGFuaW1hdGVTY3JvbGwpO1xuICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSAndW5kZWZpbmVkJyAmJiAhaXNDYWxsYmFja0ZpcmVkKSB7XG4gICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgaXNDYWxsYmFja0ZpcmVkID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoIWlzQ2FsbGJhY2tGaXJlZCkge1xuICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgaXNDYWxsYmFja0ZpcmVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShhbmltYXRlU2Nyb2xsKTtcbiAgICB9XG4gICAgLyoqXG4gICAgKiBHZXR0aW5nIHRoZSBwb3NpdGlvbiBvZiB0aGUgZWxlbWVudCB0byBzY3JvbGwgd2hlbiB1c2luZyBqUXVlcnkgYW5pbWF0aW9uc1xuICAgICovXG5cbiAgICBmdW5jdGlvbiBnZXRTY3JvbGxlZFBvc2l0aW9uKGVsZW1lbnQpIHtcbiAgICAgIHZhciBwb3NpdGlvbjsgLy9pcyBub3QgdGhlIHdpbmRvdyBlbGVtZW50IGFuZCBpcyBhIHNsaWRlP1xuXG4gICAgICBpZiAoZWxlbWVudC5zZWxmICE9IHdpbiAmJiBoYXNDbGFzcyhlbGVtZW50LCBTTElERVNfV1JBUFBFUikpIHtcbiAgICAgICAgcG9zaXRpb24gPSBlbGVtZW50LnNjcm9sbExlZnQ7XG4gICAgICB9IGVsc2UgaWYgKCFnZXRPcHRpb25zKCkuYXV0b1Njcm9sbGluZyB8fCBnZXRPcHRpb25zKCkuc2Nyb2xsQmFyKSB7XG4gICAgICAgIHBvc2l0aW9uID0gZ2V0U2Nyb2xsVG9wKGdldE9wdGlvbnMoKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwb3NpdGlvbiA9IGVsZW1lbnQub2Zmc2V0VG9wO1xuICAgICAgfSAvL2dldHMgdGhlIHRvcCBwcm9wZXJ0eSBvZiB0aGUgd3JhcHBlclxuXG5cbiAgICAgIHJldHVybiBwb3NpdGlvbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIE1ha2VzIHN1cmUgdG8gb25seSBjcmVhdGUgYSBQYW5lbCBvYmplY3QgaWYgdGhlIGVsZW1lbnQgZXhpc3RcbiAgICAqL1xuXG4gICAgZnVuY3Rpb24gbnVsbE9yU2VjdGlvbihlbCkge1xuICAgICAgaWYgKGVsICYmICFlbC5pdGVtKSB7XG4gICAgICAgIHJldHVybiBuZXcgU2VjdGlvbihuZXcgU2VjdGlvblBhbmVsKGVsKSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBlbCA/IG5ldyBTZWN0aW9uKGVsKSA6IG51bGw7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbnVsbE9yU2xpZGUoZWwpIHtcbiAgICAgIHJldHVybiBlbCA/IG5ldyBTbGlkZShlbCkgOiBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogRGlzcGF0Y2ggZXZlbnRzICYgY2FsbGJhY2tzXG4gICAgKi9cblxuICAgIGZ1bmN0aW9uIGZpcmVDYWxsYmFjayhldmVudE5hbWUsIHYpIHtcbiAgICAgIHZhciBldmVudERhdGEgPSBnZXRFdmVudERhdGEoZXZlbnROYW1lLCB2KTtcbiAgICAgIHRyaWdnZXIoZ2V0Q29udGFpbmVyKCksIGV2ZW50TmFtZSwgZXZlbnREYXRhKTtcblxuICAgICAgaWYgKGdldE9wdGlvbnMoKVtldmVudE5hbWVdLmFwcGx5KGV2ZW50RGF0YVtPYmplY3Qua2V5cyhldmVudERhdGEpWzBdXSwgdG9BcnJheShldmVudERhdGEpKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgKiBHZXRzIHRoZSBldmVudCdzIGRhdGEgZm9yIHRoZSBnaXZlbiBldmVudCBvbiB0aGUgcmlnaHQgZm9ybWF0LlxuICAgICovXG5cbiAgICBmdW5jdGlvbiBnZXRFdmVudERhdGEoZXZlbnROYW1lLCB2KSB7XG4gICAgICAvL3VzaW5nIGZ1bmN0aW9ucyB0byBydW4gb25seSB0aGUgbmVjZXNzYXJ5IGJpdHMgd2l0aGluIHRoZSBvYmplY3RcbiAgICAgIHZhciBwYXJhbXNQZXJFdmVudCA9IHtcbiAgICAgICAgYWZ0ZXJSZW5kZXI6IGZ1bmN0aW9uIGFmdGVyUmVuZGVyKCkge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzZWN0aW9uOiBudWxsT3JTZWN0aW9uKGdldFN0YXRlKCkuYWN0aXZlU2VjdGlvbiksXG4gICAgICAgICAgICBzbGlkZTogbnVsbE9yU2xpZGUoZ2V0U3RhdGUoKS5hY3RpdmVTZWN0aW9uLmFjdGl2ZVNsaWRlKVxuICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIG9uTGVhdmU6IGZ1bmN0aW9uIG9uTGVhdmUoKSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG9yaWdpbjogbnVsbE9yU2VjdGlvbih2Lml0ZW1zLm9yaWdpbiksXG4gICAgICAgICAgICBkZXN0aW5hdGlvbjogbnVsbE9yU2VjdGlvbih2Lml0ZW1zLmRlc3RpbmF0aW9uKSxcbiAgICAgICAgICAgIGRpcmVjdGlvbjogdi5kaXJlY3Rpb24sXG4gICAgICAgICAgICB0cmlnZ2VyOiBnZXRTdGF0ZSgpLnNjcm9sbFRyaWdnZXJcbiAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICBhZnRlckxvYWQ6IGZ1bmN0aW9uIGFmdGVyTG9hZCgpIHtcbiAgICAgICAgICByZXR1cm4gcGFyYW1zUGVyRXZlbnQub25MZWF2ZSgpO1xuICAgICAgICB9LFxuICAgICAgICBhZnRlclNsaWRlTG9hZDogZnVuY3Rpb24gYWZ0ZXJTbGlkZUxvYWQoKSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHNlY3Rpb246IG51bGxPclNlY3Rpb24odi5pdGVtcy5zZWN0aW9uKSxcbiAgICAgICAgICAgIG9yaWdpbjogbnVsbE9yU2VjdGlvbih2Lml0ZW1zLm9yaWdpbiksXG4gICAgICAgICAgICBkZXN0aW5hdGlvbjogbnVsbE9yU2VjdGlvbih2Lml0ZW1zLmRlc3RpbmF0aW9uKSxcbiAgICAgICAgICAgIGRpcmVjdGlvbjogdi5kaXJlY3Rpb24sXG4gICAgICAgICAgICB0cmlnZ2VyOiBnZXRTdGF0ZSgpLnNjcm9sbFRyaWdnZXJcbiAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICBvblNsaWRlTGVhdmU6IGZ1bmN0aW9uIG9uU2xpZGVMZWF2ZSgpIHtcbiAgICAgICAgICByZXR1cm4gcGFyYW1zUGVyRXZlbnQuYWZ0ZXJTbGlkZUxvYWQoKTtcbiAgICAgICAgfSxcbiAgICAgICAgYmVmb3JlTGVhdmU6IGZ1bmN0aW9uIGJlZm9yZUxlYXZlKCkge1xuICAgICAgICAgIHJldHVybiBwYXJhbXNQZXJFdmVudC5vbkxlYXZlKCk7XG4gICAgICAgIH0sXG4gICAgICAgIG9uU2Nyb2xsT3ZlcmZsb3c6IGZ1bmN0aW9uIG9uU2Nyb2xsT3ZlcmZsb3coKSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHNlY3Rpb246IG51bGxPclNlY3Rpb24oZ2V0U3RhdGUoKS5hY3RpdmVTZWN0aW9uKSxcbiAgICAgICAgICAgIHNsaWRlOiBudWxsT3JTbGlkZShnZXRTdGF0ZSgpLmFjdGl2ZVNlY3Rpb24uYWN0aXZlU2xpZGUpLFxuICAgICAgICAgICAgcG9zaXRpb246IHYucG9zaXRpb24sXG4gICAgICAgICAgICBkaXJlY3Rpb246IHYuZGlyZWN0aW9uXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHJldHVybiBwYXJhbXNQZXJFdmVudFtldmVudE5hbWVdKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBQbGF5cyB2aWRlbyBhbmQgYXVkaW8gZWxlbWVudHMuXG4gICAgKi9cblxuICAgIGZ1bmN0aW9uIHBsYXlNZWRpYShkZXN0aW55KSB7XG4gICAgICB2YXIgcGFuZWwgPSBnZXRTbGlkZU9yU2VjdGlvbihkZXN0aW55KTsgLy9wbGF5aW5nIEhUTUw1IG1lZGlhIGVsZW1lbnRzXG5cbiAgICAgICQoJ3ZpZGVvLCBhdWRpbycsIHBhbmVsKS5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgIGlmIChlbGVtZW50Lmhhc0F0dHJpYnV0ZSgnZGF0YS1hdXRvcGxheScpICYmIHR5cGVvZiBlbGVtZW50LnBsYXkgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBlbGVtZW50LnBsYXkoKTtcbiAgICAgICAgfVxuICAgICAgfSk7IC8veW91dHViZSB2aWRlb3NcblxuICAgICAgJCgnaWZyYW1lW3NyYyo9XCJ5b3V0dWJlLmNvbS9lbWJlZC9cIl0nLCBwYW5lbCkuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICBpZiAoZWxlbWVudC5oYXNBdHRyaWJ1dGUoJ2RhdGEtYXV0b3BsYXknKSkge1xuICAgICAgICAgIHBsYXlZb3V0dWJlKGVsZW1lbnQpO1xuICAgICAgICB9IC8vaW4gY2FzZSB0aGUgVVJMIHdhcyBub3QgbG9hZGVkIHlldC4gT24gcGFnZSBsb2FkIHdlIG5lZWQgdGltZSBmb3IgdGhlIG5ldyBVUkwgKHdpdGggdGhlIEFQSSBzdHJpbmcpIHRvIGxvYWQuXG5cblxuICAgICAgICBlbGVtZW50Lm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAoZWxlbWVudC5oYXNBdHRyaWJ1dGUoJ2RhdGEtYXV0b3BsYXknKSkge1xuICAgICAgICAgICAgcGxheVlvdXR1YmUoZWxlbWVudCk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICogUGxheXMgYSB5b3V0dWJlIHZpZGVvXG4gICAgKi9cblxuICAgIGZ1bmN0aW9uIHBsYXlZb3V0dWJlKGVsZW1lbnQpIHtcbiAgICAgIGVsZW1lbnQuY29udGVudFdpbmRvdy5wb3N0TWVzc2FnZSgne1wiZXZlbnRcIjpcImNvbW1hbmRcIixcImZ1bmNcIjpcInBsYXlWaWRlb1wiLFwiYXJnc1wiOlwiXCJ9JywgJyonKTtcbiAgICB9XG4gICAgLyoqXG4gICAgKiBTdG9wcyB2aWRlbyBhbmQgYXVkaW8gZWxlbWVudHMuXG4gICAgKi9cblxuXG4gICAgZnVuY3Rpb24gc3RvcE1lZGlhKGRlc3RpbnkpIHtcbiAgICAgIHZhciBwYW5lbCA9IGdldFNsaWRlT3JTZWN0aW9uKGRlc3RpbnkpOyAvL3N0b3BwaW5nIEhUTUw1IG1lZGlhIGVsZW1lbnRzXG5cbiAgICAgICQoJ3ZpZGVvLCBhdWRpbycsIHBhbmVsKS5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgIGlmICghZWxlbWVudC5oYXNBdHRyaWJ1dGUoJ2RhdGEta2VlcHBsYXlpbmcnKSAmJiB0eXBlb2YgZWxlbWVudC5wYXVzZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGVsZW1lbnQucGF1c2UoKTtcbiAgICAgICAgfVxuICAgICAgfSk7IC8veW91dHViZSB2aWRlb3NcblxuICAgICAgJCgnaWZyYW1lW3NyYyo9XCJ5b3V0dWJlLmNvbS9lbWJlZC9cIl0nLCBwYW5lbCkuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICBpZiAoL3lvdXR1YmVcXC5jb21cXC9lbWJlZFxcLy8udGVzdChnZXRBdHRyKGVsZW1lbnQsICdzcmMnKSkgJiYgIWVsZW1lbnQuaGFzQXR0cmlidXRlKCdkYXRhLWtlZXBwbGF5aW5nJykpIHtcbiAgICAgICAgICBlbGVtZW50LmNvbnRlbnRXaW5kb3cucG9zdE1lc3NhZ2UoJ3tcImV2ZW50XCI6XCJjb21tYW5kXCIsXCJmdW5jXCI6XCJwYXVzZVZpZGVvXCIsXCJhcmdzXCI6XCJcIn0nLCAnKicpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgLypcbiAgICAqIEVuYWJsZXMgdGhlIFlvdXR1YmUgdmlkZW9zIEFQSSBzbyB3ZSBjYW4gY29udHJvbCB0aGVpciBmbG93IGlmIG5lY2Vzc2FyeS5cbiAgICAqL1xuXG4gICAgZnVuY3Rpb24gZW5hYmxlWW91dHViZUFQSSgpIHtcbiAgICAgICQoJ2lmcmFtZVtzcmMqPVwieW91dHViZS5jb20vZW1iZWQvXCJdJywgZ2V0Q29udGFpbmVyKCkpLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgYWRkVVJMUGFyYW0oaXRlbSwgJ2VuYWJsZWpzYXBpPTEnKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAqIEFkZHMgYSBuZXcgcGFyYW1ldGVyIGFuZCBpdHMgdmFsdWUgdG8gdGhlIGBzcmNgIG9mIGEgZ2l2ZW4gZWxlbWVudFxuICAgICovXG5cbiAgICBmdW5jdGlvbiBhZGRVUkxQYXJhbShlbGVtZW50LCBuZXdQYXJhbSkge1xuICAgICAgdmFyIG9yaWdpbmFsU3JjID0gZ2V0QXR0cihlbGVtZW50LCAnc3JjJyk7XG4gICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnc3JjJywgb3JpZ2luYWxTcmMgKyBnZXRVcmxQYXJhbVNpZ24ob3JpZ2luYWxTcmMpICsgbmV3UGFyYW0pO1xuICAgIH1cbiAgICAvKlxuICAgICogUmV0dXJucyB0aGUgcHJlZml4IHNpZ24gdG8gdXNlIGZvciBhIG5ldyBwYXJhbWV0ZXIgaW4gYW4gZXhpc3RlbiBVUkwuXG4gICAgKlxuICAgICogQHJldHVybiB7U3RyaW5nfSAgPyB8ICZcbiAgICAqL1xuXG5cbiAgICBmdW5jdGlvbiBnZXRVcmxQYXJhbVNpZ24odXJsKSB7XG4gICAgICByZXR1cm4gIS9cXD8vLnRlc3QodXJsKSA/ICc/JyA6ICcmJztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIExhenkgbG9hZHMgaW1hZ2UsIHZpZGVvIGFuZCBhdWRpbyBlbGVtZW50cy5cbiAgICAqL1xuXG4gICAgZnVuY3Rpb24gbGF6eUxvYWQoZGVzdGlueSkge1xuICAgICAgaWYgKCFnZXRPcHRpb25zKCkubGF6eUxvYWRpbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgcGFuZWwgPSBnZXRTbGlkZU9yU2VjdGlvbihkZXN0aW55KTtcbiAgICAgICQoJ2ltZ1tkYXRhLXNyY10sIGltZ1tkYXRhLXNyY3NldF0sIHNvdXJjZVtkYXRhLXNyY10sIHNvdXJjZVtkYXRhLXNyY3NldF0sIHZpZGVvW2RhdGEtc3JjXSwgYXVkaW9bZGF0YS1zcmNdLCBpZnJhbWVbZGF0YS1zcmNdJywgcGFuZWwpLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgICAgWydzcmMnLCAnc3Jjc2V0J10uZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgICAgICAgIHZhciBhdHRyaWJ1dGUgPSBnZXRBdHRyKGVsZW1lbnQsICdkYXRhLScgKyB0eXBlKTtcblxuICAgICAgICAgIGlmIChhdHRyaWJ1dGUgIT0gbnVsbCAmJiBhdHRyaWJ1dGUpIHtcbiAgICAgICAgICAgIHNldFNyYyhlbGVtZW50LCB0eXBlKTtcbiAgICAgICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKG1hdGNoZXMoZWxlbWVudCwgJ3NvdXJjZScpKSB7XG4gICAgICAgICAgdmFyIGVsZW1lbnRUb1BsYXkgPSBjbG9zZXN0KGVsZW1lbnQsICd2aWRlbywgYXVkaW8nKTtcblxuICAgICAgICAgIGlmIChlbGVtZW50VG9QbGF5KSB7XG4gICAgICAgICAgICBlbGVtZW50VG9QbGF5LmxvYWQoKTtcblxuICAgICAgICAgICAgZWxlbWVudFRvUGxheS5vbmxvYWRlZGRhdGEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdmFyICRib2R5ID0gbnVsbDtcbiAgICB2YXIgJGh0bWwgPSBudWxsO1xuICAgIHZhciAkaHRtbEJvZHkgPSBudWxsOyAvLyBjYWNoaW5nIGNvbW1vbiBlbGVtZW50c1xuXG4gICAgZnVuY3Rpb24gc2V0Q2FjaGUoKSB7XG4gICAgICAkYm9keSA9ICQoJ2JvZHknKVswXTtcbiAgICAgICRodG1sID0gJCgnaHRtbCcpWzBdO1xuICAgICAgJGh0bWxCb2R5ID0gJCgnaHRtbCwgYm9keScpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogU2V0cyBhIGNsYXNzIGZvciB0aGUgYm9keSBvZiB0aGUgcGFnZSBkZXBlbmRpbmcgb24gdGhlIGFjdGl2ZSBzZWN0aW9uIC8gc2xpZGVcbiAgICAqL1xuXG4gICAgZnVuY3Rpb24gc2V0Qm9keUNsYXNzKCkge1xuICAgICAgdmFyIHNlY3Rpb24gPSBnZXRTdGF0ZSgpLmFjdGl2ZVNlY3Rpb24uaXRlbTtcbiAgICAgIHZhciBzbGlkZSA9IGdldFN0YXRlKCkuYWN0aXZlU2VjdGlvbi5hY3RpdmVTbGlkZTtcbiAgICAgIHZhciBzZWN0aW9uQW5jaG9yID0gZ2V0QW5jaG9yKHNlY3Rpb24pO1xuICAgICAgdmFyIHRleHQgPSBTdHJpbmcoc2VjdGlvbkFuY2hvcik7XG5cbiAgICAgIGlmIChzbGlkZSkge1xuICAgICAgICB2YXIgc2xpZGVBbmNob3IgPSBnZXRBbmNob3Ioc2xpZGUuaXRlbSk7XG4gICAgICAgIHRleHQgPSB0ZXh0ICsgJy0nICsgc2xpZGVBbmNob3I7XG4gICAgICB9IC8vY2hhbmdpbmcgc2xhc2ggZm9yIGRhc2ggdG8gbWFrZSBpdCBhIHZhbGlkIENTUyBzdHlsZVxuXG5cbiAgICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoJy8nLCAnLScpLnJlcGxhY2UoJyMnLCAnJyk7IC8vcmVtb3ZpbmcgcHJldmlvdXMgYW5jaG9yIGNsYXNzZXNcblxuICAgICAgdmFyIGNsYXNzUmUgPSBuZXcgUmVnRXhwKCdcXFxcYlxcXFxzPycgKyBWSUVXSU5HX1BSRUZJWCArICctW15cXFxcc10rXFxcXGInLCBcImdcIik7XG4gICAgICAkYm9keS5jbGFzc05hbWUgPSAkYm9keS5jbGFzc05hbWUucmVwbGFjZShjbGFzc1JlLCAnJyk7IC8vYWRkaW5nIHRoZSBjdXJyZW50IGFuY2hvclxuXG4gICAgICBhZGRDbGFzcygkYm9keSwgVklFV0lOR19QUkVGSVggKyAnLScgKyB0ZXh0KTtcbiAgICB9XG4gICAgLyoqXG4gICAgKiBHZXRzIHRoZSBhbmNob3IgZm9yIHRoZSBnaXZlbiBzbGlkZSAvIHNlY3Rpb24uIEl0cyBpbmRleCB3aWxsIGJlIHVzZWQgaWYgdGhlcmUncyBub25lLlxuICAgICovXG5cbiAgICBmdW5jdGlvbiBnZXRBbmNob3IoZWxlbWVudCkge1xuICAgICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgYW5jaG9yID0gZ2V0QXR0cihlbGVtZW50LCAnZGF0YS1hbmNob3InKTtcbiAgICAgIHZhciBlbGVtZW50SW5kZXggPSBpbmRleChlbGVtZW50KTsgLy9TbGlkZSB3aXRob3V0IGFuY2hvciBsaW5rPyBXZSB0YWtlIHRoZSBpbmRleCBpbnN0ZWFkLlxuXG4gICAgICBpZiAoYW5jaG9yID09IG51bGwpIHtcbiAgICAgICAgYW5jaG9yID0gZWxlbWVudEluZGV4O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYW5jaG9yO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogU2V0cyB0aGUgc3RhdGUgb2YgdGhlIHdlYnNpdGUgZGVwZW5kaW5nIG9uIHRoZSBhY3RpdmUgc2VjdGlvbi9zbGlkZS5cbiAgICAqIEl0IGNoYW5nZXMgdGhlIFVSTCBoYXNoIHdoZW4gbmVlZGVkIGFuZCB1cGRhdGVzIHRoZSBib2R5IGNsYXNzLlxuICAgICovXG5cbiAgICBmdW5jdGlvbiBzZXRQYWdlU3RhdHVzKHNsaWRlSW5kZXgsIHNsaWRlQW5jaG9yLCBhbmNob3JMaW5rKSB7XG4gICAgICB2YXIgc2VjdGlvbkhhc2ggPSAnJztcblxuICAgICAgaWYgKGdldE9wdGlvbnMoKS5hbmNob3JzLmxlbmd0aCAmJiAhZ2V0T3B0aW9ucygpLmxvY2tBbmNob3JzKSB7XG4gICAgICAgIC8vaXNuJ3QgaXQgdGhlIGZpcnN0IHNsaWRlP1xuICAgICAgICBpZiAoc2xpZGVJbmRleCkge1xuICAgICAgICAgIGlmIChhbmNob3JMaW5rICE9IG51bGwpIHtcbiAgICAgICAgICAgIHNlY3Rpb25IYXNoID0gYW5jaG9yTGluaztcbiAgICAgICAgICB9IC8vc2xpZGUgd2l0aG91dCBhbmNob3IgbGluaz8gV2UgdGFrZSB0aGUgaW5kZXggaW5zdGVhZC5cblxuXG4gICAgICAgICAgaWYgKHNsaWRlQW5jaG9yID09IG51bGwpIHtcbiAgICAgICAgICAgIHNsaWRlQW5jaG9yID0gc2xpZGVJbmRleDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgICBsYXN0U2Nyb2xsZWRTbGlkZTogc2xpZGVBbmNob3JcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBzZXRVcmxIYXNoKHNlY3Rpb25IYXNoICsgJy8nICsgc2xpZGVBbmNob3IpOyAvL2ZpcnN0IHNsaWRlIHdvbid0IGhhdmUgc2xpZGUgYW5jaG9yLCBqdXN0IHRoZSBzZWN0aW9uIG9uZVxuICAgICAgICB9IGVsc2UgaWYgKHNsaWRlSW5kZXggIT0gbnVsbCkge1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIGxhc3RTY3JvbGxlZFNsaWRlOiBzbGlkZUFuY2hvclxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHNldFVybEhhc2goYW5jaG9yTGluayk7XG4gICAgICAgIH0gLy9zZWN0aW9uIHdpdGhvdXQgc2xpZGVzXG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHNldFVybEhhc2goYW5jaG9yTGluayk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc2V0Qm9keUNsYXNzKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICogU2V0cyB0aGUgVVJMIGhhc2guXG4gICAgKi9cblxuICAgIGZ1bmN0aW9uIHNldFVybEhhc2godXJsKSB7XG4gICAgICBpZiAoZ2V0T3B0aW9ucygpLnJlY29yZEhpc3RvcnkpIHtcbiAgICAgICAgbG9jYXRpb24uaGFzaCA9IHVybDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vTW9iaWxlIENocm9tZSBkb2Vzbid0IHdvcmsgdGhlIG5vcm1hbCB3YXksIHNvLi4uIGxldHMgdXNlIEhUTUw1IGZvciBwaG9uZXMgOilcbiAgICAgICAgaWYgKGlzVG91Y2hEZXZpY2UgfHwgaXNUb3VjaCkge1xuICAgICAgICAgIHdpbi5oaXN0b3J5LnJlcGxhY2VTdGF0ZSh1bmRlZmluZWQsIHVuZGVmaW5lZCwgJyMnICsgdXJsKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgYmFzZVVybCA9IHdpbi5sb2NhdGlvbi5ocmVmLnNwbGl0KCcjJylbMF07XG4gICAgICAgICAgd2luLmxvY2F0aW9uLnJlcGxhY2UoYmFzZVVybCArICcjJyArIHVybCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEdldHMgdGhlIG5hbWUgZm9yIHNjcmVlbiByZWFkZXJzIGZvciBhIHNlY3Rpb24vc2xpZGUgbmF2aWdhdGlvbiBidWxsZXQuXG4gICAgKi9cblxuICAgIGZ1bmN0aW9uIGdldEJ1bGxldExpbmtOYW1lKGksIGRlZmF1bHROYW1lLCBpdGVtKSB7XG4gICAgICB2YXIgYW5jaG9yID0gZGVmYXVsdE5hbWUgPT09ICdTZWN0aW9uJyA/IGdldE9wdGlvbnMoKS5hbmNob3JzW2ldIDogZ2V0QXR0cihpdGVtLCAnZGF0YS1hbmNob3InKTtcbiAgICAgIHJldHVybiBlbmNvZGVVUkkoZ2V0T3B0aW9ucygpLm5hdmlnYXRpb25Ub29sdGlwc1tpXSB8fCBhbmNob3IgfHwgZGVmYXVsdE5hbWUgKyAnICcgKyAoaSArIDEpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzbGlkZUJ1bGxldEhhbmRsZXIoZSkge1xuICAgICAgcHJldmVudERlZmF1bHQoZSk7XG4gICAgICBzZXRTdGF0ZSh7XG4gICAgICAgIHNjcm9sbFRyaWdnZXI6ICdob3Jpem9udGFsTmF2J1xuICAgICAgfSk7XG4gICAgICAvKmpzaGludCB2YWxpZHRoaXM6dHJ1ZSAqL1xuXG4gICAgICB2YXIgc2VjdGlvbkVsZW0gPSBjbG9zZXN0KHRoaXMsIFNFQ1RJT05fU0VMKTtcbiAgICAgIHZhciBzbGlkZXMgPSAkKFNMSURFU19XUkFQUEVSX1NFTCwgY2xvc2VzdCh0aGlzLCBTRUNUSU9OX1NFTCkpWzBdO1xuICAgICAgdmFyIHNlY3Rpb24gPSBnZXRQYW5lbEJ5RWxlbWVudChnZXRTdGF0ZSgpLnNlY3Rpb25zLCBzZWN0aW9uRWxlbSk7XG4gICAgICB2YXIgZGVzdGlueSA9IHNlY3Rpb24uc2xpZGVzW2luZGV4KGNsb3Nlc3QodGhpcywgJ2xpJykpXTtcbiAgICAgIEV2ZW50RW1pdHRlci5lbWl0KCdsYW5kc2NhcGVTY3JvbGwnLCB7XG4gICAgICAgIHNsaWRlczogc2xpZGVzLFxuICAgICAgICBkZXN0aW5hdGlvbjogZGVzdGlueS5pdGVtXG4gICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgKiBTZXRzIHRoZSBzdGF0ZSBmb3IgdGhlIGhvcml6b250YWwgYnVsbGV0IG5hdmlnYXRpb25zLlxuICAgICovXG5cbiAgICBmdW5jdGlvbiBhY3RpdmVTbGlkZXNOYXZpZ2F0aW9uKHNsaWRlc05hdiwgc2xpZGVJbmRleCkge1xuICAgICAgaWYgKGdldE9wdGlvbnMoKS5zbGlkZXNOYXZpZ2F0aW9uICYmIHNsaWRlc05hdiAhPSBudWxsKSB7XG4gICAgICAgIHJlbW92ZUNsYXNzKCQoQUNUSVZFX1NFTCwgc2xpZGVzTmF2KSwgQUNUSVZFKTtcbiAgICAgICAgYWRkQ2xhc3MoJCgnYScsICQoJ2xpJywgc2xpZGVzTmF2KVtzbGlkZUluZGV4XSksIEFDVElWRSk7XG4gICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICogQ3JlYXRlcyBhIGxhbmRzY2FwZSBuYXZpZ2F0aW9uIGJhciB3aXRoIGRvdHMgZm9yIGhvcml6b250YWwgc2xpZGVycy5cbiAgICAqL1xuXG4gICAgZnVuY3Rpb24gYWRkU2xpZGVzTmF2aWdhdGlvbihzZWN0aW9uKSB7XG4gICAgICB2YXIgc2VjdGlvbkVsZW0gPSBzZWN0aW9uLml0ZW07XG4gICAgICB2YXIgbnVtU2xpZGVzID0gc2VjdGlvbi5zbGlkZXMubGVuZ3RoO1xuICAgICAgYXBwZW5kVG8oY3JlYXRlRWxlbWVudEZyb21IVE1MKCc8ZGl2IGNsYXNzPVwiJyArIFNMSURFU19OQVYgKyAnXCI+PHVsPjwvdWw+PC9kaXY+JyksIHNlY3Rpb25FbGVtKTtcbiAgICAgIHZhciBuYXYgPSAkKFNMSURFU19OQVZfU0VMLCBzZWN0aW9uRWxlbSlbMF07IC8vdG9wIG9yIGJvdHRvbVxuXG4gICAgICBhZGRDbGFzcyhuYXYsICdmcC0nICsgZ2V0T3B0aW9ucygpLnNsaWRlc05hdlBvc2l0aW9uKTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW1TbGlkZXM7IGkrKykge1xuICAgICAgICB2YXIgc2xpZGUgPSAkKFNMSURFX1NFTCwgc2VjdGlvbkVsZW0pW2ldO1xuICAgICAgICBhcHBlbmRUbyhjcmVhdGVFbGVtZW50RnJvbUhUTUwoJzxsaT48YSBocmVmPVwiI1wiPjxzcGFuIGNsYXNzPVwiZnAtc3Itb25seVwiPicgKyBnZXRCdWxsZXRMaW5rTmFtZShpLCAnU2xpZGUnLCBzbGlkZSkgKyAnPC9zcGFuPjxzcGFuPjwvc3Bhbj48L2E+PC9saT4nKSwgJCgndWwnLCBuYXYpWzBdKTtcbiAgICAgIH0gLy9jZW50ZXJpbmcgaXRcblxuXG4gICAgICBjc3MobmF2LCB7XG4gICAgICAgICdtYXJnaW4tbGVmdCc6ICctJyArIG5hdi5pbm5lcldpZHRoIC8gMiArICdweCdcbiAgICAgIH0pO1xuICAgICAgdmFyIGFjdGl2ZVNsaWRlSW5kZXggPSBzZWN0aW9uLmFjdGl2ZVNsaWRlID8gc2VjdGlvbi5hY3RpdmVTbGlkZS5pbmRleCgpIDogMDtcbiAgICAgIGFkZENsYXNzKCQoJ2EnLCAkKCdsaScsIG5hdilbYWN0aXZlU2xpZGVJbmRleF0pLCBBQ1RJVkUpO1xuICAgIH1cblxuICAgIHZhciBpc1Njcm9sbEFsbG93ZWQgPSB7fTtcbiAgICBpc1Njcm9sbEFsbG93ZWQubSA9IHtcbiAgICAgICd1cCc6IHRydWUsXG4gICAgICAnZG93bic6IHRydWUsXG4gICAgICAnbGVmdCc6IHRydWUsXG4gICAgICAncmlnaHQnOiB0cnVlXG4gICAgfTtcbiAgICBpc1Njcm9sbEFsbG93ZWQuayA9IGRlZXBFeHRlbmQoe30sIGlzU2Nyb2xsQWxsb3dlZC5tKTtcbiAgICAvKipcbiAgICAqIEFsbG93aW5nIG9yIGRpc2FsbG93aW5nIHRoZSBtb3VzZS9zd2lwZSBzY3JvbGwgaW4gYSBnaXZlbiBkaXJlY3Rpb24uIChub3QgZm9yIGtleWJvYXJkKVxuICAgICogQHBhcmFtIHR5cGUgbSAobW91c2UpIG9yIGsgKGtleWJvYXJkKVxuICAgICovXG5cbiAgICBmdW5jdGlvbiBzZXRJc1Njcm9sbEFsbG93ZWQodmFsdWUsIGRpcmVjdGlvbiwgdHlwZSkge1xuICAgICAgLy91cCwgZG93biwgbGVmdCwgcmlnaHRcbiAgICAgIGlmIChkaXJlY3Rpb24gIT09ICdhbGwnKSB7XG4gICAgICAgIGlzU2Nyb2xsQWxsb3dlZFt0eXBlXVtkaXJlY3Rpb25dID0gdmFsdWU7XG4gICAgICB9IC8vYWxsIGRpcmVjdGlvbnM/XG4gICAgICBlbHNlIHtcbiAgICAgICAgT2JqZWN0LmtleXMoaXNTY3JvbGxBbGxvd2VkW3R5cGVdKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICBpc1Njcm9sbEFsbG93ZWRbdHlwZV1ba2V5XSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0SXNTY3JvbGxBbGxvd2VkKCkge1xuICAgICAgcmV0dXJuIGlzU2Nyb2xsQWxsb3dlZDtcbiAgICB9XG5cbiAgICBFdmVudEVtaXR0ZXIub24oJ29uQ2xpY2tPclRvdWNoJywgb25DbGlja09yVG91Y2gkMik7XG5cbiAgICBmdW5jdGlvbiBvbkNsaWNrT3JUb3VjaCQyKHBhcmFtcykge1xuICAgICAgdmFyIHRhcmdldCA9IHBhcmFtcy50YXJnZXQ7XG5cbiAgICAgIGlmIChtYXRjaGVzKHRhcmdldCwgU0xJREVTX0FSUk9XX1NFTCkgfHwgY2xvc2VzdCh0YXJnZXQsIFNMSURFU19BUlJPV19TRUwpKSB7XG4gICAgICAgIHNsaWRlQXJyb3dIYW5kbGVyLmNhbGwodGFyZ2V0LCBwYXJhbXMpO1xuICAgICAgfVxuICAgIH0gLy9TY3JvbGxpbmcgaG9yaXpvbnRhbGx5IHdoZW4gY2xpY2tpbmcgb24gdGhlIHNsaWRlciBjb250cm9scy5cblxuXG4gICAgZnVuY3Rpb24gc2xpZGVBcnJvd0hhbmRsZXIoKSB7XG4gICAgICAvKmpzaGludCB2YWxpZHRoaXM6dHJ1ZSAqL1xuICAgICAgdmFyIHNlY3Rpb24gPSBjbG9zZXN0KHRoaXMsIFNFQ1RJT05fU0VMKTtcbiAgICAgIC8qanNoaW50IHZhbGlkdGhpczp0cnVlICovXG5cbiAgICAgIGlmIChoYXNDbGFzcyh0aGlzLCBTTElERVNfUFJFVikpIHtcbiAgICAgICAgaWYgKGdldElzU2Nyb2xsQWxsb3dlZCgpLm0ubGVmdCkge1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIHNjcm9sbFRyaWdnZXI6ICdzbGlkZUFycm93J1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIEV2ZW50RW1pdHRlci5lbWl0KCdtb3ZlU2xpZGVMZWZ0Jywge1xuICAgICAgICAgICAgc2VjdGlvbjogc2VjdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoZ2V0SXNTY3JvbGxBbGxvd2VkKCkubS5yaWdodCkge1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIHNjcm9sbFRyaWdnZXI6ICdzbGlkZUFycm93J1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIEV2ZW50RW1pdHRlci5lbWl0KCdtb3ZlU2xpZGVSaWdodCcsIHtcbiAgICAgICAgICAgIHNlY3Rpb246IHNlY3Rpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAqIENyZWF0ZXMgdGhlIGNvbnRyb2wgYXJyb3dzIGZvciB0aGUgZ2l2ZW4gc2VjdGlvblxuICAgICovXG5cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZVNsaWRlQXJyb3dzKHNlY3Rpb24pIHtcbiAgICAgIHZhciBzZWN0aW9uRWxlbSA9IHNlY3Rpb24uaXRlbTtcbiAgICAgIHZhciBhcnJvd3MgPSBbY3JlYXRlRWxlbWVudEZyb21IVE1MKGdldE9wdGlvbnMoKS5jb250cm9sQXJyb3dzSFRNTFswXSksIGNyZWF0ZUVsZW1lbnRGcm9tSFRNTChnZXRPcHRpb25zKCkuY29udHJvbEFycm93c0hUTUxbMV0pXTtcbiAgICAgIGFmdGVyKCQoU0xJREVTX1dSQVBQRVJfU0VMLCBzZWN0aW9uRWxlbSlbMF0sIGFycm93cyk7XG4gICAgICBhZGRDbGFzcyhhcnJvd3MsIFNMSURFU19BUlJPVyk7XG4gICAgICBhZGRDbGFzcyhhcnJvd3NbMF0sIFNMSURFU19QUkVWKTtcbiAgICAgIGFkZENsYXNzKGFycm93c1sxXSwgU0xJREVTX05FWFQpO1xuXG4gICAgICBpZiAoZ2V0T3B0aW9ucygpLmNvbnRyb2xBcnJvd0NvbG9yICE9PSAnI2ZmZicpIHtcbiAgICAgICAgY3NzKCQoU0xJREVTX0FSUk9XX05FWFRfU0VMLCBzZWN0aW9uRWxlbSksIHtcbiAgICAgICAgICAnYm9yZGVyLWNvbG9yJzogJ3RyYW5zcGFyZW50IHRyYW5zcGFyZW50IHRyYW5zcGFyZW50ICcgKyBnZXRPcHRpb25zKCkuY29udHJvbEFycm93Q29sb3JcbiAgICAgICAgfSk7XG4gICAgICAgIGNzcygkKFNMSURFU19BUlJPV19QUkVWX1NFTCwgc2VjdGlvbkVsZW0pLCB7XG4gICAgICAgICAgJ2JvcmRlci1jb2xvcic6ICd0cmFuc3BhcmVudCAnICsgZ2V0T3B0aW9ucygpLmNvbnRyb2xBcnJvd0NvbG9yICsgJyB0cmFuc3BhcmVudCB0cmFuc3BhcmVudCdcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghZ2V0T3B0aW9ucygpLmxvb3BIb3Jpem9udGFsKSB7XG4gICAgICAgIGhpZGUoJChTTElERVNfQVJST1dfUFJFVl9TRUwsIHNlY3Rpb25FbGVtKSk7XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRvZ2dsZUNvbnRyb2xBcnJvd3Modikge1xuICAgICAgaWYgKCFnZXRPcHRpb25zKCkubG9vcEhvcml6b250YWwgJiYgZ2V0T3B0aW9ucygpLmNvbnRyb2xBcnJvd3MpIHtcbiAgICAgICAgLy9oaWRkaW5nIGl0IGZvciB0aGUgZmlzdCBzbGlkZSwgc2hvd2luZyBmb3IgdGhlIHJlc3RcbiAgICAgICAgdG9nZ2xlKCQoU0xJREVTX0FSUk9XX1BSRVZfU0VMLCB2LnNlY3Rpb24pLCB2LnNsaWRlSW5kZXggIT09IDApOyAvL2hpZGRpbmcgaXQgZm9yIHRoZSBsYXN0IHNsaWRlLCBzaG93aW5nIGZvciB0aGUgcmVzdFxuXG4gICAgICAgIHRvZ2dsZSgkKFNMSURFU19BUlJPV19ORVhUX1NFTCwgdi5zZWN0aW9uKSwgbmV4dCh2LmRlc3RpbnkpICE9IG51bGwpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBnX2FmdGVyU2xpZGVMb2Fkc0lkO1xuICAgIEZQLmxhbmRzY2FwZVNjcm9sbCA9IGxhbmRzY2FwZVNjcm9sbDtcbiAgICBFdmVudEVtaXR0ZXIub24oJ2JpbmRFdmVudHMnLCBiaW5kRXZlbnRzJGIpO1xuXG4gICAgZnVuY3Rpb24gYmluZEV2ZW50cyRiKCkge1xuICAgICAgRXZlbnRFbWl0dGVyLm9uKCdvblBlcmZvcm1Nb3ZlbWVudCcsIG9uUGVyZm9ybU1vdmVtZW50KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvblBlcmZvcm1Nb3ZlbWVudCgpIHtcbiAgICAgIGNsZWFyVGltZW91dChnX2FmdGVyU2xpZGVMb2Fkc0lkKTtcbiAgICB9XG4gICAgLyoqXG4gICAgKiBTY3JvbGxzIGhvcml6b250YWwgc2xpZGVycy5cbiAgICAqL1xuXG5cbiAgICBmdW5jdGlvbiBsYW5kc2NhcGVTY3JvbGwoc2xpZGVzLCBkZXN0aW55LCBkaXJlY3Rpb24pIHtcbiAgICAgIHZhciBzZWN0aW9uRWxlbSA9IGNsb3Nlc3Qoc2xpZGVzLCBTRUNUSU9OX1NFTCk7XG4gICAgICB2YXIgc2VjdGlvbiA9IGdldFN0YXRlKCkuc2VjdGlvbnMuZmlsdGVyKGZ1bmN0aW9uIChzZWN0aW9uKSB7XG4gICAgICAgIHJldHVybiBzZWN0aW9uLml0ZW0gPT0gc2VjdGlvbkVsZW07XG4gICAgICB9KVswXTtcbiAgICAgIHZhciBzbGlkZSA9IHNlY3Rpb24uc2xpZGVzLmZpbHRlcihmdW5jdGlvbiAoc2xpZGUpIHtcbiAgICAgICAgcmV0dXJuIHNsaWRlLml0ZW0gPT0gZGVzdGlueTtcbiAgICAgIH0pWzBdO1xuICAgICAgdmFyIHYgPSB7XG4gICAgICAgIFwic2xpZGVzXCI6IHNsaWRlcyxcbiAgICAgICAgXCJkZXN0aW55XCI6IGRlc3RpbnksXG4gICAgICAgIFwiZGlyZWN0aW9uXCI6IGRpcmVjdGlvbixcbiAgICAgICAgXCJkZXN0aW55UG9zXCI6IHtcbiAgICAgICAgICBcImxlZnRcIjogZGVzdGlueS5vZmZzZXRMZWZ0XG4gICAgICAgIH0sXG4gICAgICAgIFwic2xpZGVJbmRleFwiOiBzbGlkZS5pbmRleCgpLFxuICAgICAgICBcInNlY3Rpb25cIjogc2VjdGlvbkVsZW0sXG4gICAgICAgIFwic2VjdGlvbkluZGV4XCI6IHNlY3Rpb24uaW5kZXgoKSxcbiAgICAgICAgXCJhbmNob3JMaW5rXCI6IHNlY3Rpb24uYW5jaG9yLFxuICAgICAgICBcInNsaWRlc05hdlwiOiAkKFNMSURFU19OQVZfU0VMLCBzZWN0aW9uRWxlbSlbMF0sXG4gICAgICAgIFwic2xpZGVBbmNob3JcIjogc2xpZGUuYW5jaG9yLFxuICAgICAgICBcInByZXZTbGlkZVwiOiBzZWN0aW9uLmFjdGl2ZVNsaWRlLml0ZW0sXG4gICAgICAgIFwicHJldlNsaWRlSW5kZXhcIjogc2VjdGlvbi5hY3RpdmVTbGlkZS5pbmRleCgpLFxuICAgICAgICBcIml0ZW1zXCI6IHtcbiAgICAgICAgICBcInNlY3Rpb25cIjogc2VjdGlvbixcbiAgICAgICAgICBcIm9yaWdpblwiOiBzZWN0aW9uLmFjdGl2ZVNsaWRlLFxuICAgICAgICAgIFwiZGVzdGluYXRpb25cIjogc2xpZGVcbiAgICAgICAgfSxcbiAgICAgICAgLy9jYWNoaW5nIHRoZSB2YWx1ZSBvZiBpc1Jlc2l6aW5nIGF0IHRoZSBtb21tZW50IHRoZSBmdW5jdGlvbiBpcyBjYWxsZWRcbiAgICAgICAgLy9iZWNhdXNlIGl0IHdpbGwgYmUgY2hlY2tlZCBsYXRlciBpbnNpZGUgYSBzZXRUaW1lb3V0IGFuZCB0aGUgdmFsdWUgbWlnaHQgY2hhbmdlXG4gICAgICAgIFwibG9jYWxJc1Jlc2l6aW5nXCI6IHN0YXRlLmlzUmVzaXppbmdcbiAgICAgIH07XG4gICAgICB2LnhNb3ZlbWVudCA9IGdldFhtb3ZlbWVudCh2LnByZXZTbGlkZUluZGV4LCB2LnNsaWRlSW5kZXgpO1xuICAgICAgdi5kaXJlY3Rpb24gPSB2LmRpcmVjdGlvbiA/IHYuZGlyZWN0aW9uIDogdi54TW92ZW1lbnQ7IC8vaW1wb3J0YW50ISEgT25seSBkbyBpdCB3aGVuIG5vdCByZXNpemluZ1xuXG4gICAgICBpZiAoIXYubG9jYWxJc1Jlc2l6aW5nKSB7XG4gICAgICAgIC8vcHJldmVudGluZyBmcm9tIHNjcm9sbGluZyB0byB0aGUgbmV4dC9wcmV2IHNlY3Rpb24gd2hlbiB1c2luZyBzY3JvbGxIb3Jpem9udGFsbHlcbiAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgIGNhblNjcm9sbDogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChnZXRPcHRpb25zKCkub25TbGlkZUxlYXZlKSB7XG4gICAgICAgIC8vaWYgdGhlIHNpdGUgaXMgbm90IGp1c3QgcmVzaXppbmcgYW5kIHJlYWRqdXN0aW5nIHRoZSBzbGlkZXNcbiAgICAgICAgaWYgKCF2LmxvY2FsSXNSZXNpemluZyAmJiB2LnhNb3ZlbWVudCAhPT0gJ25vbmUnKSB7XG4gICAgICAgICAgaWYgKGlzRnVuY3Rpb24oZ2V0T3B0aW9ucygpLm9uU2xpZGVMZWF2ZSkpIHtcbiAgICAgICAgICAgIGlmIChmaXJlQ2FsbGJhY2soJ29uU2xpZGVMZWF2ZScsIHYpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgc2xpZGVNb3Zpbmc6IGZhbHNlXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGFkZENsYXNzKGRlc3RpbnksIEFDVElWRSk7XG4gICAgICByZW1vdmVDbGFzcyhzaWJsaW5ncyhkZXN0aW55KSwgQUNUSVZFKTtcbiAgICAgIHVwZGF0ZVN0YXRlKCk7XG5cbiAgICAgIGlmICghdi5sb2NhbElzUmVzaXppbmcpIHtcbiAgICAgICAgc3RvcE1lZGlhKHYucHJldlNsaWRlKTtcbiAgICAgICAgbGF6eUxvYWQoZGVzdGlueSk7XG4gICAgICB9XG5cbiAgICAgIHRvZ2dsZUNvbnRyb2xBcnJvd3Modik7IC8vb25seSBjaGFuZ2luZyB0aGUgVVJMIGlmIHRoZSBzbGlkZXMgYXJlIGluIHRoZSBjdXJyZW50IHNlY3Rpb24gKG5vdCBmb3IgcmVzaXplIHJlLWFkanVzdGluZylcblxuICAgICAgaWYgKHNlY3Rpb24uaXNBY3RpdmUgJiYgIXYubG9jYWxJc1Jlc2l6aW5nKSB7XG4gICAgICAgIHNldFBhZ2VTdGF0dXModi5zbGlkZUluZGV4LCB2LnNsaWRlQW5jaG9yLCB2LmFuY2hvckxpbmspO1xuICAgICAgfVxuXG4gICAgICBwZXJmb3JtSG9yaXpvbnRhbE1vdmUoc2xpZGVzLCB2LCB0cnVlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgKiBQZXJmb3JtcyB0aGUgaG9yaXpvbnRhbCBtb3ZlbWVudC4gKENTUzMgb3IgalF1ZXJ5KVxuICAgICpcbiAgICAqIEBwYXJhbSBmaXJlQ2FsbGJhY2sge0Jvb2xlYW59IC0gZGV0ZXJtaW5lcyB3aGV0aGVyIG9yIG5vdCB0byBmaXJlIHRoZSBjYWxsYmFja1xuICAgICovXG5cbiAgICBmdW5jdGlvbiBwZXJmb3JtSG9yaXpvbnRhbE1vdmUoc2xpZGVzLCB2LCBmaXJlQ2FsbGJhY2spIHtcbiAgICAgIHZhciBkZXN0aW55UG9zID0gdi5kZXN0aW55UG9zO1xuICAgICAgYWN0aXZlU2xpZGVzTmF2aWdhdGlvbih2LnNsaWRlc05hdiwgdi5zbGlkZUluZGV4KTtcbiAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgc2Nyb2xsWDogTWF0aC5yb3VuZChkZXN0aW55UG9zLmxlZnQpXG4gICAgICB9KTtcblxuICAgICAgaWYgKGdldE9wdGlvbnMoKS5jc3MzKSB7XG4gICAgICAgIHZhciB0cmFuc2xhdGUzZCA9ICd0cmFuc2xhdGUzZCgtJyArIE1hdGgucm91bmQoZGVzdGlueVBvcy5sZWZ0KSArICdweCwgMHB4LCAwcHgpJztcbiAgICAgICAgRlAudGVzdC50cmFuc2xhdGUzZEhbdi5zZWN0aW9uSW5kZXhdID0gdHJhbnNsYXRlM2Q7XG4gICAgICAgIGNzcyhhZGRBbmltYXRpb24oJChTTElERVNfQ09OVEFJTkVSX1NFTCwgc2xpZGVzKSksIGdldFRyYW5zZm9ybXModHJhbnNsYXRlM2QpKTtcbiAgICAgICAgY2xlYXJUaW1lb3V0KGdfYWZ0ZXJTbGlkZUxvYWRzSWQpO1xuICAgICAgICBnX2FmdGVyU2xpZGVMb2Fkc0lkID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKGZpcmVDYWxsYmFjaykge1xuICAgICAgICAgICAgYWZ0ZXJTbGlkZUxvYWRzKHYpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgZ2V0T3B0aW9ucygpLnNjcm9sbGluZ1NwZWVkKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIEZQLnRlc3QubGVmdFt2LnNlY3Rpb25JbmRleF0gPSBNYXRoLnJvdW5kKGRlc3RpbnlQb3MubGVmdCk7XG4gICAgICAgIHNjcm9sbFRvKHNsaWRlcywgTWF0aC5yb3VuZChkZXN0aW55UG9zLmxlZnQpLCBnZXRPcHRpb25zKCkuc2Nyb2xsaW5nU3BlZWQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAoZmlyZUNhbGxiYWNrKSB7XG4gICAgICAgICAgICBhZnRlclNsaWRlTG9hZHModik7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgKiBSZXR1bnMgYHJpZ2h0YCBvciBgbGVmdGAgZGVwZW5kaW5nIG9uIHRoZSBzY3JvbGxpbmcgbW92ZW1lbnQgdG8gcmVhY2ggaXRzIGRlc3RpbmF0aW9uXG4gICAgKiBmcm9tIHRoZSBjdXJyZW50IHNsaWRlLlxuICAgICovXG5cblxuICAgIGZ1bmN0aW9uIGdldFhtb3ZlbWVudChmcm9tSW5kZXgsIHRvSW5kZXgpIHtcbiAgICAgIGlmIChmcm9tSW5kZXggPT0gdG9JbmRleCkge1xuICAgICAgICByZXR1cm4gJ25vbmUnO1xuICAgICAgfVxuXG4gICAgICBpZiAoZnJvbUluZGV4ID4gdG9JbmRleCkge1xuICAgICAgICByZXR1cm4gJ2xlZnQnO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gJ3JpZ2h0JztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbkRlc3Ryb3kkNygpIHtcbiAgICAgIGNsZWFyVGltZW91dChnX2FmdGVyU2xpZGVMb2Fkc0lkKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZnRlclNsaWRlTG9hZHModikge1xuICAgICAgLy9pZiB0aGUgc2l0ZSBpcyBub3QganVzdCByZXNpemluZyBhbmQgcmVhZGp1c3RpbmcgdGhlIHNsaWRlc1xuICAgICAgaWYgKCF2LmxvY2FsSXNSZXNpemluZykge1xuICAgICAgICBpZiAoaXNGdW5jdGlvbihnZXRPcHRpb25zKCkuYWZ0ZXJTbGlkZUxvYWQpKSB7XG4gICAgICAgICAgZmlyZUNhbGxiYWNrKCdhZnRlclNsaWRlTG9hZCcsIHYpO1xuICAgICAgICB9IC8vbmVlZHMgdG8gYmUgaW5zaWRlIHRoZSBjb25kaXRpb24gdG8gcHJldmVudCBwcm9ibGVtcyB3aXRoIGNvbnRpbnVvdXNWZXJ0aWNhbCBhbmQgc2Nyb2xsSG9yaXpvbnRhbGx5XG4gICAgICAgIC8vYW5kIHRvIHByZXZlbnQgZG91YmxlIHNjcm9sbCByaWdodCBhZnRlciBhIHdpbmRvd3MgcmVzaXplXG5cblxuICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgY2FuU2Nyb2xsOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBwbGF5TWVkaWEodi5kZXN0aW55KTtcbiAgICAgIH0gLy9sZXR0aW5nIHRoZW0gc2xpZGUgYWdhaW5cblxuXG4gICAgICBzZXRTdGF0ZSh7XG4gICAgICAgIHNsaWRlTW92aW5nOiBmYWxzZVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBTbGlkZXMgc2lsZW50bHkgKHdpdGggbm8gYW5pbWF0aW9uKSB0aGUgYWN0aXZlIHNsaWRlciB0byB0aGUgZ2l2ZW4gc2xpZGUuXG4gICAgKiBAcGFyYW0gbm9DYWxsYmFjayB7Ym9vbH0gdHJ1ZSBvciBkZWZpbmVkIC0+IG5vIGNhbGxiYWNrc1xuICAgICovXG5cbiAgICBmdW5jdGlvbiBzaWxlbnRMYW5kc2NhcGVTY3JvbGwoYWN0aXZlU2xpZGUsIG5vQ2FsbGJhY2tzKSB7XG4gICAgICBzZXRTY3JvbGxpbmdTcGVlZCgwLCAnaW50ZXJuYWwnKTtcblxuICAgICAgaWYgKHR5cGVvZiBub0NhbGxiYWNrcyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgLy9wcmV2ZW50aW5nIGZpcmluZyBjYWxsYmFja3MgYWZ0ZXJTbGlkZUxvYWQgZXRjLlxuICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgaXNSZXNpemluZzogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgbGFuZHNjYXBlU2Nyb2xsKGNsb3Nlc3QoYWN0aXZlU2xpZGUsIFNMSURFU19XUkFQUEVSX1NFTCksIGFjdGl2ZVNsaWRlKTtcblxuICAgICAgaWYgKHR5cGVvZiBub0NhbGxiYWNrcyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgIGlzUmVzaXppbmc6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBzZXRTY3JvbGxpbmdTcGVlZChnZXRPcmlnaW5hbHMoKS5zY3JvbGxpbmdTcGVlZCwgJ2ludGVybmFsJyk7XG4gICAgfVxuXG4gICAgdmFyIGdfcHJldkFjdGl2ZVNlY3Rpb25JbmRleCA9IG51bGw7XG4gICAgdmFyIGdfcHJldkFjdGl2ZVNsaWRlSW5kZXggPSBudWxsO1xuICAgIC8qKiBcbiAgICAgKiBVcGRhdGVzIHRoZSBzdGF0ZSBvZiB0aGUgYXBwLlxuICAgICAqL1xuXG4gICAgZnVuY3Rpb24gdXBkYXRlU3RhdGUoKSB7XG4gICAgICBzdGF0ZS5hY3RpdmVTZWN0aW9uID0gbnVsbDtcbiAgICAgIHN0YXRlLnNlY3Rpb25zLm1hcChmdW5jdGlvbiAoc2VjdGlvbikge1xuICAgICAgICB2YXIgaXNBY3RpdmUgPSBoYXNDbGFzcyhzZWN0aW9uLml0ZW0sIEFDVElWRSk7XG4gICAgICAgIHNlY3Rpb24uaXNBY3RpdmUgPSBpc0FjdGl2ZTtcbiAgICAgICAgc2VjdGlvbi5oYXNTY3JvbGwgPSBoYXNDbGFzcyhzZWN0aW9uLml0ZW0sIE9WRVJGTE9XKTtcblxuICAgICAgICBpZiAoaXNBY3RpdmUpIHtcbiAgICAgICAgICBzdGF0ZS5hY3RpdmVTZWN0aW9uID0gc2VjdGlvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzZWN0aW9uLnNsaWRlcy5sZW5ndGgpIHtcbiAgICAgICAgICBzZWN0aW9uLmFjdGl2ZVNsaWRlID0gbnVsbDtcbiAgICAgICAgICBzZWN0aW9uLnNsaWRlcy5tYXAoZnVuY3Rpb24gKHNsaWRlKSB7XG4gICAgICAgICAgICB2YXIgaXNBY3RpdmVTbGlkZSA9IGhhc0NsYXNzKHNsaWRlLml0ZW0sIEFDVElWRSk7XG4gICAgICAgICAgICBzbGlkZS5oYXNTY3JvbGwgPSBoYXNDbGFzcyhzbGlkZS5pdGVtLCBPVkVSRkxPVyk7XG4gICAgICAgICAgICBzbGlkZS5pc0FjdGl2ZSA9IGlzQWN0aXZlU2xpZGU7XG5cbiAgICAgICAgICAgIGlmIChpc0FjdGl2ZVNsaWRlKSB7XG4gICAgICAgICAgICAgIHNlY3Rpb24uYWN0aXZlU2xpZGUgPSBzbGlkZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBzY3JvbGxUb05ld0FjdGl2ZVBhbmVsKCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHVwZGF0ZVN0cnVjdHVyYWxTdGF0ZSgpIHtcbiAgICAgIHZhciBhbGxTZWN0aW9uSXRlbXMgPSAkKGdldE9wdGlvbnMoKS5zZWN0aW9uU2VsZWN0b3IsIGdldENvbnRhaW5lcigpKTtcbiAgICAgIHZhciBzZWN0aW9uc0l0ZW1zID0gZ2V0VmlzaWJsZShhbGxTZWN0aW9uSXRlbXMpO1xuICAgICAgdmFyIGFsbFNlY3Rpb25zID0gQXJyYXkuZnJvbShhbGxTZWN0aW9uSXRlbXMpLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICByZXR1cm4gbmV3IFNlY3Rpb25QYW5lbChpdGVtKTtcbiAgICAgIH0pO1xuICAgICAgdmFyIHNlY3Rpb25zID0gYWxsU2VjdGlvbnMuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIHJldHVybiBpdGVtLmlzVmlzaWJsZTtcbiAgICAgIH0pO1xuICAgICAgdmFyIHNsaWRlcyA9IHNlY3Rpb25zLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBzZWN0aW9uKSB7XG4gICAgICAgIHJldHVybiBhY2MuY29uY2F0KHNlY3Rpb24uc2xpZGVzKTtcbiAgICAgIH0sIFtdKTsgLy8ga2VlcGluZyB0cmFjayBvZiB0aGUgcHJldmlvdXNseSBhY3RpdmUgc2VjdGlvblxuXG4gICAgICBnX3ByZXZBY3RpdmVTZWN0aW9uSW5kZXggPSBnZXRQcmV2QWN0aXZlUGFuZWxJbmRleChzdGF0ZS5hY3RpdmVTZWN0aW9uKTtcbiAgICAgIGdfcHJldkFjdGl2ZVNsaWRlSW5kZXggPSBnZXRQcmV2QWN0aXZlUGFuZWxJbmRleChzdGF0ZS5hY3RpdmVTZWN0aW9uID8gc3RhdGUuYWN0aXZlU2VjdGlvbi5hY3RpdmVTbGlkZSA6IG51bGwpO1xuICAgICAgc3RhdGUubnVtU2VjdGlvbnMgPSBzZWN0aW9uc0l0ZW1zLmxlbmd0aDtcbiAgICAgIHN0YXRlLm51bVNsaWRlcyA9IHNlY3Rpb25zLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBzZWN0aW9uKSB7XG4gICAgICAgIHJldHVybiBhY2MgKyBzZWN0aW9uLnNsaWRlcy5sZW5ndGg7XG4gICAgICB9LCAwKTtcbiAgICAgIHN0YXRlLnNlY3Rpb25zID0gc2VjdGlvbnM7XG4gICAgICBzdGF0ZS5zZWN0aW9uc0luY2x1ZGluZ0hpZGRlbiA9IGFsbFNlY3Rpb25zO1xuICAgICAgc3RhdGUuc2xpZGVzID0gc2xpZGVzO1xuICAgICAgc3RhdGUucGFuZWxzID0gc3RhdGUuc2VjdGlvbnMuY29uY2F0KHN0YXRlLnNsaWRlcyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0UHJldkFjdGl2ZVBhbmVsSW5kZXgoYWN0aXZlUGFuZWwpIHtcbiAgICAgIGlmICghYWN0aXZlUGFuZWwpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciBwcmV2QWN0aXZlUGFuZWxJdGVtID0gYWN0aXZlUGFuZWwgPyBhY3RpdmVQYW5lbC5pdGVtIDogbnVsbDtcbiAgICAgIHZhciBoaWRkZW5QYW5lbHMgPSBhY3RpdmVQYW5lbC5pc1NlY3Rpb24gPyBzdGF0ZS5zZWN0aW9uc0luY2x1ZGluZ0hpZGRlbiA6IHN0YXRlLmFjdGl2ZVNlY3Rpb24uc2xpZGVzSW5jbHVkaW5nSGlkZGVuO1xuXG4gICAgICBpZiAocHJldkFjdGl2ZVBhbmVsSXRlbSkge1xuICAgICAgICB2YXIgcGFuZWwgPSBnZXRQYW5lbEJ5RWxlbWVudChoaWRkZW5QYW5lbHMsIHByZXZBY3RpdmVQYW5lbEl0ZW0pO1xuICAgICAgICByZXR1cm4gcGFuZWwgPyBwYW5lbC5pbmRleCgpIDogbnVsbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdoZW4gY2hhbmdlcyBpbiB0aGUgRE9NIHRha2UgcGxhY2UgdGhlcmUncyBhIGNoYW5nZSBcbiAgICAgKiB0aGUgYWN0aXZlIHNlY3Rpb24gaXMgbm93IGhpZGRlbiBvciByZW1vdmVkLiBcbiAgICAgKiBmdWxsUGFnZS5qcyB3aWxsIHNjcm9sbCB0byB0aGUgY2xvc2VzdCBzZWN0aW9uIG5lYXJieS5cbiAgICAgKi9cblxuXG4gICAgZnVuY3Rpb24gc2Nyb2xsVG9OZXdBY3RpdmVQYW5lbCgpIHtcbiAgICAgIHZhciBhY3RpdmVTZWN0aW9uID0gc3RhdGUuYWN0aXZlU2VjdGlvbjtcbiAgICAgIHZhciBhY3RpdmVTZWN0aW9uSGFzU2xpZGVzID0gc3RhdGUuYWN0aXZlU2VjdGlvbiA/IHN0YXRlLmFjdGl2ZVNlY3Rpb24uc2xpZGVzLmxlbmd0aCA6IGZhbHNlO1xuICAgICAgdmFyIGFjdGl2ZVNsaWRlID0gc3RhdGUuYWN0aXZlU2VjdGlvbiA/IHN0YXRlLmFjdGl2ZVNlY3Rpb24uYWN0aXZlU2xpZGUgOiBudWxsOyAvLyBIaWRkaW5nIC8gcmVtb3ZpbmcgdGhlIGFjdGl2ZSBzZWN0aW9uID9cblxuICAgICAgaWYgKCFhY3RpdmVTZWN0aW9uICYmIHN0YXRlLnNlY3Rpb25zLmxlbmd0aCAmJiAhZ2V0U3RhdGUoKS5pc0JleW9uZEZ1bGxwYWdlICYmIGdfcHJldkFjdGl2ZVNlY3Rpb25JbmRleCkge1xuICAgICAgICB2YXIgbmV3QWN0aXZlU2VjdGlvbiA9IGdldE5ld0FjdGl2ZVBhbmVsKGdfcHJldkFjdGl2ZVNlY3Rpb25JbmRleCwgc3RhdGUuc2VjdGlvbnMpO1xuXG4gICAgICAgIGlmIChuZXdBY3RpdmVTZWN0aW9uKSB7XG4gICAgICAgICAgc3RhdGUuYWN0aXZlU2VjdGlvbiA9IG5ld0FjdGl2ZVNlY3Rpb247XG4gICAgICAgICAgc3RhdGUuYWN0aXZlU2VjdGlvbi5pc0FjdGl2ZSA9IHRydWU7XG4gICAgICAgICAgYWRkQ2xhc3Moc3RhdGUuYWN0aXZlU2VjdGlvbi5pdGVtLCBBQ1RJVkUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHN0YXRlLmFjdGl2ZVNlY3Rpb24pIHtcbiAgICAgICAgICBzaWxlbnRTY3JvbGwoc3RhdGUuYWN0aXZlU2VjdGlvbi5pdGVtLm9mZnNldFRvcCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGFjdGl2ZVNlY3Rpb25IYXNTbGlkZXMgJiYgIWFjdGl2ZVNsaWRlICYmIGdfcHJldkFjdGl2ZVNsaWRlSW5kZXgpIHtcbiAgICAgICAgdmFyIG5ld0FjdGl2ZVNsaWRlID0gZ2V0TmV3QWN0aXZlUGFuZWwoZ19wcmV2QWN0aXZlU2xpZGVJbmRleCwgc3RhdGUuYWN0aXZlU2VjdGlvbi5zbGlkZXMpO1xuXG4gICAgICAgIGlmIChuZXdBY3RpdmVTbGlkZSkge1xuICAgICAgICAgIHN0YXRlLmFjdGl2ZVNlY3Rpb24uYWN0aXZlU2xpZGUgPSBuZXdBY3RpdmVTbGlkZTtcbiAgICAgICAgICBzdGF0ZS5hY3RpdmVTZWN0aW9uLmFjdGl2ZVNsaWRlLmlzQWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgICBhZGRDbGFzcyhzdGF0ZS5hY3RpdmVTZWN0aW9uLmFjdGl2ZVNsaWRlLml0ZW0sIEFDVElWRSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3RhdGUuYWN0aXZlU2VjdGlvbi5hY3RpdmVTbGlkZSkge1xuICAgICAgICAgIHNpbGVudExhbmRzY2FwZVNjcm9sbChzdGF0ZS5hY3RpdmVTZWN0aW9uLmFjdGl2ZVNsaWRlLml0ZW0sICdpbnRlcm5hbCcpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0TmV3QWN0aXZlUGFuZWwocHJldkFjdGl2ZVBhbmVsSW5kZXgsIHNpYmxpbmdzKSB7XG4gICAgICB2YXIgbmV3QWN0aXZlU2VjdGlvbjtcbiAgICAgIHZhciBwcmV2SW5kZXggPSBwcmV2QWN0aXZlUGFuZWxJbmRleCAtIDE7XG4gICAgICB2YXIgbmV4dEluZGV4ID0gcHJldkFjdGl2ZVBhbmVsSW5kZXg7XG5cbiAgICAgIGRvIHtcbiAgICAgICAgbmV3QWN0aXZlU2VjdGlvbiA9IHNpYmxpbmdzW3ByZXZJbmRleF0gfHwgc2libGluZ3NbbmV4dEluZGV4XTtcblxuICAgICAgICBpZiAobmV3QWN0aXZlU2VjdGlvbikge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJldkluZGV4ID0gcHJldkluZGV4IC0gMTtcbiAgICAgICAgbmV4dEluZGV4ID0gbmV4dEluZGV4ICsgMTtcbiAgICAgIH0gd2hpbGUgKHByZXZJbmRleCA+PSAwIHx8IG5leHRJbmRleCA8IHNpYmxpbmdzLmxlbmd0aCk7XG5cbiAgICAgIHJldHVybiBuZXdBY3RpdmVTZWN0aW9uO1xuICAgIH1cbiAgICAvKipcbiAgICAqIFNlY3Rpb24gb2JqZWN0XG4gICAgKi9cblxuXG4gICAgdmFyIFNlY3Rpb25QYW5lbCA9IGZ1bmN0aW9uIFNlY3Rpb25QYW5lbChlbCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgW10ucHVzaC5jYWxsKGFyZ3VtZW50cywgZ2V0T3B0aW9ucygpLnNlY3Rpb25TZWxlY3Rvcik7XG4gICAgICBJdGVtLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB0aGlzLmFsbFNsaWRlc0l0ZW1zID0gJChnZXRPcHRpb25zKCkuc2xpZGVTZWxlY3RvciwgZWwpO1xuICAgICAgdGhpcy5zbGlkZXNJbmNsdWRpbmdIaWRkZW4gPSBBcnJheS5mcm9tKHRoaXMuYWxsU2xpZGVzSXRlbXMpLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICByZXR1cm4gbmV3IFNsaWRlUGFuZWwoaXRlbSwgX3RoaXMpO1xuICAgICAgfSk7XG4gICAgICB0aGlzLnNsaWRlcyA9IHRoaXMuc2xpZGVzSW5jbHVkaW5nSGlkZGVuLmZpbHRlcihmdW5jdGlvbiAoc2xpZGVQYW5lbCkge1xuICAgICAgICByZXR1cm4gc2xpZGVQYW5lbC5pc1Zpc2libGU7XG4gICAgICB9KTtcbiAgICAgIHRoaXMuYWN0aXZlU2xpZGUgPSB0aGlzLnNsaWRlcy5sZW5ndGggPyB0aGlzLnNsaWRlcy5maWx0ZXIoZnVuY3Rpb24gKHNsaWRlKSB7XG4gICAgICAgIHJldHVybiBzbGlkZS5pc0FjdGl2ZTtcbiAgICAgIH0pWzBdIHx8IHRoaXMuc2xpZGVzWzBdIDogbnVsbDtcbiAgICB9O1xuICAgIFNlY3Rpb25QYW5lbC5wcm90b3R5cGUgPSBJdGVtLnByb3RvdHlwZTtcbiAgICBTZWN0aW9uUGFuZWwucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gU2VjdGlvblBhbmVsO1xuICAgIC8qKlxuICAgICogU2xpZGUgb2JqZWN0XG4gICAgKi9cblxuICAgIHZhciBTbGlkZVBhbmVsID0gZnVuY3Rpb24gU2xpZGVQYW5lbChlbCwgc2VjdGlvbikge1xuICAgICAgdGhpcy5wYXJlbnQgPSBzZWN0aW9uO1xuICAgICAgSXRlbS5jYWxsKHRoaXMsIGVsLCBnZXRPcHRpb25zKCkuc2xpZGVTZWxlY3Rvcik7XG4gICAgfTtcblxuICAgIFNsaWRlUGFuZWwucHJvdG90eXBlID0gSXRlbS5wcm90b3R5cGU7XG4gICAgU2xpZGVQYW5lbC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBTZWN0aW9uUGFuZWw7XG5cbiAgICAvKipcbiAgICAqIEFkZHMgaW50ZXJuYWwgY2xhc3NlcyB0byBiZSBhYmxlIHRvIHByb3ZpZGUgY3VzdG9taXphYmxlIHNlbGVjdG9yc1xuICAgICoga2VlcGluZyB0aGUgbGluayB3aXRoIHRoZSBzdHlsZSBzaGVldC5cbiAgICAqL1xuXG4gICAgZnVuY3Rpb24gYWRkSW50ZXJuYWxTZWxlY3RvcnMoKSB7XG4gICAgICBhZGRDbGFzcygkKGdldE9wdGlvbnMoKS5zZWN0aW9uU2VsZWN0b3IsIGdldENvbnRhaW5lcigpKSwgU0VDVElPTik7XG4gICAgICBhZGRDbGFzcygkKGdldE9wdGlvbnMoKS5zbGlkZVNlbGVjdG9yLCBnZXRDb250YWluZXIoKSksIFNMSURFKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b29sdGlwVGV4dEhhbmRsZXIoKSB7XG4gICAgICAvKmpzaGludCB2YWxpZHRoaXM6dHJ1ZSAqL1xuICAgICAgdHJpZ2dlcihwcmV2KHRoaXMpLCAnY2xpY2snKTtcbiAgICB9XG4gICAgLyoqXG4gICAgKiBBY3RpdmF0aW5nIHRoZSB2ZXJ0aWNhbCBuYXZpZ2F0aW9uIGJ1bGxldHMgYWNjb3JkaW5nIHRvIHRoZSBnaXZlbiBzbGlkZSBuYW1lLlxuICAgICovXG5cbiAgICBmdW5jdGlvbiBhY3RpdmF0ZU5hdkRvdHMobmFtZSwgc2VjdGlvbkluZGV4KSB7XG4gICAgICB2YXIgbmF2ID0gJChTRUNUSU9OX05BVl9TRUwpWzBdO1xuXG4gICAgICBpZiAoZ2V0T3B0aW9ucygpLm5hdmlnYXRpb24gJiYgbmF2ICE9IG51bGwgJiYgbmF2LnN0eWxlLmRpc3BsYXkgIT09ICdub25lJykge1xuICAgICAgICByZW1vdmVDbGFzcygkKEFDVElWRV9TRUwsIG5hdiksIEFDVElWRSk7XG5cbiAgICAgICAgaWYgKG5hbWUpIHtcbiAgICAgICAgICBhZGRDbGFzcygkKCdhW2hyZWY9XCIjJyArIG5hbWUgKyAnXCJdJywgbmF2KSwgQUNUSVZFKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhZGRDbGFzcygkKCdhJywgJCgnbGknLCBuYXYpW3NlY3Rpb25JbmRleF0pLCBBQ1RJVkUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICogQ3JlYXRlcyBhIHZlcnRpY2FsIG5hdmlnYXRpb24gYmFyLlxuICAgICovXG5cbiAgICBmdW5jdGlvbiBhZGRWZXJ0aWNhbE5hdmlnYXRpb24oKSB7XG4gICAgICByZW1vdmUoJChTRUNUSU9OX05BVl9TRUwpKTtcbiAgICAgIHZhciBuYXZpZ2F0aW9uID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgbmF2aWdhdGlvbi5zZXRBdHRyaWJ1dGUoJ2lkJywgU0VDVElPTl9OQVYpO1xuICAgICAgdmFyIGRpdlVsID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ3VsJyk7XG4gICAgICBuYXZpZ2F0aW9uLmFwcGVuZENoaWxkKGRpdlVsKTtcbiAgICAgIGFwcGVuZFRvKG5hdmlnYXRpb24sICRib2R5KTtcbiAgICAgIHZhciBuYXYgPSAkKFNFQ1RJT05fTkFWX1NFTClbMF07XG4gICAgICBhZGRDbGFzcyhuYXYsICdmcC0nICsgZ2V0T3B0aW9ucygpLm5hdmlnYXRpb25Qb3NpdGlvbik7XG5cbiAgICAgIGlmIChnZXRPcHRpb25zKCkuc2hvd0FjdGl2ZVRvb2x0aXApIHtcbiAgICAgICAgYWRkQ2xhc3MobmF2LCBTSE9XX0FDVElWRV9UT09MVElQKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGxpID0gJyc7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZ2V0U3RhdGUoKS5zZWN0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgc2VjdGlvbiA9IGdldFN0YXRlKCkuc2VjdGlvbnNbaV07XG4gICAgICAgIHZhciBsaW5rID0gJyc7XG5cbiAgICAgICAgaWYgKGdldE9wdGlvbnMoKS5hbmNob3JzLmxlbmd0aCkge1xuICAgICAgICAgIGxpbmsgPSBzZWN0aW9uLmFuY2hvcjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxpICs9ICc8bGk+PGEgaHJlZj1cIiMnICsgZW5jb2RlVVJJKGxpbmspICsgJ1wiPjxzcGFuIGNsYXNzPVwiZnAtc3Itb25seVwiPicgKyBnZXRCdWxsZXRMaW5rTmFtZShzZWN0aW9uLmluZGV4KCksICdTZWN0aW9uJykgKyAnPC9zcGFuPjxzcGFuPjwvc3Bhbj48L2E+JzsgLy8gT25seSBhZGQgdG9vbHRpcCBpZiBuZWVkZWQgKGRlZmluZWQgYnkgdXNlcilcblxuICAgICAgICB2YXIgdG9vbHRpcCA9IGdldE9wdGlvbnMoKS5uYXZpZ2F0aW9uVG9vbHRpcHNbc2VjdGlvbi5pbmRleCgpXTtcblxuICAgICAgICBpZiAodHlwZW9mIHRvb2x0aXAgIT09ICd1bmRlZmluZWQnICYmIHRvb2x0aXAgIT09ICcnKSB7XG4gICAgICAgICAgbGkgKz0gJzxkaXYgY2xhc3M9XCInICsgU0VDVElPTl9OQVZfVE9PTFRJUCArICcgZnAtJyArIGdldE9wdGlvbnMoKS5uYXZpZ2F0aW9uUG9zaXRpb24gKyAnXCI+JyArIHRvb2x0aXAgKyAnPC9kaXY+JztcbiAgICAgICAgfVxuXG4gICAgICAgIGxpICs9ICc8L2xpPic7XG4gICAgICB9XG5cbiAgICAgICQoJ3VsJywgbmF2KVswXS5pbm5lckhUTUwgPSBsaTsgLy9hY3RpdmF0aW5nIHRoZSBjdXJyZW50IGFjdGl2ZSBzZWN0aW9uXG5cbiAgICAgIHZhciBidWxsZXQgPSAkKCdsaScsICQoU0VDVElPTl9OQVZfU0VMKVswXSlbZ2V0U3RhdGUoKS5hY3RpdmVTZWN0aW9uLmluZGV4KCldO1xuICAgICAgYWRkQ2xhc3MoJCgnYScsIGJ1bGxldCksIEFDVElWRSk7XG4gICAgfSAvL1Njcm9sbHMgdG8gdGhlIHNlY3Rpb24gd2hlbiBjbGlja2luZyB0aGUgbmF2aWdhdGlvbiBidWxsZXRcblxuICAgIGZ1bmN0aW9uIHNlY3Rpb25CdWxsZXRIYW5kbGVyKGUpIHtcbiAgICAgIGlmIChlLnByZXZlbnREZWZhdWx0KSB7XG4gICAgICAgIHByZXZlbnREZWZhdWx0KGUpO1xuICAgICAgfVxuXG4gICAgICBzZXRTdGF0ZSh7XG4gICAgICAgIHNjcm9sbFRyaWdnZXI6ICd2ZXJ0aWNhbE5hdidcbiAgICAgIH0pO1xuICAgICAgLypqc2hpbnQgdmFsaWR0aGlzOnRydWUgKi9cbiAgICAgIC8vIEB0cy1pZ25vcmVcblxuICAgICAgdmFyIGluZGV4QnVsbGV0ID0gaW5kZXgoY2xvc2VzdCh0aGlzLCBTRUNUSU9OX05BVl9TRUwgKyAnIGxpJykpO1xuICAgICAgRXZlbnRFbWl0dGVyLmVtaXQoJ3Njcm9sbFBhZ2UnLCB7XG4gICAgICAgIGRlc3RpbmF0aW9uOiBnZXRTdGF0ZSgpLnNlY3Rpb25zW2luZGV4QnVsbGV0XVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgRlAuc2V0UmVjb3JkSGlzdG9yeSA9IHNldFJlY29yZEhpc3Rvcnk7XG4gICAgLyoqXG4gICAgKiBEZWZpbmVzIHdoZXRlciB0byByZWNvcmQgdGhlIGhpc3RvcnkgZm9yIGVhY2ggaGFzaCBjaGFuZ2UgaW4gdGhlIFVSTC5cbiAgICAqL1xuXG4gICAgZnVuY3Rpb24gc2V0UmVjb3JkSGlzdG9yeSh2YWx1ZSwgdHlwZSkge1xuICAgICAgc2V0VmFyaWFibGVTdGF0ZSgncmVjb3JkSGlzdG9yeScsIHZhbHVlLCB0eXBlKTtcbiAgICB9XG5cbiAgICBGUC5zZXRBdXRvU2Nyb2xsaW5nID0gc2V0QXV0b1Njcm9sbGluZztcbiAgICBGUC50ZXN0LnNldEF1dG9TY3JvbGxpbmcgPSBzZXRBdXRvU2Nyb2xsaW5nO1xuICAgIC8qKlxuICAgICogU2V0cyB0aGUgYXV0b1Njcm9sbCBvcHRpb24uXG4gICAgKiBJdCBjaGFuZ2VzIHRoZSBzY3JvbGwgYmFyIHZpc2liaWxpdHkgYW5kIHRoZSBoaXN0b3J5IG9mIHRoZSBzaXRlIGFzIGEgcmVzdWx0LlxuICAgICovXG5cbiAgICBmdW5jdGlvbiBzZXRBdXRvU2Nyb2xsaW5nKHZhbHVlLCB0eXBlKSB7XG4gICAgICAvL3JlbW92aW5nIHRoZSB0cmFuc2Zvcm1hdGlvblxuICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICBzaWxlbnRTY3JvbGwoMCk7XG4gICAgICB9XG5cbiAgICAgIHNldFZhcmlhYmxlU3RhdGUoJ2F1dG9TY3JvbGxpbmcnLCB2YWx1ZSwgdHlwZSk7XG4gICAgICB2YXIgZWxlbWVudCA9IGdldFN0YXRlKCkuYWN0aXZlU2VjdGlvbi5pdGVtO1xuXG4gICAgICBpZiAoZ2V0T3B0aW9ucygpLmF1dG9TY3JvbGxpbmcgJiYgIWdldE9wdGlvbnMoKS5zY3JvbGxCYXIpIHtcbiAgICAgICAgY3NzKCRodG1sQm9keSwge1xuICAgICAgICAgICdvdmVyZmxvdyc6ICdoaWRkZW4nLFxuICAgICAgICAgICdoZWlnaHQnOiAnMTAwJSdcbiAgICAgICAgfSk7XG4gICAgICAgIHJlbW92ZUNsYXNzKCRib2R5LCAnZnAtc2Nyb2xsYWJsZScpO1xuICAgICAgICBzZXRSZWNvcmRIaXN0b3J5KGdldE9yaWdpbmFscygpLnJlY29yZEhpc3RvcnksICdpbnRlcm5hbCcpOyAvL2ZvciBJRSB0b3VjaCBkZXZpY2VzXG5cbiAgICAgICAgY3NzKGdldENvbnRhaW5lcigpLCB7XG4gICAgICAgICAgJy1tcy10b3VjaC1hY3Rpb24nOiAnbm9uZScsXG4gICAgICAgICAgJ3RvdWNoLWFjdGlvbic6ICdub25lJ1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoZWxlbWVudCAhPSBudWxsKSB7XG4gICAgICAgICAgLy9tb3ZpbmcgdGhlIGNvbnRhaW5lciB1cFxuICAgICAgICAgIHNpbGVudFNjcm9sbChlbGVtZW50Lm9mZnNldFRvcCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNzcygkaHRtbEJvZHksIHtcbiAgICAgICAgICAnb3ZlcmZsb3cnOiAndmlzaWJsZScsXG4gICAgICAgICAgJ2hlaWdodCc6ICdpbml0aWFsJ1xuICAgICAgICB9KTtcbiAgICAgICAgYWRkQ2xhc3MoJGJvZHksICdmcC1zY3JvbGxhYmxlJyk7XG4gICAgICAgIHZhciByZWNvcmRIaXN0b3J5ID0gIWdldE9wdGlvbnMoKS5hdXRvU2Nyb2xsaW5nID8gZmFsc2UgOiBnZXRPcmlnaW5hbHMoKS5yZWNvcmRIaXN0b3J5O1xuICAgICAgICBzZXRSZWNvcmRIaXN0b3J5KHJlY29yZEhpc3RvcnksICdpbnRlcm5hbCcpOyAvL2ZvciBJRSB0b3VjaCBkZXZpY2VzXG5cbiAgICAgICAgY3NzKGdldENvbnRhaW5lcigpLCB7XG4gICAgICAgICAgJy1tcy10b3VjaC1hY3Rpb24nOiAnJyxcbiAgICAgICAgICAndG91Y2gtYWN0aW9uJzogJydcbiAgICAgICAgfSk7IC8vc2Nyb2xsaW5nIHRoZSBwYWdlIHRvIHRoZSBzZWN0aW9uIHdpdGggbm8gYW5pbWF0aW9uXG5cbiAgICAgICAgaWYgKGVsZW1lbnQgIT0gbnVsbCkge1xuICAgICAgICAgIGNzcygkaHRtbEJvZHksIHtcbiAgICAgICAgICAgICdzY3JvbGwtYmVoYXZpb3InOiAndW5zZXQnXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgdmFyIHNjcm9sbFNldHRpbmdzID0gZ2V0U2Nyb2xsU2V0dGluZ3MoZWxlbWVudC5vZmZzZXRUb3ApO1xuICAgICAgICAgIHNjcm9sbFNldHRpbmdzLmVsZW1lbnQuc2Nyb2xsVG8oMCwgc2Nyb2xsU2V0dGluZ3Mub3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBGUC5zZXRGaXRUb1NlY3Rpb24gPSBzZXRGaXRUb1NlY3Rpb247XG4gICAgRlAuZml0VG9TZWN0aW9uID0gZml0VG9TZWN0aW9uO1xuICAgIHZhciBnX2lzQ3NzU25hcHNTdXBwb3J0ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gaXNDc3NTbmFwc1N1cHBvcnRlZCgpO1xuICAgIH0oKTtcbiAgICAvKipcbiAgICAqIFNldHMgZml0VG9TZWN0aW9uXG4gICAgKi9cblxuICAgIGZ1bmN0aW9uIHNldEZpdFRvU2VjdGlvbih2YWx1ZSwgdHlwZSkge1xuICAgICAgdG9nZ2xlQ3NzU25hcHNXaGVuUG9zc2libGUodmFsdWUpO1xuICAgICAgc2V0VmFyaWFibGVTdGF0ZSgnZml0VG9TZWN0aW9uJywgdmFsdWUsIHR5cGUpO1xuICAgIH1cbiAgICAvKipcbiAgICAqIEFkZHMgb3IgcmVtb3ZlcyBDU1Mgc25hcHMgc2Nyb2xsaW5nIGJlaGF2aW91ciBkZXBlbmRpbmcgb24gdGhlIGdpdmVuIHZhbHVlLlxuICAgICovXG5cbiAgICBmdW5jdGlvbiB0b2dnbGVDc3NTbmFwc1doZW5Qb3NzaWJsZSh2YWx1ZSkge1xuICAgICAgaWYgKGdfaXNDc3NTbmFwc1N1cHBvcnRlZCkge1xuICAgICAgICB2YXIgY2FuQWRkU25hcHMgPSBnZXRPcHRpb25zKCkuZml0VG9TZWN0aW9uICYmICghZ2V0T3B0aW9ucygpLmF1dG9TY3JvbGxpbmcgfHwgZ2V0T3B0aW9ucygpLnNjcm9sbEJhcikgJiYgdmFsdWU7XG4gICAgICAgIHZhciB0b2dnbGVGdW5jdGlvbiA9IGNhbkFkZFNuYXBzID8gYWRkQ2xhc3MgOiByZW1vdmVDbGFzcztcbiAgICAgICAgdG9nZ2xlRnVuY3Rpb24oJGh0bWwsIFNOQVBTKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgKiBDaGVja3MgZm9yIENTUyBzY3JvbGwgc25hcHMgc3VwcG9ydC5cbiAgICAqL1xuXG4gICAgZnVuY3Rpb24gaXNDc3NTbmFwc1N1cHBvcnRlZCgpIHtcbiAgICAgIHZhciBzdHlsZSA9IGRvYy5kb2N1bWVudEVsZW1lbnQuc3R5bGU7XG4gICAgICByZXR1cm4gJ3Njcm9sbFNuYXBBbGlnbicgaW4gc3R5bGUgfHwgJ3dlYmtpdFNjcm9sbFNuYXBBbGlnbicgaW4gc3R5bGUgfHwgJ21zU2Nyb2xsU25hcEFsaWduJyBpbiBzdHlsZTtcbiAgICB9XG4gICAgLyoqXG4gICAgKiBGaXRzIHRoZSBzaXRlIHRvIHRoZSBuZWFyZXN0IGFjdGl2ZSBzZWN0aW9uXG4gICAgKi9cblxuXG4gICAgZnVuY3Rpb24gZml0VG9TZWN0aW9uKCkgey8vIC8vY2hlY2tpbmcgZml0VG9TZWN0aW9uIGFnYWluIGluIGNhc2UgaXQgd2FzIHNldCB0byBmYWxzZSBiZWZvcmUgdGhlIHRpbWVvdXQgZGVsYXlcbiAgICAgIC8vIGlmKGNhblNjcm9sbCl7XG4gICAgICAvLyAgICAgLy9hbGxvd3MgdG8gc2Nyb2xsIHRvIGFuIGFjdGl2ZSBzZWN0aW9uIGFuZFxuICAgICAgLy8gICAgIC8vaWYgdGhlIHNlY3Rpb24gaXMgYWxyZWFkeSBhY3RpdmUsIHdlIHByZXZlbnQgZmlyaW5nIGNhbGxiYWNrc1xuICAgICAgLy8gICAgIGlzUmVzaXppbmcgPSB0cnVlO1xuICAgICAgLy8gICAgIHNjcm9sbFBhZ2Uoc3RhdGUuYWN0aXZlU2VjdGlvbik7XG4gICAgICAvLyAgICAgaXNSZXNpemluZyA9IGZhbHNlO1xuICAgICAgLy8gfVxuICAgIH1cblxuICAgIEZQLnNldFJlc3BvbnNpdmUgPSBzZXRSZXNwb25zaXZlO1xuICAgIC8qKlxuICAgICogQ2hlY2tzIGlmIHRoZSBzaXRlIG5lZWRzIHRvIGdldCByZXNwb25zaXZlIGFuZCBkaXNhYmxlcyBhdXRvU2Nyb2xsaW5nIGlmIHNvLlxuICAgICogQSBjbGFzcyBgZnAtcmVzcG9uc2l2ZWAgaXMgYWRkZWQgdG8gdGhlIHBsdWdpbidzIGNvbnRhaW5lciBpbiBjYXNlIHRoZSB1c2VyIHdhbnRzIHRvIHVzZSBpdCBmb3IgaGlzIG93biByZXNwb25zaXZlIENTUy5cbiAgICAqL1xuXG4gICAgZnVuY3Rpb24gcmVzcG9uc2l2ZSgpIHtcbiAgICAgIHZhciB3aWR0aExpbWl0ID0gZ2V0T3B0aW9ucygpLnJlc3BvbnNpdmUgfHwgZ2V0T3B0aW9ucygpLnJlc3BvbnNpdmVXaWR0aDsgLy9iYWNrd2FyZHMgY29tcGF0aWJsaXR5XG5cbiAgICAgIHZhciBoZWlnaHRMaW1pdCA9IGdldE9wdGlvbnMoKS5yZXNwb25zaXZlSGVpZ2h0OyAvL29ubHkgY2FsY3VsYXRpbmcgd2hhdCB3ZSBuZWVkLiBSZW1lbWJlciBpdHMgY2FsbGVkIG9uIHRoZSByZXNpemUgZXZlbnQuXG5cbiAgICAgIHZhciBpc0JyZWFraW5nUG9pbnRXaWR0aCA9IHdpZHRoTGltaXQgJiYgd2luLmlubmVyV2lkdGggPCB3aWR0aExpbWl0O1xuICAgICAgdmFyIGlzQnJlYWtpbmdQb2ludEhlaWdodCA9IGhlaWdodExpbWl0ICYmIHdpbi5pbm5lckhlaWdodCA8IGhlaWdodExpbWl0O1xuXG4gICAgICBpZiAod2lkdGhMaW1pdCAmJiBoZWlnaHRMaW1pdCkge1xuICAgICAgICBzZXRSZXNwb25zaXZlKGlzQnJlYWtpbmdQb2ludFdpZHRoIHx8IGlzQnJlYWtpbmdQb2ludEhlaWdodCk7XG4gICAgICB9IGVsc2UgaWYgKHdpZHRoTGltaXQpIHtcbiAgICAgICAgc2V0UmVzcG9uc2l2ZShpc0JyZWFraW5nUG9pbnRXaWR0aCk7XG4gICAgICB9IGVsc2UgaWYgKGhlaWdodExpbWl0KSB7XG4gICAgICAgIHNldFJlc3BvbnNpdmUoaXNCcmVha2luZ1BvaW50SGVpZ2h0KTtcbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgKiBUdXJucyBmdWxsUGFnZS5qcyB0byBub3JtYWwgc2Nyb2xsaW5nIG1vZGUgd2hlbiB0aGUgdmlld3BvcnQgYHdpZHRoYCBvciBgaGVpZ2h0YFxuICAgICogYXJlIHNtYWxsZXIgdGhhbiB0aGUgc2V0IGxpbWl0IHZhbHVlcy5cbiAgICAqL1xuXG4gICAgZnVuY3Rpb24gc2V0UmVzcG9uc2l2ZShhY3RpdmUpIHtcbiAgICAgIHZhciBpc1Jlc3BvbnNpdmUgPSBpc1Jlc3BvbnNpdmVNb2RlKCk7XG5cbiAgICAgIGlmIChhY3RpdmUpIHtcbiAgICAgICAgaWYgKCFpc1Jlc3BvbnNpdmUpIHtcbiAgICAgICAgICBzZXRBdXRvU2Nyb2xsaW5nKGZhbHNlLCAnaW50ZXJuYWwnKTtcbiAgICAgICAgICBzZXRGaXRUb1NlY3Rpb24oZmFsc2UsICdpbnRlcm5hbCcpO1xuICAgICAgICAgIGhpZGUoJChTRUNUSU9OX05BVl9TRUwpKTtcbiAgICAgICAgICBhZGRDbGFzcygkYm9keSwgUkVTUE9OU0lWRSk7XG5cbiAgICAgICAgICBpZiAoaXNGdW5jdGlvbihnZXRPcHRpb25zKCkuYWZ0ZXJSZXNwb25zaXZlKSkge1xuICAgICAgICAgICAgZ2V0T3B0aW9ucygpLmFmdGVyUmVzcG9uc2l2ZS5jYWxsKGdldENvbnRhaW5lcigpLCBhY3RpdmUpO1xuICAgICAgICAgIH0gLy93aGVuIG9uIHBhZ2UgbG9hZCwgd2Ugd2lsbCByZW1vdmUgc2Nyb2xsb3ZlcmZsb3cgaWYgbmVjZXNzYXJ5XG4gICAgICAgICAgLy8gaWYoZ2V0T3B0aW9ucygpLnNjcm9sbE92ZXJmbG93KXtcbiAgICAgICAgICAvLyAgICAgY3JlYXRlU2Nyb2xsQmFyRm9yQWxsKCk7XG4gICAgICAgICAgLy8gfVxuXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaXNSZXNwb25zaXZlKSB7XG4gICAgICAgIHNldEF1dG9TY3JvbGxpbmcoZ2V0T3JpZ2luYWxzKCkuYXV0b1Njcm9sbGluZywgJ2ludGVybmFsJyk7XG4gICAgICAgIHNldEZpdFRvU2VjdGlvbihnZXRPcmlnaW5hbHMoKS5hdXRvU2Nyb2xsaW5nLCAnaW50ZXJuYWwnKTtcbiAgICAgICAgc2hvdygkKFNFQ1RJT05fTkFWX1NFTCkpO1xuICAgICAgICByZW1vdmVDbGFzcygkYm9keSwgUkVTUE9OU0lWRSk7XG5cbiAgICAgICAgaWYgKGlzRnVuY3Rpb24oZ2V0T3B0aW9ucygpLmFmdGVyUmVzcG9uc2l2ZSkpIHtcbiAgICAgICAgICBnZXRPcHRpb25zKCkuYWZ0ZXJSZXNwb25zaXZlLmNhbGwoZ2V0Q29udGFpbmVyKCksIGFjdGl2ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgKiBEZXRlcm1pbmVzIHdoZXRoZXIgZnVsbHBhZ2UuanMgaXMgaW4gcmVzcG9uc2l2ZSBtb2RlIG9yIG5vdC5cbiAgICAqL1xuXG5cbiAgICBmdW5jdGlvbiBpc1Jlc3BvbnNpdmVNb2RlKCkge1xuICAgICAgcmV0dXJuIGhhc0NsYXNzKCRib2R5LCBSRVNQT05TSVZFKTtcbiAgICB9XG5cbiAgICBFdmVudEVtaXR0ZXIub24oJ2JpbmRFdmVudHMnLCBiaW5kRXZlbnRzJGEpO1xuXG4gICAgZnVuY3Rpb24gYmluZEV2ZW50cyRhKCkge1xuICAgICAgLy9hZnRlciBET00gYW5kIGltYWdlcyBhcmUgbG9hZGVkXG4gICAgICB3aW4uYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGdldE9wdGlvbnMoKS5zY3JvbGxPdmVyZmxvdyAmJiAhZ2V0T3B0aW9ucygpLnNjcm9sbEJhcikge1xuICAgICAgICAgIHNjcm9sbE92ZXJmbG93SGFuZGxlci5tYWtlU2Nyb2xsYWJsZSgpO1xuICAgICAgICAgIHNjcm9sbE92ZXJmbG93SGFuZGxlci5hZnRlclNlY3Rpb25Mb2FkcygpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgaWYgKGdldE9wdGlvbnMoKS5zY3JvbGxPdmVyZmxvdykge1xuICAgICAgICBnZXROb2RlcyhnZXRTdGF0ZSgpLnBhbmVscykuZm9yRWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBzY3JvbGxPdmVyZmxvd0hhbmRsZXIub25QYW5lbFNjcm9sbCk7XG4gICAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignd2hlZWwnLCBzY3JvbGxPdmVyZmxvd0hhbmRsZXIucHJldmVudFNjcm9sbFdoaWxlTW92aW5nKTtcbiAgICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgc2Nyb2xsT3ZlcmZsb3dIYW5kbGVyLnByZXZlbnRTY3JvbGxXaGlsZU1vdmluZyk7XG4gICAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHNjcm9sbE92ZXJmbG93SGFuZGxlci5ibHVyRm9jdXNPbkFmdGVyTG9hZCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBzY3JvbGxPdmVyZmxvd0hhbmRsZXIgPSB7XG4gICAgICBmb2N1c2VkRWxlbTogbnVsbCxcbiAgICAgIHRpbWVCZWZvcmVSZWFjaGluZ0xpbWl0OiBudWxsLFxuICAgICAgdGltZUxhc3RTY3JvbGw6IG51bGwsXG4gICAgICBwcmV2ZW50U2Nyb2xsV2hpbGVNb3Zpbmc6IGZ1bmN0aW9uIHByZXZlbnRTY3JvbGxXaGlsZU1vdmluZyhlKSB7XG4gICAgICAgIGlmICghc3RhdGUuY2FuU2Nyb2xsKSB7XG4gICAgICAgICAgcHJldmVudERlZmF1bHQoZSk7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgYWZ0ZXJTZWN0aW9uTG9hZHM6IGZ1bmN0aW9uIGFmdGVyU2VjdGlvbkxvYWRzKCkge1xuICAgICAgICAvLyBVbmZvY3VzaW5nIHRoZSBzY3JvbGxhYmxlIGVsZW1lbnQgZnJvbSB0aGUgb3JnaW4gc2VjdGlvbi9zbGlkZVxuICAgICAgICBpZiAoZG9jLmFjdGl2ZUVsZW1lbnQgPT09IHRoaXMuZm9jdXNlZEVsZW0pIHtcbiAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgdGhpcy5mb2N1c2VkRWxlbS5ibHVyKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoJChPVkVSRkxPV19TRUwgKyBBQ1RJVkVfU0VMLCBnZXRTdGF0ZSgpLmFjdGl2ZVNlY3Rpb24uaXRlbSlbMF0pIHtcbiAgICAgICAgICB0aGlzLmZvY3VzZWRFbGVtID0gJChPVkVSRkxPV19TRUwsIGdldFN0YXRlKCkuYWN0aXZlU2VjdGlvbi5pdGVtKVswXTtcbiAgICAgICAgICB0aGlzLmZvY3VzZWRFbGVtLmZvY3VzKCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBtYWtlU2Nyb2xsYWJsZTogZnVuY3Rpb24gbWFrZVNjcm9sbGFibGUoKSB7XG4gICAgICAgIGlmIChnZXRPcHRpb25zKCkuc2Nyb2xsT3ZlcmZsb3dNYWNTdHlsZSAmJiAhaXNNYWNEZXZpY2UpIHtcbiAgICAgICAgICBhZGRDbGFzcygkYm9keSwgJ2ZwLXNjcm9sbC1tYWMnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGdldFN0YXRlKCkucGFuZWxzLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgICAgaWYgKGhhc0NsYXNzKGVsLml0ZW0sICdmcC1ub3Njcm9sbCcpIHx8IGhhc0NsYXNzKGVsLml0ZW0sIEFVVE9fSEVJR0hUKSB8fCBoYXNDbGFzcyhlbC5pdGVtLCBBVVRPX0hFSUdIVF9SRVNQT05TSVZFKSAmJiBpc1Jlc3BvbnNpdmVNb2RlKCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIGl0ZW0gPSBzY3JvbGxPdmVyZmxvd0hhbmRsZXIuc2Nyb2xsYWJsZShlbC5pdGVtKTtcbiAgICAgICAgICAgIHZhciBzaG91bGRCZVNjcm9sbGFibGUgPSBzY3JvbGxPdmVyZmxvd0hhbmRsZXIuc2hvdWxkQmVTY3JvbGxhYmxlKGVsLml0ZW0pO1xuXG4gICAgICAgICAgICBpZiAoc2hvdWxkQmVTY3JvbGxhYmxlKSB7XG4gICAgICAgICAgICAgIGFkZENsYXNzKGl0ZW0sIE9WRVJGTE9XKTtcbiAgICAgICAgICAgICAgaXRlbS5zZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JywgJy0xJyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZW1vdmVDbGFzcyhpdGVtLCBPVkVSRkxPVyk7XG4gICAgICAgICAgICAgIGl0ZW0ucmVtb3ZlQXR0cmlidXRlKCd0YWJpbmRleCcpO1xuICAgICAgICAgICAgfSAvLyB1cGRhdGluZyB0aGUgc3RhdGUgbm93IGluIGNhc2UgXG4gICAgICAgICAgICAvLyB0aGlzIGlzIGV4ZWN1dGVkIG9uIHBhZ2UgbG9hZCAoYWZ0ZXIgaW1hZ2VzIGxvYWQpXG5cblxuICAgICAgICAgICAgZWwuaGFzU2Nyb2xsID0gc2hvdWxkQmVTY3JvbGxhYmxlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgc2Nyb2xsYWJsZTogZnVuY3Rpb24gc2Nyb2xsYWJsZShzZWN0aW9uSXRlbSkge1xuICAgICAgICByZXR1cm4gJChTTElERV9BQ1RJVkVfU0VMLCBzZWN0aW9uSXRlbSlbMF0gfHwgc2VjdGlvbkl0ZW07XG4gICAgICB9LFxuICAgICAgaXNTY3JvbGxhYmxlOiBmdW5jdGlvbiBpc1Njcm9sbGFibGUocGFuZWwpIHtcbiAgICAgICAgcmV0dXJuIHBhbmVsLmlzU2VjdGlvbiAmJiBwYW5lbC5hY3RpdmVTbGlkZSA/IHBhbmVsLmFjdGl2ZVNsaWRlLmhhc1Njcm9sbCA6IHBhbmVsLmhhc1Njcm9sbDtcbiAgICAgIH0sXG4gICAgICBzaG91bGRCZVNjcm9sbGFibGU6IGZ1bmN0aW9uIHNob3VsZEJlU2Nyb2xsYWJsZShpdGVtKSB7XG4gICAgICAgIHJldHVybiBpdGVtLnNjcm9sbEhlaWdodCA+IHdpbi5pbm5lckhlaWdodDtcbiAgICAgIH0sXG4gICAgICBpc1Njcm9sbGVkOiBmdW5jdGlvbiBpc1Njcm9sbGVkKGRpcmVjdGlvbiwgZWwpIHtcbiAgICAgICAgaWYgKCFzdGF0ZS5jYW5TY3JvbGwpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWdldE9wdGlvbnMoKS5zY3JvbGxPdmVyZmxvdykge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHNjcm9sbGFibGVJdGVtID0gc2Nyb2xsT3ZlcmZsb3dIYW5kbGVyLnNjcm9sbGFibGUoZWwpO1xuICAgICAgICB2YXIgcG9zaXRpb25ZID0gc2Nyb2xsYWJsZUl0ZW0uc2Nyb2xsVG9wO1xuICAgICAgICB2YXIgaXNUb3BSZWFjaGVkID0gZGlyZWN0aW9uID09PSAndXAnICYmIHBvc2l0aW9uWSA8PSAwO1xuICAgICAgICB2YXIgaXNCb3R0b21SZWFjaGVkID0gZGlyZWN0aW9uID09PSAnZG93bicgJiYgc2Nyb2xsYWJsZUl0ZW0uc2Nyb2xsSGVpZ2h0IDw9IE1hdGguY2VpbChzY3JvbGxhYmxlSXRlbS5vZmZzZXRIZWlnaHQgKyBwb3NpdGlvblkpO1xuICAgICAgICB2YXIgaXNTY3JvbGxlZCA9IGlzVG9wUmVhY2hlZCB8fCBpc0JvdHRvbVJlYWNoZWQ7XG5cbiAgICAgICAgaWYgKCFpc1Njcm9sbGVkKSB7XG4gICAgICAgICAgdGhpcy50aW1lQmVmb3JlUmVhY2hpbmdMaW1pdCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGlzU2Nyb2xsZWQ7XG4gICAgICB9LFxuICAgICAgc2hvdWxkTW92ZVBhZ2U6IGZ1bmN0aW9uIHNob3VsZE1vdmVQYWdlKCkge1xuICAgICAgICB0aGlzLnRpbWVMYXN0U2Nyb2xsID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgICAgIHZhciB0aW1lRGlmZiA9IHRoaXMudGltZUxhc3RTY3JvbGwgLSBzY3JvbGxPdmVyZmxvd0hhbmRsZXIudGltZUJlZm9yZVJlYWNoaW5nTGltaXQ7XG4gICAgICAgIHZhciBpc1VzaW5nVG91Y2ggPSBpc1RvdWNoRGV2aWNlIHx8IGlzVG91Y2g7XG4gICAgICAgIHZhciBpc0dyYWJiaW5nID0gaXNVc2luZ1RvdWNoICYmIHN0YXRlLmlzR3JhYmJpbmc7XG4gICAgICAgIHZhciBpc05vdEZpcnN0VGltZVJlYWNoaW5nTGltaXQgPSBzdGF0ZS5pc1VzaW5nV2hlZWwgJiYgdGltZURpZmYgPiA2MDA7XG4gICAgICAgIHJldHVybiBpc0dyYWJiaW5nICYmIHRpbWVEaWZmID4gNDAwIHx8IGlzTm90Rmlyc3RUaW1lUmVhY2hpbmdMaW1pdDtcbiAgICAgIH0sXG4gICAgICBvblBhbmVsU2Nyb2xsOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBwcmV2UG9zaXRpb24gPSAwO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICB2YXIgY3VycmVudFBvc2l0aW9uID0gZS50YXJnZXQuc2Nyb2xsVG9wO1xuICAgICAgICAgIHZhciBkaXJlY3Rpb24gPSBzdGF0ZS50b3VjaERpcmVjdGlvbiAhPT0gJ25vbmUnID8gc3RhdGUudG91Y2hEaXJlY3Rpb24gOiBwcmV2UG9zaXRpb24gPCBjdXJyZW50UG9zaXRpb24gPyAnZG93bicgOiAndXAnO1xuICAgICAgICAgIHByZXZQb3NpdGlvbiA9IGN1cnJlbnRQb3NpdGlvbjtcblxuICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKGdldE9wdGlvbnMoKS5vblNjcm9sbE92ZXJmbG93KSkge1xuICAgICAgICAgICAgZmlyZUNhbGxiYWNrKCdvblNjcm9sbE92ZXJmbG93Jywge1xuICAgICAgICAgICAgICBwb3NpdGlvbjogY3VycmVudFBvc2l0aW9uLFxuICAgICAgICAgICAgICBkaXJlY3Rpb246IGRpcmVjdGlvblxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGhhc0NsYXNzKGUudGFyZ2V0LCBPVkVSRkxPVykgJiYgc3RhdGUuY2FuU2Nyb2xsKSB7XG4gICAgICAgICAgICBpZiAoc2Nyb2xsT3ZlcmZsb3dIYW5kbGVyLmlzU2Nyb2xsZWQoZGlyZWN0aW9uLCBlLnRhcmdldCkgJiYgc2Nyb2xsT3ZlcmZsb3dIYW5kbGVyLnNob3VsZE1vdmVQYWdlKCkpIHtcbiAgICAgICAgICAgICAgRXZlbnRFbWl0dGVyLmVtaXQoJ29uU2Nyb2xsT3ZlcmZsb3dTY3JvbGxlZCcsIHtcbiAgICAgICAgICAgICAgICBkaXJlY3Rpb246IGRpcmVjdGlvblxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9KClcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gYWRkVGFibGVDbGFzcyhlbGVtZW50KSB7XG4gICAgICBpZiAoIWdldE9wdGlvbnMoKS52ZXJ0aWNhbENlbnRlcmVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKCFzY3JvbGxPdmVyZmxvd0hhbmRsZXIuaXNTY3JvbGxhYmxlKGVsZW1lbnQpKSB7XG4gICAgICAgIC8vSW4gY2FzZSB3ZSBhcmUgc3R5bGluZyBmb3IgdGhlIDJuZCB0aW1lIGFzIGluIHdpdGggcmVwb25zaXZlU2xpZGVzXG4gICAgICAgIGlmICghaGFzQ2xhc3MoZWxlbWVudC5pdGVtLCBUQUJMRSkpIHtcbiAgICAgICAgICBhZGRDbGFzcyhlbGVtZW50Lml0ZW0sIFRBQkxFKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICogU3R5bGVzIHRoZSBob3Jpem9udGFsIHNsaWRlcyBmb3IgYSBzZWN0aW9uLlxuICAgICovXG5cbiAgICBmdW5jdGlvbiBzdHlsZVNsaWRlcyhzZWN0aW9uKSB7XG4gICAgICB2YXIgbnVtU2xpZGVzID0gc2VjdGlvbi5zbGlkZXMubGVuZ3RoO1xuICAgICAgdmFyIHNsaWRlc0VsZW1zID0gc2VjdGlvbi5hbGxTbGlkZXNJdGVtcztcbiAgICAgIHZhciBzbGlkZXMgPSBzZWN0aW9uLnNsaWRlcztcbiAgICAgIHZhciBzbGlkZXJXaWR0aCA9IG51bVNsaWRlcyAqIDEwMDtcbiAgICAgIHZhciBzbGlkZVdpZHRoID0gMTAwIC8gbnVtU2xpZGVzO1xuXG4gICAgICBpZiAoISQoU0xJREVTX1dSQVBQRVJfU0VMLCBzZWN0aW9uLml0ZW0pWzBdKSB7XG4gICAgICAgIHZhciBzbGlkZXNXcmFwcGVyID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBzbGlkZXNXcmFwcGVyLmNsYXNzTmFtZSA9IFNMSURFU19XUkFQUEVSOyAvL2ZwLXNsaWRlc1xuXG4gICAgICAgIHdyYXBBbGwoc2xpZGVzRWxlbXMsIHNsaWRlc1dyYXBwZXIpO1xuICAgICAgICB2YXIgc2xpZGVzQ29udGFpbmVyID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBzbGlkZXNDb250YWluZXIuY2xhc3NOYW1lID0gU0xJREVTX0NPTlRBSU5FUjsgLy9mcC1zbGlkZXNDb250YWluZXJcblxuICAgICAgICB3cmFwQWxsKHNsaWRlc0VsZW1zLCBzbGlkZXNDb250YWluZXIpO1xuICAgICAgfVxuXG4gICAgICBjc3MoJChTTElERVNfQ09OVEFJTkVSX1NFTCwgc2VjdGlvbi5pdGVtKSwge1xuICAgICAgICAnd2lkdGgnOiBzbGlkZXJXaWR0aCArICclJ1xuICAgICAgfSk7XG5cbiAgICAgIGlmIChudW1TbGlkZXMgPiAxKSB7XG4gICAgICAgIGlmIChnZXRPcHRpb25zKCkuY29udHJvbEFycm93cykge1xuICAgICAgICAgIGNyZWF0ZVNsaWRlQXJyb3dzKHNlY3Rpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGdldE9wdGlvbnMoKS5zbGlkZXNOYXZpZ2F0aW9uKSB7XG4gICAgICAgICAgYWRkU2xpZGVzTmF2aWdhdGlvbihzZWN0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzbGlkZXMuZm9yRWFjaChmdW5jdGlvbiAoc2xpZGUpIHtcbiAgICAgICAgY3NzKHNsaWRlLml0ZW0sIHtcbiAgICAgICAgICAnd2lkdGgnOiBzbGlkZVdpZHRoICsgJyUnXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChnZXRPcHRpb25zKCkudmVydGljYWxDZW50ZXJlZCkge1xuICAgICAgICAgIGFkZFRhYmxlQ2xhc3Moc2xpZGUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHZhciBzdGFydGluZ1NsaWRlID0gc2VjdGlvbi5hY3RpdmVTbGlkZSB8fCBudWxsOyAvL2lmIHRoZSBzbGlkZSB3b24ndCBiZSBhbiBzdGFydGluZyBwb2ludCwgdGhlIGRlZmF1bHQgd2lsbCBiZSB0aGUgZmlyc3Qgb25lXG4gICAgICAvL3RoZSBhY3RpdmUgc2VjdGlvbiBpc24ndCB0aGUgZmlyc3Qgb25lPyBJcyBub3QgdGhlIGZpcnN0IHNsaWRlIG9mIHRoZSBmaXJzdCBzZWN0aW9uPyBUaGVuIHdlIGxvYWQgdGhhdCBzZWN0aW9uL3NsaWRlIGJ5IGRlZmF1bHQuXG5cbiAgICAgIGlmIChzdGFydGluZ1NsaWRlICE9IG51bGwgJiYgc3RhdGUuYWN0aXZlU2VjdGlvbiAmJiAoc3RhdGUuYWN0aXZlU2VjdGlvbi5pbmRleCgpICE9PSAwIHx8IHN0YXRlLmFjdGl2ZVNlY3Rpb24uaW5kZXgoKSA9PT0gMCAmJiBzdGFydGluZ1NsaWRlLmluZGV4KCkgIT09IDApKSB7XG4gICAgICAgIHNpbGVudExhbmRzY2FwZVNjcm9sbChzdGFydGluZ1NsaWRlLml0ZW0sICdpbnRlcm5hbCcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWRkQ2xhc3Moc2xpZGVzRWxlbXNbMF0sIEFDVElWRSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHN0YXJ0aW5nU2VjdGlvbiA9IG51bGw7XG4gICAgRlAuZ2V0QWN0aXZlU2VjdGlvbiA9IGdldEFjdGl2ZVNlY3Rpb247XG4gICAgZnVuY3Rpb24gZ2V0U3RhcnRpbmdTZWN0aW9uKCkge1xuICAgICAgcmV0dXJuIHN0YXJ0aW5nU2VjdGlvbjtcbiAgICB9XG4gICAgLyoqXG4gICAgKiBTdHlsaW5nIHZlcnRpY2FsIHNlY3Rpb25zXG4gICAgKi9cblxuICAgIGZ1bmN0aW9uIHN0eWxlU2VjdGlvbihzZWN0aW9uKSB7XG4gICAgICB2YXIgc2VjdGlvbkVsZW0gPSBzZWN0aW9uLml0ZW07XG4gICAgICB2YXIgaGFzU2xpZGVzID0gc2VjdGlvbi5hbGxTbGlkZXNJdGVtcy5sZW5ndGg7XG4gICAgICB2YXIgaW5kZXggPSBzZWN0aW9uLmluZGV4KCk7IC8vaWYgbm8gYWN0aXZlIHNlY3Rpb24gaXMgZGVmaW5lZCwgdGhlIDFzdCBvbmUgd2lsbCBiZSB0aGUgZGVmYXVsdCBvbmVcblxuICAgICAgaWYgKCFnZXRTdGF0ZSgpLmFjdGl2ZVNlY3Rpb24gJiYgc2VjdGlvbi5pc1Zpc2libGUpIHtcbiAgICAgICAgYWRkQ2xhc3Moc2VjdGlvbkVsZW0sIEFDVElWRSk7XG4gICAgICAgIHVwZGF0ZVN0YXRlKCk7XG4gICAgICB9XG5cbiAgICAgIHN0YXJ0aW5nU2VjdGlvbiA9IGdldFN0YXRlKCkuYWN0aXZlU2VjdGlvbi5pdGVtO1xuXG4gICAgICBpZiAoZ2V0T3B0aW9ucygpLnBhZGRpbmdUb3ApIHtcbiAgICAgICAgY3NzKHNlY3Rpb25FbGVtLCB7XG4gICAgICAgICAgJ3BhZGRpbmctdG9wJzogZ2V0T3B0aW9ucygpLnBhZGRpbmdUb3BcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChnZXRPcHRpb25zKCkucGFkZGluZ0JvdHRvbSkge1xuICAgICAgICBjc3Moc2VjdGlvbkVsZW0sIHtcbiAgICAgICAgICAncGFkZGluZy1ib3R0b20nOiBnZXRPcHRpb25zKCkucGFkZGluZ0JvdHRvbVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBnZXRPcHRpb25zKCkuc2VjdGlvbnNDb2xvcltpbmRleF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNzcyhzZWN0aW9uRWxlbSwge1xuICAgICAgICAgICdiYWNrZ3JvdW5kLWNvbG9yJzogZ2V0T3B0aW9ucygpLnNlY3Rpb25zQ29sb3JbaW5kZXhdXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGdldE9wdGlvbnMoKS5hbmNob3JzW2luZGV4XSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgc2VjdGlvbkVsZW0uc2V0QXR0cmlidXRlKCdkYXRhLWFuY2hvcicsIHNlY3Rpb24uYW5jaG9yKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFoYXNTbGlkZXMpIHtcbiAgICAgICAgYWRkVGFibGVDbGFzcyhzZWN0aW9uKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgKiBHZXRzIHRoZSBhY3RpdmUgc2VjdGlvbi5cbiAgICAqL1xuXG4gICAgZnVuY3Rpb24gZ2V0QWN0aXZlU2VjdGlvbigpIHtcbiAgICAgIHJldHVybiBnZXRTdGF0ZSgpLmFjdGl2ZVNlY3Rpb247XG4gICAgfVxuXG4gICAgdmFyIGdfd3JhcHBlck9ic2VydmVyO1xuICAgIHZhciBnX3dyYXBwZXJPYnNlcnZlQ29uZmlnID0ge1xuICAgICAgYXR0cmlidXRlczogZmFsc2UsXG4gICAgICBzdWJ0cmVlOiB0cnVlLFxuICAgICAgY2hpbGRMaXN0OiB0cnVlLFxuICAgICAgY2hhcmFjdGVyRGF0YTogdHJ1ZVxuICAgIH07XG4gICAgRXZlbnRFbWl0dGVyLm9uKCdiaW5kRXZlbnRzJywgYmluZEV2ZW50cyQ5KTtcbiAgICBGUC5yZW5kZXIgPSBvbkNvbnRlbnRDaGFuZ2U7XG5cbiAgICBmdW5jdGlvbiBiaW5kRXZlbnRzJDkoKSB7XG4gICAgICBpZiAoZ2V0T3B0aW9ucygpLm9ic2VydmVyICYmIFwiTXV0YXRpb25PYnNlcnZlclwiIGluIHdpbmRvdyAmJiAkKFdSQVBQRVJfU0VMKVswXSkge1xuICAgICAgICBnX3dyYXBwZXJPYnNlcnZlciA9IGNyZWF0ZU9ic2VydmVyKCQoV1JBUFBFUl9TRUwpWzBdLCBvbkNvbnRlbnRDaGFuZ2UsIGdfd3JhcHBlck9ic2VydmVDb25maWcpO1xuICAgICAgfVxuXG4gICAgICBFdmVudEVtaXR0ZXIub24oJ2NvbnRlbnRDaGFuZ2VkJywgb25Db250ZW50Q2hhbmdlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIE11dGF0aW9uIG9ic2VydmVyLlxuICAgICAqL1xuXG5cbiAgICBmdW5jdGlvbiBjcmVhdGVPYnNlcnZlcih0YXJnZXQsIGNhbGxiYWNrLCBjb25maWcpIHtcbiAgICAgIHZhciBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKGNhbGxiYWNrKTtcbiAgICAgIG9ic2VydmVyLm9ic2VydmUodGFyZ2V0LCBjb25maWcpO1xuICAgICAgcmV0dXJuIG9ic2VydmVyO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRpZFNsaWRlc0NoYW5nZSgpIHtcbiAgICAgIHJldHVybiBnZXRWaXNpYmxlKCQoZ2V0T3B0aW9ucygpLnNsaWRlU2VsZWN0b3IsIGdldENvbnRhaW5lcigpKSkubGVuZ3RoICE9PSBnZXRTdGF0ZSgpLm51bVNsaWRlcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkaWRTZWN0aW9uc0NoYW5nZSgpIHtcbiAgICAgIHJldHVybiBnZXRWaXNpYmxlKCQoZ2V0T3B0aW9ucygpLnNlY3Rpb25TZWxlY3RvciwgZ2V0Q29udGFpbmVyKCkpKS5sZW5ndGggIT09IGdldFN0YXRlKCkubnVtU2VjdGlvbnM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGlkU2VjdGlvbnNPclNsaWRlc0NoYW5nZSgpIHtcbiAgICAgIHJldHVybiBkaWRTbGlkZXNDaGFuZ2UoKSB8fCBkaWRTZWN0aW9uc0NoYW5nZSgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBMaXN0ZW4gdG8gY2hhbmdlcyBvbiBzZWN0aW9ucyBhbmQgZmlyZXMgcmVCdWlsZFxuICAgICAqIHdoZW4gdGhvc2UgY2hhbmdlcyBhZmZlY3QgdGhlIHNlY3Rpb24gaGVpZ2h0LlxuICAgICAqL1xuXG5cbiAgICBmdW5jdGlvbiBvbkNvbnRlbnRDaGFuZ2UobXV0YXRpb25zKSB7XG4gICAgICB2YXIgX2RpZFNsaWRlc0NoYW5nZSA9IGRpZFNsaWRlc0NoYW5nZSgpO1xuXG4gICAgICBpZiAoZGlkU2VjdGlvbnNPclNsaWRlc0NoYW5nZSgpICYmICFzdGF0ZS5pc0RvaW5nQ29udGlub3VzVmVydGljYWwpIHtcbiAgICAgICAgaWYgKGdldE9wdGlvbnMoKS5vYnNlcnZlciAmJiBnX3dyYXBwZXJPYnNlcnZlcikge1xuICAgICAgICAgIC8vIFRlbXBvcmFsbHkgZGlzYWJsaW5nIHRoZSBvYnNlcnZlciB3aGlsZSBcbiAgICAgICAgICAvLyB3ZSBtb2RpZHkgdGhlIERPTSBhZ2FpblxuICAgICAgICAgIGdfd3JhcHBlck9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHVwZGF0ZVN0cnVjdHVyYWxTdGF0ZSgpO1xuICAgICAgICB1cGRhdGVTdGF0ZSgpOyAvLyBSZW1vdmluZyBuYXZzIGFuZCBhbmNob3JzIG9wdGlvbnNcblxuICAgICAgICBnZXRPcHRpb25zKCkuYW5jaG9ycyA9IFtdO1xuICAgICAgICByZW1vdmUoJChTRUNUSU9OX05BVl9TRUwpKTtcbiAgICAgICAgYWRkSW50ZXJuYWxTZWxlY3RvcnMoKTtcbiAgICAgICAgc2V0T3B0aW9uc0Zyb21ET00oKTtcblxuICAgICAgICBpZiAoZ2V0T3B0aW9ucygpLm5hdmlnYXRpb24pIHtcbiAgICAgICAgICBhZGRWZXJ0aWNhbE5hdmlnYXRpb24oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfZGlkU2xpZGVzQ2hhbmdlKSB7XG4gICAgICAgICAgcmVtb3ZlKCQoU0xJREVTX05BVl9TRUwpKTtcbiAgICAgICAgICByZW1vdmUoJChTTElERVNfQVJST1dfU0VMKSk7XG4gICAgICAgIH1cblxuICAgICAgICBnZXRTdGF0ZSgpLnNlY3Rpb25zLmZvckVhY2goZnVuY3Rpb24gKHNlY3Rpb24pIHtcbiAgICAgICAgICBpZiAoc2VjdGlvbi5zbGlkZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoX2RpZFNsaWRlc0NoYW5nZSkge1xuICAgICAgICAgICAgICBzdHlsZVNsaWRlcyhzZWN0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3R5bGVTZWN0aW9uKHNlY3Rpb24pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChnZXRPcHRpb25zKCkub2JzZXJ2ZXIgJiYgZ193cmFwcGVyT2JzZXJ2ZXIgJiYgJChXUkFQUEVSX1NFTClbMF0pIHtcbiAgICAgICAgZ193cmFwcGVyT2JzZXJ2ZXIub2JzZXJ2ZSgkKFdSQVBQRVJfU0VMKVswXSwgZ193cmFwcGVyT2JzZXJ2ZUNvbmZpZyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHN1cHBvcnRzUGFzc2l2ZUV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vY2hla3MgZm9yIHBhc3NpdmUgZXZlbnQgc3VwcG9ydFxuICAgICAgdmFyIGdfc3VwcG9ydHNQYXNzaXZlID0gZmFsc2U7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBvcHRzID0gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAncGFzc2l2ZScsIHtcbiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgIGdfc3VwcG9ydHNQYXNzaXZlID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB3aW5kb3dBZGRFdmVudChcInRlc3RQYXNzaXZlXCIsIG51bGwsIG9wdHMpO1xuICAgICAgICB3aW5kb3dSZW1vdmVFdmVudChcInRlc3RQYXNzaXZlXCIsIG51bGwsIG9wdHMpO1xuICAgICAgfSBjYXRjaCAoZSkge31cblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGdfc3VwcG9ydHNQYXNzaXZlO1xuICAgICAgfTtcbiAgICB9KCk7XG5cbiAgICBmdW5jdGlvbiBnZXRQYXNzaXZlT3B0aW9uc0lmUG9zc2libGUoKSB7XG4gICAgICByZXR1cm4gc3VwcG9ydHNQYXNzaXZlRXZlbnRzKCkgPyB7XG4gICAgICAgIHBhc3NpdmU6IGZhbHNlXG4gICAgICB9IDogZmFsc2U7XG4gICAgfVxuXG4gICAgbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgLyoqXG4gICAgICogVHJpZ2dlcnMgdGhlIGNhbGxiYWNrIG9uY2UgcGVyIHNjcm9sbCB3aGVlbCBhY3Rpb24uXG4gICAgICogQmFzZWQgb24gc2Nyb2xsaW5nIHNwZWVkIGRlbGF5LlxuICAgICAqL1xuXG4gICAgdmFyIG9uY2VQZXJTY3JvbGwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgY2FuVHJpZ2dlckV2ZW50ID0gdHJ1ZTtcbiAgICAgIHZhciBwcmV2V2hlZWxUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgICB2YXIgcmVzdWx0O1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChzY3JvbGxUcmlnZ2VyLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgY3VycmVudFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICAgICAgdmFyIHRpbWVUaHJlc2hvbGQgPSBzY3JvbGxUcmlnZ2VyID09PSAnd2hlZWwnID8gZ2V0T3B0aW9ucygpLnNjcm9sbGluZ1NwZWVkIDogMTAwO1xuICAgICAgICBjYW5UcmlnZ2VyRXZlbnQgPSBjdXJyZW50VGltZSAtIHByZXZXaGVlbFRpbWUgPj0gdGltZVRocmVzaG9sZDtcblxuICAgICAgICBpZiAoY2FuVHJpZ2dlckV2ZW50KSB7XG4gICAgICAgICAgcmVzdWx0ID0gY2FsbGJhY2soKTtcbiAgICAgICAgICBwcmV2V2hlZWxUaW1lID0gY3VycmVudFRpbWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHlwZW9mIHJlc3VsdCAhPT0gJ3VuZGVmaW5lZCcgPyByZXN1bHQgOiB0cnVlO1xuICAgICAgfTtcbiAgICB9KCk7XG5cbiAgICB2YXIgd2hlZWxEYXRhSGFuZGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfcHJldlRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcblxuICAgICAgdmFyIF9zY3JvbGxpbmdzID0gW107XG4gICAgICB2YXIgaXNTY3JvbGxpbmdWZXJ0aWNhbGx5O1xuICAgICAgdmFyIGRpcmVjdGlvbjtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJlZ2lzdGVyRXZlbnQ6IGZ1bmN0aW9uIHJlZ2lzdGVyRXZlbnQoZSkge1xuICAgICAgICAgIGUgPSBlIHx8IHdpbi5ldmVudDtcbiAgICAgICAgICB2YXIgdmFsdWUgPSBlLndoZWVsRGVsdGEgfHwgLWUuZGVsdGFZIHx8IC1lLmRldGFpbDtcbiAgICAgICAgICB2YXIgZGVsdGEgPSBNYXRoLm1heCgtMSwgTWF0aC5taW4oMSwgdmFsdWUpKTtcbiAgICAgICAgICB2YXIgaG9yaXpvbnRhbERldGVjdGlvbiA9IHR5cGVvZiBlLndoZWVsRGVsdGFYICE9PSAndW5kZWZpbmVkJyB8fCB0eXBlb2YgZS5kZWx0YVggIT09ICd1bmRlZmluZWQnO1xuICAgICAgICAgIGlzU2Nyb2xsaW5nVmVydGljYWxseSA9IE1hdGguYWJzKGUud2hlZWxEZWx0YVgpIDwgTWF0aC5hYnMoZS53aGVlbERlbHRhKSB8fCBNYXRoLmFicyhlLmRlbHRhWCkgPCBNYXRoLmFicyhlLmRlbHRhWSkgfHwgIWhvcml6b250YWxEZXRlY3Rpb247XG4gICAgICAgICAgdmFyIGN1clRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICAgICAgICBkaXJlY3Rpb24gPSBkZWx0YSA8IDAgPyAnZG93bicgOiAndXAnOyAvL0xpbWl0aW5nIHRoZSBhcnJheSB0byAxNTAgKGxldHMgbm90IHdhc3RlIG1lbW9yeSEpXG5cbiAgICAgICAgICBpZiAoX3Njcm9sbGluZ3MubGVuZ3RoID4gMTQ5KSB7XG4gICAgICAgICAgICBfc2Nyb2xsaW5ncy5zaGlmdCgpO1xuICAgICAgICAgIH0gLy9rZWVwaW5nIHJlY29yZCBvZiB0aGUgcHJldmlvdXMgc2Nyb2xsaW5nc1xuXG5cbiAgICAgICAgICBfc2Nyb2xsaW5ncy5wdXNoKE1hdGguYWJzKHZhbHVlKSk7IC8vdGltZSBkaWZmZXJlbmNlIGJldHdlZW4gdGhlIGxhc3Qgc2Nyb2xsIGFuZCB0aGUgY3VycmVudCBvbmVcblxuXG4gICAgICAgICAgdmFyIHRpbWVEaWZmID0gY3VyVGltZSAtIF9wcmV2VGltZTtcbiAgICAgICAgICBfcHJldlRpbWUgPSBjdXJUaW1lOyAvL2hhdmVuJ3QgdGhleSBzY3JvbGxlZCBpbiBhIHdoaWxlP1xuICAgICAgICAgIC8vKGVub3VnaCB0byBiZSBjb25zaWRlciBhIGRpZmZlcmVudCBzY3JvbGxpbmcgYWN0aW9uIHRvIHNjcm9sbCBhbm90aGVyIHNlY3Rpb24pXG5cbiAgICAgICAgICBpZiAodGltZURpZmYgPiAyMDApIHtcbiAgICAgICAgICAgIC8vZW1wdHlpbmcgdGhlIGFycmF5LCB3ZSBkb250IGNhcmUgYWJvdXQgb2xkIHNjcm9sbGluZ3MgZm9yIG91ciBhdmVyYWdlc1xuICAgICAgICAgICAgX3Njcm9sbGluZ3MgPSBbXTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGlzQWNjZWxlcmF0aW5nOiBmdW5jdGlvbiBpc0FjY2VsZXJhdGluZygpIHtcbiAgICAgICAgICB2YXIgYXZlcmFnZUVuZCA9IGdldEF2ZXJhZ2UoX3Njcm9sbGluZ3MsIDEwKTtcbiAgICAgICAgICB2YXIgYXZlcmFnZU1pZGRsZSA9IGdldEF2ZXJhZ2UoX3Njcm9sbGluZ3MsIDcwKTtcbiAgICAgICAgICB2YXIgaXNBY2NlbGVyYXRpbmcgPSBhdmVyYWdlRW5kID49IGF2ZXJhZ2VNaWRkbGU7XG4gICAgICAgICAgcmV0dXJuIF9zY3JvbGxpbmdzLmxlbmd0aCA/IGlzQWNjZWxlcmF0aW5nICYmIGlzU2Nyb2xsaW5nVmVydGljYWxseSA6IGZhbHNlO1xuICAgICAgICB9LFxuICAgICAgICBnZXREaXJlY3Rpb246IGZ1bmN0aW9uIGdldERpcmVjdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gZGlyZWN0aW9uO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0oKTtcblxuICAgIGZ1bmN0aW9uIHNjcm9sbEJleW9uZEZ1bGxQYWdlKCkge1xuICAgICAgdmFyIGR0b3AgPSBnZXREZXN0aW5hdGlvbk9mZnNldCgpO1xuICAgICAgdmFyIHNjcm9sbFNldHRpbmdzID0gZ2V0U2Nyb2xsU2V0dGluZ3MoZHRvcCk7XG4gICAgICBGUC50ZXN0LnRvcCA9IC1kdG9wICsgJ3B4JztcbiAgICAgIGNzcyhkb2MuYm9keSwge1xuICAgICAgICAnc2Nyb2xsLXNuYXAtdHlwZSc6ICdub25lJ1xuICAgICAgfSk7XG4gICAgICBjc3MoJGh0bWxCb2R5LCB7XG4gICAgICAgICdzY3JvbGwtYmVoYXZpb3InOiAndW5zZXQnXG4gICAgICB9KTtcbiAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgY2FuU2Nyb2xsOiBmYWxzZVxuICAgICAgfSk7XG4gICAgICBzY3JvbGxUbyhzY3JvbGxTZXR0aW5ncy5lbGVtZW50LCBzY3JvbGxTZXR0aW5ncy5vcHRpb25zLCBnZXRPcHRpb25zKCkuc2Nyb2xsaW5nU3BlZWQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgICAgaXNCZXlvbmRGdWxscGFnZTogdHJ1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIGNhblNjcm9sbDogdHJ1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9LCAzMCk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gb25LZXlEb3duKCkge1xuICAgICAgaWYgKCFpc0Z1bGxQYWdlQWJvdmUoKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzY3JvbGxVcFRvRnVsbHBhZ2UoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gc2Nyb2xsVXBUb0Z1bGxwYWdlKCkge1xuICAgICAgdmFyIHNjcm9sbFNldHRpbmdzID0gZ2V0U2Nyb2xsU2V0dGluZ3MoZ2V0TGFzdChnZXRTdGF0ZSgpLnNlY3Rpb25zKS5pdGVtLm9mZnNldFRvcCk7XG4gICAgICBzZXRTdGF0ZSh7XG4gICAgICAgIGNhblNjcm9sbDogZmFsc2VcbiAgICAgIH0pO1xuICAgICAgc2Nyb2xsVG8oc2Nyb2xsU2V0dGluZ3MuZWxlbWVudCwgc2Nyb2xsU2V0dGluZ3Mub3B0aW9ucywgZ2V0T3B0aW9ucygpLnNjcm9sbGluZ1NwZWVkLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICBjYW5TY3JvbGw6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICBpc0JleW9uZEZ1bGxwYWdlOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgIGlzQWJvdXRUb1Njcm9sbFRvRnVsbFBhZ2U6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0RGVzdGluYXRpb25PZmZzZXQoKSB7XG4gICAgICBpZiAoIWdldE9wdGlvbnMoKS5jc3MzKSB7XG4gICAgICAgIHJldHVybiBnZXRMYXN0KGdldFN0YXRlKCkuc2VjdGlvbnMpLml0ZW0ub2Zmc2V0VG9wICsgZ2V0TGFzdChnZXRTdGF0ZSgpLnNlY3Rpb25zKS5pdGVtLm9mZnNldEhlaWdodDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGdldFNjcm9sbFRvcChnZXRPcHRpb25zKCkpICsgZ2V0V2luZG93SGVpZ2h0KCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYmV5b25kRnVsbFBhZ2VIYW5kbGVyKGNvbnRhaW5lciwgZSkge1xuICAgICAgbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgICB2YXIgcGF1c2VTY3JvbGwgPSBnZXRTdGF0ZSgpLmlzQmV5b25kRnVsbHBhZ2UgJiYgY29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmJvdHRvbSA+PSAwICYmIHdoZWVsRGF0YUhhbmRsZXIuZ2V0RGlyZWN0aW9uKCkgPT09ICd1cCc7XG4gICAgICB2YXIgZ19pc0Fib3V0VG9TY3JvbGxUb0Z1bGxQYWdlID0gZ2V0U3RhdGUoKS5pc0Fib3V0VG9TY3JvbGxUb0Z1bGxQYWdlO1xuXG4gICAgICBpZiAoZ19pc0Fib3V0VG9TY3JvbGxUb0Z1bGxQYWdlKSB7XG4gICAgICAgIHByZXZlbnREZWZhdWx0KGUpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmIChnZXRTdGF0ZSgpLmlzQmV5b25kRnVsbHBhZ2UpIHtcbiAgICAgICAgaWYgKCFwYXVzZVNjcm9sbCkge1xuICAgICAgICAgIGtleWZyYW1lVGltZSgnc2V0JywgJ2JleW9uZEZ1bGxwYWdlJywgMTAwMCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHNob3VsZFNldEZpeGVkUG9zaXRpb24gPSAhZ19pc0Fib3V0VG9TY3JvbGxUb0Z1bGxQYWdlICYmICgha2V5ZnJhbWVUaW1lKCdpc05ld0tleWZyYW1lJywgJ2JleW9uZEZ1bGxwYWdlJykgfHwgIXdoZWVsRGF0YUhhbmRsZXIuaXNBY2NlbGVyYXRpbmcoKSk7XG4gICAgICAgICAgdmFyIHNjcm9sbFNldHRpbmdzO1xuXG4gICAgICAgICAgaWYgKHNob3VsZFNldEZpeGVkUG9zaXRpb24pIHtcbiAgICAgICAgICAgIHNjcm9sbFNldHRpbmdzID0gZ2V0U2Nyb2xsU2V0dGluZ3MoZ2V0TGFzdChnZXRTdGF0ZSgpLnNlY3Rpb25zKS5pdGVtLm9mZnNldFRvcCArIGdldExhc3QoZ2V0U3RhdGUoKS5zZWN0aW9ucykuaXRlbS5vZmZzZXRIZWlnaHQpO1xuICAgICAgICAgICAgc2Nyb2xsU2V0dGluZ3MuZWxlbWVudC5zY3JvbGxUbygwLCBzY3JvbGxTZXR0aW5ncy5vcHRpb25zKTtcbiAgICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgICAgaXNBYm91dFRvU2Nyb2xsVG9GdWxsUGFnZTogZmFsc2VcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcHJldmVudERlZmF1bHQoZSk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfSBlbHNlIGlmICh3aGVlbERhdGFIYW5kbGVyLmlzQWNjZWxlcmF0aW5nKCkpIHtcbiAgICAgICAgICAgIHBhdXNlU2Nyb2xsID0gZmFsc2U7XG4gICAgICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgICAgIGlzQWJvdXRUb1Njcm9sbFRvRnVsbFBhZ2U6IHRydWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgICAgICBzY3JvbGxUcmlnZ2VyOiAnd2hlZWwnXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHNjcm9sbFVwVG9GdWxscGFnZSgpO1xuICAgICAgICAgICAgcHJldmVudERlZmF1bHQoZSk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFnX2lzQWJvdXRUb1Njcm9sbFRvRnVsbFBhZ2UpIHtcbiAgICAgICAgICAvLyBhbGxvdyBub3JtYWwgc2Nyb2xsaW5nLCBidXQgcXVpdHRpbmdcbiAgICAgICAgICBpZiAoIXBhdXNlU2Nyb2xsKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIga2V5ZnJhbWVUaW1lID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGlzTmV3ID0gZmFsc2U7XG4gICAgICB2YXIgZnJhbWVzID0ge307XG4gICAgICB2YXIgdGltZWZyYW1lcyA9IHt9O1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24sIG5hbWUsIHRpbWVmcmFtZSkge1xuICAgICAgICBzd2l0Y2ggKGFjdGlvbikge1xuICAgICAgICAgIGNhc2UgJ3NldCc6XG4gICAgICAgICAgICBmcmFtZXNbbmFtZV0gPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICAgICAgICAgIHRpbWVmcmFtZXNbbmFtZV0gPSB0aW1lZnJhbWU7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgJ2lzTmV3S2V5ZnJhbWUnOlxuICAgICAgICAgICAgdmFyIGN1cnJlbnQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICAgICAgICAgIGlzTmV3ID0gY3VycmVudCAtIGZyYW1lc1tuYW1lXSA+IHRpbWVmcmFtZXNbbmFtZV07XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBpc05ldztcbiAgICAgIH07XG4gICAgfSgpO1xuXG4gICAgLy9AdHMtY2hlY2tcbiAgICAvKipcbiAgICAqIEFkZHMgc2VjdGlvbnMgYmVmb3JlIG9yIGFmdGVyIHRoZSBjdXJyZW50IG9uZSB0byBjcmVhdGUgdGhlIGluZmluaXRlIGVmZmVjdC5cbiAgICAqL1xuXG4gICAgZnVuY3Rpb24gY3JlYXRlSW5maW5pdGVTZWN0aW9ucyh2KSB7XG4gICAgICBzZXRTdGF0ZSh7XG4gICAgICAgIGlzRG9pbmdDb250aW5vdXNWZXJ0aWNhbDogdHJ1ZVxuICAgICAgfSk7XG4gICAgICB2YXIgYWN0aXZlU2VjdGlvbkl0ZW0gPSBnZXRTdGF0ZSgpLmFjdGl2ZVNlY3Rpb24uaXRlbTsgLy8gU2Nyb2xsaW5nIGRvd25cblxuICAgICAgaWYgKCF2LmlzTW92ZW1lbnRVcCkge1xuICAgICAgICAvLyBNb3ZlIGFsbCBwcmV2aW91cyBzZWN0aW9ucyB0byBhZnRlciB0aGUgYWN0aXZlIHNlY3Rpb25cbiAgICAgICAgYWZ0ZXIoYWN0aXZlU2VjdGlvbkl0ZW0sIHByZXZBbGwoYWN0aXZlU2VjdGlvbkl0ZW0sIFNFQ1RJT05fU0VMKS5yZXZlcnNlKCkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gU2Nyb2xsaW5nIHVwXG4gICAgICAgIC8vIE1vdmUgYWxsIG5leHQgc2VjdGlvbnMgdG8gYmVmb3JlIHRoZSBhY3RpdmUgc2VjdGlvblxuICAgICAgICBiZWZvcmUoYWN0aXZlU2VjdGlvbkl0ZW0sIG5leHRBbGwoYWN0aXZlU2VjdGlvbkl0ZW0sIFNFQ1RJT05fU0VMKSk7XG4gICAgICB9IC8vIE1haW50YWluIHRoZSBkaXNwbGF5ZWQgcG9zaXRpb24gKG5vdyB0aGF0IHdlIGNoYW5nZWQgdGhlIGVsZW1lbnQgb3JkZXIpXG5cblxuICAgICAgc2lsZW50U2Nyb2xsKGdldFN0YXRlKCkuYWN0aXZlU2VjdGlvbi5pdGVtLm9mZnNldFRvcCk7IC8vIE1haW50YWluIHRoZSBhY3RpdmUgc2xpZGVzIHZpc2libGUgaW4gdGhlIHZpZXdwb3J0XG5cbiAgICAgIGtlZXBTbGlkZXNQb3NpdGlvbiQxKCk7IC8vIHNhdmUgZm9yIGxhdGVyIHRoZSBlbGVtZW50cyB0aGF0IHN0aWxsIG5lZWQgdG8gYmUgcmVvcmRlcmVkXG5cbiAgICAgIHYud3JhcEFyb3VuZEVsZW1lbnRzID0gYWN0aXZlU2VjdGlvbkl0ZW07IC8vIFJlY2FsY3VsYXRlIGFuaW1hdGlvbiB2YXJpYWJsZXNcblxuICAgICAgdi5kdG9wID0gdi5lbGVtZW50Lm9mZnNldFRvcDtcbiAgICAgIHYueU1vdmVtZW50ID0gZ2V0WW1vdmVtZW50KGdldFN0YXRlKCkuYWN0aXZlU2VjdGlvbiwgdi5lbGVtZW50KTtcbiAgICAgIHJldHVybiB2O1xuICAgIH1cbiAgICAvKipcbiAgICAqIE1haW50YWlucyB0aGUgYWN0aXZlIHNsaWRlcyBpbiB0aGUgdmlld3BvcnRcbiAgICAqIChCZWNhdXNlIHRoZSBgc2Nyb2xsYCBhbmltYXRpb24gbWlnaHQgZ2V0IGxvc3Qgd2l0aCBzb21lIGFjdGlvbnMsIHN1Y2ggYXMgd2hlbiB1c2luZyBjb250aW51b3VzVmVydGljYWwpXG4gICAgKi9cblxuICAgIGZ1bmN0aW9uIGtlZXBTbGlkZXNQb3NpdGlvbiQxKCkge1xuICAgICAgdmFyIGFjdGl2ZVNsaWRlcyA9ICQoU0xJREVfQUNUSVZFX1NFTCk7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYWN0aXZlU2xpZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHNpbGVudExhbmRzY2FwZVNjcm9sbChhY3RpdmVTbGlkZXNbaV0sICdpbnRlcm5hbCcpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vQHRzLWNoZWNrXG4gICAgLyoqXG4gICAgKiBNYWludGFpbnMgdGhlIGFjdGl2ZSBzbGlkZXMgaW4gdGhlIHZpZXdwb3J0XG4gICAgKiAoQmVjYXVzZSB0aGUgYHNjcm9sbGAgYW5pbWF0aW9uIG1pZ2h0IGdldCBsb3N0IHdpdGggc29tZSBhY3Rpb25zLCBzdWNoIGFzIHdoZW4gdXNpbmcgY29udGludW91c1ZlcnRpY2FsKVxuICAgICovXG5cbiAgICBmdW5jdGlvbiBrZWVwU2xpZGVzUG9zaXRpb24oKSB7XG4gICAgICB2YXIgYWN0aXZlU2xpZGVzID0gJChTTElERV9BQ1RJVkVfU0VMKTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhY3RpdmVTbGlkZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgc2lsZW50TGFuZHNjYXBlU2Nyb2xsKGFjdGl2ZVNsaWRlc1tpXSwgJ2ludGVybmFsJyk7XG4gICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICogRml4IHNlY3Rpb24gb3JkZXIgYWZ0ZXIgY29udGludW91c1ZlcnRpY2FsIGNoYW5nZXMgaGF2ZSBiZWVuIGFuaW1hdGVkXG4gICAgKi9cblxuXG4gICAgZnVuY3Rpb24gY29udGludW91c1ZlcnRpY2FsRml4U2VjdGlvbk9yZGVyKHYpIHtcbiAgICAgIC8vIElmIGNvbnRpbnVvdXNWZXJ0aWNhbCBpcyBpbiBlZmZlY3QgKGFuZCBhdXRvU2Nyb2xsaW5nIHdvdWxkIGFsc28gYmUgaW4gZWZmZWN0IHRoZW4pLFxuICAgICAgLy8gZmluaXNoIG1vdmluZyB0aGUgZWxlbWVudHMgYXJvdW5kIHNvIHRoZSBkaXJlY3QgbmF2aWdhdGlvbiB3aWxsIGZ1bmN0aW9uIG1vcmUgc2ltcGx5XG4gICAgICBpZiAodi53cmFwQXJvdW5kRWxlbWVudHMgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh2LmlzTW92ZW1lbnRVcCkge1xuICAgICAgICBiZWZvcmUoJChTRUNUSU9OX1NFTClbMF0sIHYud3JhcEFyb3VuZEVsZW1lbnRzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFmdGVyKCQoU0VDVElPTl9TRUwpW2dldFN0YXRlKCkuc2VjdGlvbnMubGVuZ3RoIC0gMV0sIHYud3JhcEFyb3VuZEVsZW1lbnRzKTtcbiAgICAgIH1cblxuICAgICAgc2lsZW50U2Nyb2xsKGdldFN0YXRlKCkuYWN0aXZlU2VjdGlvbi5pdGVtLm9mZnNldFRvcCk7IC8vIE1haW50YWluIHRoZSBhY3RpdmUgc2xpZGVzIHZpc2libGUgaW4gdGhlIHZpZXdwb3J0XG5cbiAgICAgIGtlZXBTbGlkZXNQb3NpdGlvbigpO1xuICAgICAgc2V0U3RhdGUoe1xuICAgICAgICBpc0RvaW5nQ29udGlub3VzVmVydGljYWw6IGZhbHNlXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIE1ha2VzIHN1cmUgbGF6eWxvYWQgaXMgZG9uZSBmb3Igb3RoZXIgc2VjdGlvbnMgaW4gdGhlIHZpZXdwb3J0IHRoYXQgYXJlIG5vdCB0aGVcbiAgICAqIGFjdGl2ZSBvbmUuIFxuICAgICovXG5cbiAgICBmdW5jdGlvbiBsYXp5TG9hZE90aGVycygpIHtcbiAgICAgIHZhciBoYXNBdXRvSGVpZ2h0U2VjdGlvbnMgPSAkKEFVVE9fSEVJR0hUX1NFTClbMF0gfHwgaXNSZXNwb25zaXZlTW9kZSgpICYmICQoQVVUT19IRUlHSFRfUkVTUE9OU0lWRV9TRUwpWzBdOyAvL3F1aXR0aW5nIHdoZW4gaXQgZG9lc24ndCBhcHBseVxuXG4gICAgICBpZiAoIWdldE9wdGlvbnMoKS5sYXp5TG9hZGluZyB8fCAhaGFzQXV0b0hlaWdodFNlY3Rpb25zKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gLy9tYWtpbmcgc3VyZSB0byBsYXp5IGxvYWQgYXV0by1oZWlnaHQgc2VjdGlvbnMgdGhhdCBhcmUgaW4gdGhlIHZpZXdwb3J0XG5cblxuICAgICAgJChTRUNUSU9OX1NFTCArICc6bm90KCcgKyBBQ1RJVkVfU0VMICsgJyknKS5mb3JFYWNoKGZ1bmN0aW9uIChzZWN0aW9uKSB7XG4gICAgICAgIGlmIChpc1NlY3Rpb25JblZpZXdwb3J0KHNlY3Rpb24pKSB7XG4gICAgICAgICAgbGF6eUxvYWQoc2VjdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAqIERldGVybWluZXMgd2hldGhlciBhIHNlY3Rpb24gaXMgaW4gdGhlIHZpZXdwb3J0IG9yIG5vdC5cbiAgICAqL1xuXG4gICAgZnVuY3Rpb24gaXNTZWN0aW9uSW5WaWV3cG9ydChlbCkge1xuICAgICAgdmFyIHJlY3QgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIHZhciB0b3AgPSByZWN0LnRvcDtcbiAgICAgIHZhciBib3R0b20gPSByZWN0LmJvdHRvbTsgLy9zb21ldGltZXMgdGhlcmUncyBhIDFweCBvZmZzZXQgb24gdGhlIGJvdHRvbSBvZiB0aGUgc2NyZWVuIGV2ZW4gd2hlbiB0aGUgXG4gICAgICAvL3NlY3Rpb24ncyBoZWlnaHQgaXMgdGhlIHdpbmRvdy5pbm5lckhlaWdodCBvbmUuIEkgZ3Vlc3MgYmVjYXVzZSBwaXhlbHMgd29uJ3QgYWxsb3cgZGVjaW1hbHMuXG4gICAgICAvL3VzaW5nIHRoaXMgcHJldmVudHMgZnJvbSBsYXp5TG9hZGluZyB0aGUgc2VjdGlvbiB0aGF0IGlzIG5vdCB5ZXQgdmlzaWJsZSBcbiAgICAgIC8vKG9ubHkgMSBwaXhlbCBvZmZzZXQgaXMpXG5cbiAgICAgIHZhciBwaXhlbE9mZnNldCA9IDI7XG4gICAgICB2YXIgaXNUb3BJblZpZXcgPSB0b3AgKyBwaXhlbE9mZnNldCA8IHN0YXRlLndpbmRvd3NIZWlnaHQgJiYgdG9wID4gMDtcbiAgICAgIHZhciBpc0JvdHRvbUluVmlldyA9IGJvdHRvbSA+IHBpeGVsT2Zmc2V0ICYmIGJvdHRvbSA8IHN0YXRlLndpbmRvd3NIZWlnaHQ7XG4gICAgICByZXR1cm4gaXNUb3BJblZpZXcgfHwgaXNCb3R0b21JblZpZXc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBTZXRzIHRvIGFjdGl2ZSB0aGUgY3VycmVudCBtZW51IGFuZCB2ZXJ0aWNhbCBuYXYgaXRlbXMuXG4gICAgKi9cblxuICAgIGZ1bmN0aW9uIGFjdGl2YXRlTWVudUFuZE5hdihhbmNob3IsIGluZGV4KSB7XG4gICAgICBhY3RpdmF0ZU1lbnVFbGVtZW50KGFuY2hvcik7XG4gICAgICBhY3RpdmF0ZU5hdkRvdHMoYW5jaG9yLCBpbmRleCk7XG4gICAgfVxuICAgIC8qKlxuICAgICogQWN0aXZhdGluZyB0aGUgd2Vic2l0ZSBtYWluIG1lbnUgZWxlbWVudHMgYWNjb3JkaW5nIHRvIHRoZSBnaXZlbiBzbGlkZSBuYW1lLlxuICAgICovXG5cbiAgICBmdW5jdGlvbiBhY3RpdmF0ZU1lbnVFbGVtZW50KG5hbWUpIHtcbiAgICAgIGlmIChnZXRPcHRpb25zKCkubWVudSAmJiBnZXRPcHRpb25zKCkubWVudS5sZW5ndGgpIHtcbiAgICAgICAgJChnZXRPcHRpb25zKCkubWVudSkuZm9yRWFjaChmdW5jdGlvbiAobWVudSkge1xuICAgICAgICAgIGlmIChtZW51ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJlbW92ZUNsYXNzKCQoQUNUSVZFX1NFTCwgbWVudSksIEFDVElWRSk7XG4gICAgICAgICAgICBhZGRDbGFzcygkKCdbZGF0YS1tZW51YW5jaG9yPVwiJyArIG5hbWUgKyAnXCJdJywgbWVudSksIEFDVElWRSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEZpcmVzIHRoZSB3aGVlbCBldmVudCBvbmNlIHBlciBtb3VzZSB3aGVlbCB0cmlnZ2VyLlxuICAgICovXG5cbiAgICBmdW5jdGlvbiBmaXJlQ2FsbGJhY2tPbmNlUGVyU2Nyb2xsKGNhbGxiYWNrTmFtZSwgcGFyYW1zKSB7XG4gICAgICBpZiAoIWlzRnVuY3Rpb24oZ2V0T3B0aW9ucygpLmJlZm9yZUxlYXZlKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciByZXN1bHQgPSBvbmNlUGVyU2Nyb2xsKGdldFN0YXRlKCkuc2Nyb2xsVHJpZ2dlciwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gZmlyZUNhbGxiYWNrKGNhbGxiYWNrTmFtZSwgcGFyYW1zKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBGUC5tb3ZlVG8gPSBtb3ZlVG87XG5cbiAgICBGUC5nZXRTY3JvbGxZID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHN0YXRlLnNjcm9sbFk7XG4gICAgfTtcblxuICAgIHZhciBnX2FmdGVyU2VjdGlvbkxvYWRzSWQ7XG4gICAgdmFyIGdfdHJhbnNpdGlvbkxhcHNlSWQ7XG4gICAgRXZlbnRFbWl0dGVyLm9uKCdvbkRlc3Ryb3knLCBvbkRlc3Ryb3kkNik7XG4gICAgLyoqXG4gICAgKiBTY3JvbGxzIHRoZSBzaXRlIHRvIHRoZSBnaXZlbiBlbGVtZW50IGFuZCBzY3JvbGxzIHRvIHRoZSBzbGlkZSBpZiBhIGNhbGxiYWNrIGlzIGdpdmVuLlxuICAgICovXG5cbiAgICBmdW5jdGlvbiBzY3JvbGxQYWdlKHNlY3Rpb24sIGNhbGxiYWNrLCBpc01vdmVtZW50VXApIHtcbiAgICAgIHZhciBlbGVtZW50ID0gc2VjdGlvbi5pdGVtO1xuXG4gICAgICBpZiAoZWxlbWVudCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gLy90aGVyZSdzIG5vIGVsZW1lbnQgdG8gc2Nyb2xsLCBsZWF2aW5nIHRoZSBmdW5jdGlvblxuXG5cbiAgICAgIHZhciBkdG9wID0gZ2V0RGVzdGluYXRpb25Qb3NpdGlvbihlbGVtZW50KTtcbiAgICAgIHZhciBzbGlkZUFuY2hvckxpbms7XG4gICAgICB2YXIgc2xpZGVJbmRleDsgLy9sb2NhbCB2YXJpYWJsZXNcblxuICAgICAgdmFyIHYgPSB7XG4gICAgICAgIFwiZWxlbWVudFwiOiBlbGVtZW50LFxuICAgICAgICBcImNhbGxiYWNrXCI6IGNhbGxiYWNrLFxuICAgICAgICBcImlzTW92ZW1lbnRVcFwiOiBpc01vdmVtZW50VXAsXG4gICAgICAgIFwiZHRvcFwiOiBkdG9wLFxuICAgICAgICBcInlNb3ZlbWVudFwiOiBnZXRZbW92ZW1lbnQoZ2V0U3RhdGUoKS5hY3RpdmVTZWN0aW9uLCBlbGVtZW50KSxcbiAgICAgICAgXCJhbmNob3JMaW5rXCI6IHNlY3Rpb24uYW5jaG9yLFxuICAgICAgICBcInNlY3Rpb25JbmRleFwiOiBzZWN0aW9uLmluZGV4KCksXG4gICAgICAgIFwiYWN0aXZlU2xpZGVcIjogc2VjdGlvbi5hY3RpdmVTbGlkZSA/IHNlY3Rpb24uYWN0aXZlU2xpZGUuaXRlbSA6IG51bGwsXG4gICAgICAgIFwibGVhdmluZ1NlY3Rpb25cIjogZ2V0U3RhdGUoKS5hY3RpdmVTZWN0aW9uLmluZGV4KCkgKyAxLFxuICAgICAgICAvL2NhY2hpbmcgdGhlIHZhbHVlIG9mIGlzUmVzaXppbmcgYXQgdGhlIG1vbW1lbnQgdGhlIGZ1bmN0aW9uIGlzIGNhbGxlZFxuICAgICAgICAvL2JlY2F1c2UgaXQgd2lsbCBiZSBjaGVja2VkIGxhdGVyIGluc2lkZSBhIHNldFRpbWVvdXQgYW5kIHRoZSB2YWx1ZSBtaWdodCBjaGFuZ2VcbiAgICAgICAgXCJsb2NhbElzUmVzaXppbmdcIjogc3RhdGUuaXNSZXNpemluZyxcbiAgICAgICAgXCJpdGVtc1wiOiB7XG4gICAgICAgICAgXCJvcmlnaW5cIjogZ2V0U3RhdGUoKS5hY3RpdmVTZWN0aW9uLFxuICAgICAgICAgIFwiZGVzdGluYXRpb25cIjogc2VjdGlvblxuICAgICAgICB9LFxuICAgICAgICBcImRpcmVjdGlvblwiOiBudWxsXG4gICAgICB9OyAvL3F1aXRpbmcgd2hlbiBkZXN0aW5hdGlvbiBzY3JvbGwgaXMgdGhlIHNhbWUgYXMgdGhlIGN1cnJlbnQgb25lXG5cbiAgICAgIGlmIChnZXRTdGF0ZSgpLmFjdGl2ZVNlY3Rpb24uaXRlbSA9PSBlbGVtZW50ICYmICFzdGF0ZS5pc1Jlc2l6aW5nIHx8IGdldE9wdGlvbnMoKS5zY3JvbGxCYXIgJiYgZ2V0U2Nyb2xsVG9wKGdldE9wdGlvbnMoKSkgPT09IHYuZHRvcCAmJiAhaGFzQ2xhc3MoZWxlbWVudCwgQVVUT19IRUlHSFQpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHYuYWN0aXZlU2xpZGUgIT0gbnVsbCkge1xuICAgICAgICBzbGlkZUFuY2hvckxpbmsgPSBnZXRBdHRyKHYuYWN0aXZlU2xpZGUsICdkYXRhLWFuY2hvcicpO1xuICAgICAgICBzbGlkZUluZGV4ID0gaW5kZXgodi5hY3RpdmVTbGlkZSwgbnVsbCk7XG4gICAgICB9IC8vY2FsbGJhY2sgKG9uTGVhdmUpIGlmIHRoZSBzaXRlIGlzIG5vdCBqdXN0IHJlc2l6aW5nIGFuZCByZWFkanVzdGluZyB0aGUgc2xpZGVzXG5cblxuICAgICAgaWYgKCF2LmxvY2FsSXNSZXNpemluZykge1xuICAgICAgICB2YXIgZGlyZWN0aW9uID0gdi55TW92ZW1lbnQ7IC8vcmVxdWlyZWQgZm9yIGNvbnRpbm91c1ZlcnRpY2FsXG5cbiAgICAgICAgaWYgKHR5cGVvZiBpc01vdmVtZW50VXAgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgZGlyZWN0aW9uID0gaXNNb3ZlbWVudFVwID8gJ3VwJyA6ICdkb3duJztcbiAgICAgICAgfSAvL2ZvciB0aGUgY2FsbGJhY2tcblxuXG4gICAgICAgIHYuZGlyZWN0aW9uID0gZGlyZWN0aW9uO1xuXG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKGdldE9wdGlvbnMoKS5iZWZvcmVMZWF2ZSkpIHtcbiAgICAgICAgICBpZiAoZmlyZUNhbGxiYWNrT25jZVBlclNjcm9sbCgnYmVmb3JlTGVhdmUnLCB2KSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNGdW5jdGlvbihnZXRPcHRpb25zKCkub25MZWF2ZSkpIHtcbiAgICAgICAgICBpZiAoIWZpcmVDYWxsYmFjaygnb25MZWF2ZScsIHYpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IC8vIElmIGNvbnRpbnVvdXNWZXJ0aWNhbCAmJiB3ZSBuZWVkIHRvIHdyYXAgYXJvdW5kXG5cblxuICAgICAgaWYgKGdldE9wdGlvbnMoKS5hdXRvU2Nyb2xsaW5nICYmIGdldE9wdGlvbnMoKS5jb250aW51b3VzVmVydGljYWwgJiYgdHlwZW9mIHYuaXNNb3ZlbWVudFVwICE9PSBcInVuZGVmaW5lZFwiICYmICghdi5pc01vdmVtZW50VXAgJiYgdi55TW92ZW1lbnQgPT0gJ3VwJyB8fCAvLyBJbnRlbmRpbmcgdG8gc2Nyb2xsIGRvd24gYnV0IGFib3V0IHRvIGdvIHVwIG9yXG4gICAgICB2LmlzTW92ZW1lbnRVcCAmJiB2LnlNb3ZlbWVudCA9PSAnZG93bicpKSB7XG4gICAgICAgIC8vIGludGVuZGluZyB0byBzY3JvbGwgdXAgYnV0IGFib3V0IHRvIGdvIGRvd25cbiAgICAgICAgdiA9IGNyZWF0ZUluZmluaXRlU2VjdGlvbnModik7XG4gICAgICB9IC8vcGF1c2luZyBtZWRpYSBvZiB0aGUgbGVhdmluZyBzZWN0aW9uIChpZiB3ZSBhcmUgbm90IGp1c3QgcmVzaXppbmcsIGFzIGRlc3RpbmF0aW5vIHdpbGwgYmUgdGhlIHNhbWUgb25lKVxuXG5cbiAgICAgIGlmICghdi5sb2NhbElzUmVzaXppbmcpIHtcbiAgICAgICAgc3RvcE1lZGlhKGdldFN0YXRlKCkuYWN0aXZlU2VjdGlvbi5pdGVtKTtcbiAgICAgIH1cblxuICAgICAgYWRkQ2xhc3MoZWxlbWVudCwgQUNUSVZFKTtcbiAgICAgIHJlbW92ZUNsYXNzKHNpYmxpbmdzKGVsZW1lbnQpLCBBQ1RJVkUpO1xuICAgICAgdXBkYXRlU3RhdGUoKTtcbiAgICAgIGxhenlMb2FkKGVsZW1lbnQpOyAvL3ByZXZlbnRpbmcgZnJvbSBhY3RpdmF0aW5nIHRoZSBNb3VzZVdoZWVsSGFuZGxlciBldmVudFxuICAgICAgLy9tb3JlIHRoYW4gb25jZSBpZiB0aGUgcGFnZSBpcyBzY3JvbGxpbmdcblxuICAgICAgc2V0U3RhdGUoe1xuICAgICAgICBjYW5TY3JvbGw6IEZQLnRlc3QuaXNUZXN0aW5nXG4gICAgICB9KTtcbiAgICAgIHNldFBhZ2VTdGF0dXMoc2xpZGVJbmRleCwgc2xpZGVBbmNob3JMaW5rLCB2LmFuY2hvckxpbmspO1xuICAgICAgcGVyZm9ybU1vdmVtZW50KHYpOyAvL2ZsYWcgdG8gYXZvaWQgY2FsbGluZ24gYHNjcm9sbFBhZ2UoKWAgdHdpY2UgaW4gY2FzZSBvZiB1c2luZyBhbmNob3IgbGlua3NcblxuICAgICAgc2V0U3RhdGUoe1xuICAgICAgICBsYXN0U2Nyb2xsZWREZXN0aW55OiB2LmFuY2hvckxpbmtcbiAgICAgIH0pOyAvL2F2b2lkIGZpcmluZyBpdCB0d2ljZSAoYXMgaXQgZG9lcyBhbHNvIG9uIHNjcm9sbClcblxuICAgICAgYWN0aXZhdGVNZW51QW5kTmF2KHYuYW5jaG9yTGluaywgdi5zZWN0aW9uSW5kZXgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uRGVzdHJveSQ2KCkge1xuICAgICAgY2xlYXJUaW1lb3V0KGdfYWZ0ZXJTZWN0aW9uTG9hZHNJZCk7XG4gICAgICBjbGVhclRpbWVvdXQoZ190cmFuc2l0aW9uTGFwc2VJZCk7XG4gICAgfVxuICAgIC8qKlxuICAgICogUmV0dXJucyB0aGUgZGVzdGluYXRpb24gWSBwb3NpdGlvbiBiYXNlZCBvbiB0aGUgc2Nyb2xsaW5nIGRpcmVjdGlvbiBhbmRcbiAgICAqIHRoZSBoZWlnaHQgb2YgdGhlIHNlY3Rpb24uXG4gICAgKi9cblxuXG4gICAgZnVuY3Rpb24gZ2V0RGVzdGluYXRpb25Qb3NpdGlvbihlbGVtZW50KSB7XG4gICAgICB2YXIgZWxlbWVudEhlaWdodCA9IGVsZW1lbnQub2Zmc2V0SGVpZ2h0O1xuICAgICAgdmFyIGVsZW1lbnRUb3AgPSBlbGVtZW50Lm9mZnNldFRvcDsgLy90b3Agb2YgdGhlIGRlc2luYXRpb24gd2lsbCBiZSBhdCB0aGUgdG9wIG9mIHRoZSB2aWV3cG9ydFxuXG4gICAgICB2YXIgcG9zaXRpb24gPSBlbGVtZW50VG9wO1xuICAgICAgdmFyIGlzU2Nyb2xsaW5nRG93biA9IGVsZW1lbnRUb3AgPiBzdGF0ZS5wcmV2aW91c0Rlc3RUb3A7XG4gICAgICB2YXIgc2VjdGlvbkJvdHRvbSA9IHBvc2l0aW9uIC0gZ2V0V2luZG93SGVpZ2h0KCkgKyBlbGVtZW50SGVpZ2h0O1xuICAgICAgdmFyIGJpZ1NlY3Rpb25zRGVzdGluYXRpb24gPSBnZXRPcHRpb25zKCkuYmlnU2VjdGlvbnNEZXN0aW5hdGlvbjsgLy9pcyB0aGUgZGVzdGluYXRpb24gZWxlbWVudCBiaWdnZXIgdGhhbiB0aGUgdmlld3BvcnQ/XG5cbiAgICAgIGlmIChlbGVtZW50SGVpZ2h0ID4gZ2V0V2luZG93SGVpZ2h0KCkpIHtcbiAgICAgICAgLy9zY3JvbGxpbmcgdXA/XG4gICAgICAgIGlmICghaXNTY3JvbGxpbmdEb3duICYmICFiaWdTZWN0aW9uc0Rlc3RpbmF0aW9uIHx8IGJpZ1NlY3Rpb25zRGVzdGluYXRpb24gPT09ICdib3R0b20nKSB7XG4gICAgICAgICAgcG9zaXRpb24gPSBzZWN0aW9uQm90dG9tO1xuICAgICAgICB9XG4gICAgICB9IC8vc2VjdGlvbnMgZXF1YWwgb3Igc21hbGxlciB0aGFuIHRoZSB2aWV3cG9ydCBoZWlnaHQgJiYgc2Nyb2xsaW5nIGRvd24/IHx8ICBpcyByZXNpemluZyBhbmQgaXRzIGluIHRoZSBsYXN0IHNlY3Rpb25cbiAgICAgIGVsc2UgaWYgKGlzU2Nyb2xsaW5nRG93biB8fCBzdGF0ZS5pc1Jlc2l6aW5nICYmIG5leHQoZWxlbWVudCkgPT0gbnVsbCkge1xuICAgICAgICAvL1RoZSBib3R0b20gb2YgdGhlIGRlc3RpbmF0aW9uIHdpbGwgYmUgYXQgdGhlIGJvdHRvbSBvZiB0aGUgdmlld3BvcnRcbiAgICAgICAgcG9zaXRpb24gPSBzZWN0aW9uQm90dG9tO1xuICAgICAgfVxuICAgICAgLypcbiAgICAgIEtlZXBpbmcgcmVjb3JkIG9mIHRoZSBsYXN0IHNjcm9sbGVkIHBvc2l0aW9uIHRvIGRldGVybWluZSB0aGUgc2Nyb2xsaW5nIGRpcmVjdGlvbi5cbiAgICAgIE5vIGNvbnZlbnRpb25hbCBtZXRob2RzIGNhbiBiZSB1c2VkIGFzIHRoZSBzY3JvbGwgYmFyIG1pZ2h0IG5vdCBiZSBwcmVzZW50XG4gICAgICBBTkQgdGhlIHNlY3Rpb24gbWlnaHQgbm90IGJlIGFjdGl2ZSBpZiBpdCBpcyBhdXRvLWhlaWdodCBhbmQgZGlkbnQgcmVhY2ggdGhlIG1pZGRsZVxuICAgICAgb2YgdGhlIHZpZXdwb3J0LlxuICAgICAgKi9cblxuXG4gICAgICBzZXRTdGF0ZSh7XG4gICAgICAgIHByZXZpb3VzRGVzdFRvcDogcG9zaXRpb25cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHBvc2l0aW9uO1xuICAgIH1cbiAgICAvKipcbiAgICAqIFBlcmZvcm1zIHRoZSB2ZXJ0aWNhbCBtb3ZlbWVudCAoYnkgQ1NTMyBvciBieSBqUXVlcnkpXG4gICAgKi9cblxuXG4gICAgZnVuY3Rpb24gcGVyZm9ybU1vdmVtZW50KHYpIHtcbiAgICAgIHZhciBpc0Zhc3RTcGVlZCA9IGdldE9wdGlvbnMoKS5zY3JvbGxpbmdTcGVlZCA8IDcwMDtcbiAgICAgIHZhciB0cmFuc2l0aW9uTGFwc2UgPSBpc0Zhc3RTcGVlZCA/IDcwMCA6IGdldE9wdGlvbnMoKS5zY3JvbGxpbmdTcGVlZDtcbiAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgdG91Y2hEaXJlY3Rpb246ICdub25lJyxcbiAgICAgICAgc2Nyb2xsWTogTWF0aC5yb3VuZCh2LmR0b3ApXG4gICAgICB9KTtcbiAgICAgIEV2ZW50RW1pdHRlci5lbWl0KCdvblBlcmZvcm1Nb3ZlbWVudCcpOyAvLyB1c2luZyBDU1MzIHRyYW5zbGF0ZSBmdW5jdGlvbmFsaXR5XG5cbiAgICAgIGlmIChnZXRPcHRpb25zKCkuY3NzMyAmJiBnZXRPcHRpb25zKCkuYXV0b1Njcm9sbGluZyAmJiAhZ2V0T3B0aW9ucygpLnNjcm9sbEJhcikge1xuICAgICAgICAvLyBUaGUgZmlyc3Qgc2VjdGlvbiBjYW4gaGF2ZSBhIG5lZ2F0aXZlIHZhbHVlIGluIGlPUyAxMC4gTm90IHF1aXRlIHN1cmUgd2h5OiAtMC4wMTQyODIyMjY1NjI1XG4gICAgICAgIC8vIHRoYXQncyB3aHkgd2Ugcm91bmQgaXQgdG8gMC5cbiAgICAgICAgdmFyIHRyYW5zbGF0ZTNkID0gJ3RyYW5zbGF0ZTNkKDBweCwgLScgKyBNYXRoLnJvdW5kKHYuZHRvcCkgKyAncHgsIDBweCknO1xuICAgICAgICB0cmFuc2Zvcm1Db250YWluZXIodHJhbnNsYXRlM2QsIHRydWUpOyAvL2V2ZW4gd2hlbiB0aGUgc2Nyb2xsaW5nU3BlZWQgaXMgMCB0aGVyZSdzIGEgbGl0dGxlIGRlbGF5LCB3aGljaCBtaWdodCBjYXVzZSB0aGVcbiAgICAgICAgLy9zY3JvbGxpbmdTcGVlZCB0byBjaGFuZ2UgaW4gY2FzZSBvZiB1c2luZyBzaWxlbnRNb3ZlVG8oKTvDp1xuXG4gICAgICAgIGlmIChnZXRPcHRpb25zKCkuc2Nyb2xsaW5nU3BlZWQpIHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQoZ19hZnRlclNlY3Rpb25Mb2Fkc0lkKTtcbiAgICAgICAgICBnX2FmdGVyU2VjdGlvbkxvYWRzSWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGFmdGVyU2VjdGlvbkxvYWRzKHYpOyAvL2Rpc2FibGluZyBjYW5TY3JvbGwgd2hlbiB1c2luZyBmYXN0U3BlZWRcblxuICAgICAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgICAgICBjYW5TY3JvbGw6ICFpc0Zhc3RTcGVlZCB8fCBGUC50ZXN0LmlzVGVzdGluZ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSwgZ2V0T3B0aW9ucygpLnNjcm9sbGluZ1NwZWVkKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhZnRlclNlY3Rpb25Mb2Fkcyh2KTtcbiAgICAgICAgfVxuICAgICAgfSAvLyB1c2luZyBKUyB0byBhbmltYXRlXG4gICAgICBlbHNlIHtcbiAgICAgICAgdmFyIHNjcm9sbFNldHRpbmdzID0gZ2V0U2Nyb2xsU2V0dGluZ3Modi5kdG9wKTtcbiAgICAgICAgRlAudGVzdC50b3AgPSAtdi5kdG9wICsgJ3B4JztcbiAgICAgICAgY3NzKCRodG1sQm9keSwge1xuICAgICAgICAgICdzY3JvbGwtYmVoYXZpb3InOiAndW5zZXQnXG4gICAgICAgIH0pO1xuICAgICAgICBjbGVhclRpbWVvdXQoZ19hZnRlclNlY3Rpb25Mb2Fkc0lkKTtcbiAgICAgICAgc2Nyb2xsVG8oc2Nyb2xsU2V0dGluZ3MuZWxlbWVudCwgc2Nyb2xsU2V0dGluZ3Mub3B0aW9ucywgZ2V0T3B0aW9ucygpLnNjcm9sbGluZ1NwZWVkLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKGdldE9wdGlvbnMoKS5zY3JvbGxCYXIpIHtcbiAgICAgICAgICAgIC8qIEhhY2shXG4gICAgICAgICAgICBUaGUgdGltZW91dCBwcmV2ZW50cyBzZXR0aW5nIHRoZSBtb3N0IGRvbWluYW50IHNlY3Rpb24gaW4gdGhlIHZpZXdwb3J0IGFzIFwiYWN0aXZlXCIgd2hlbiB0aGUgdXNlclxuICAgICAgICAgICAgc2Nyb2xsZWQgdG8gYSBzbWFsbGVyIHNlY3Rpb24gYnkgdXNpbmcgdGhlIG1vdXNld2hlZWwgKGF1dG8gc2Nyb2xsaW5nKSByYXRoZXIgdGhhbiBkcmFnaW5nIHRoZSBzY3JvbGwgYmFyLlxuICAgICAgICAgICAgIFdoZW4gdXNpbmcgc2Nyb2xsQmFyOnRydWUgSXQgc2VlbXMgbGlrZSB0aGUgc2Nyb2xsIGV2ZW50cyBzdGlsbCBnZXR0aW5nIHByb3BhZ2F0ZWQgZXZlbiBhZnRlciB0aGUgc2Nyb2xsaW5nIGFuaW1hdGlvbiBoYXMgZmluaXNoZWQuXG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgZ19hZnRlclNlY3Rpb25Mb2Fkc0lkID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIGFmdGVyU2VjdGlvbkxvYWRzKHYpO1xuICAgICAgICAgICAgfSwgMzApO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhZnRlclNlY3Rpb25Mb2Fkcyh2KTsgLy9kaXNhYmxpbmcgY2FuU2Nyb2xsIHdoZW4gdXNpbmcgZmFzdFNwZWVkXG5cbiAgICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgICAgY2FuU2Nyb2xsOiAhaXNGYXN0U3BlZWQgfHwgRlAudGVzdC5pc1Rlc3RpbmdcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9IC8vIGVuYWJsaW5nIGNhblNjcm9sbCBhZnRlciB0aGUgbWluaW11bSB0cmFuc2l0aW9uIGxhcHNcblxuXG4gICAgICBpZiAoaXNGYXN0U3BlZWQpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KGdfdHJhbnNpdGlvbkxhcHNlSWQpO1xuICAgICAgICBnX3RyYW5zaXRpb25MYXBzZUlkID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgICAgY2FuU2Nyb2xsOiB0cnVlXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sIHRyYW5zaXRpb25MYXBzZSk7XG4gICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICogQWN0aW9ucyB0byBkbyBvbmNlIHRoZSBzZWN0aW9uIGlzIGxvYWRlZC5cbiAgICAqL1xuXG5cbiAgICBmdW5jdGlvbiBhZnRlclNlY3Rpb25Mb2Fkcyh2KSB7XG4gICAgICBpZiAoZ2V0T3B0aW9ucygpLmZpdFRvU2VjdGlvbikge1xuICAgICAgICAvLyBSZW1vdmluZyBDU1Mgc25hcHMgZm9yIGF1dG8tc2Nyb2xsaW5nIHNlY3Rpb25zXG4gICAgICAgIGlmIChoYXNDbGFzcygkKFNFQ1RJT05fQUNUSVZFX1NFTClbMF0sIEFVVE9fSEVJR0hUKSkge1xuICAgICAgICAgIGNzcyhkb2MuYm9keSwge1xuICAgICAgICAgICAgJ3Njcm9sbC1zbmFwLXR5cGUnOiAnbm9uZSdcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzZXRTdGF0ZSh7XG4gICAgICAgIGlzQmV5b25kRnVsbHBhZ2U6IGZhbHNlXG4gICAgICB9KTtcbiAgICAgIGNvbnRpbnVvdXNWZXJ0aWNhbEZpeFNlY3Rpb25PcmRlcih2KTsgLy9jYWxsYmFjayAoYWZ0ZXJMb2FkKSBpZiB0aGUgc2l0ZSBpcyBub3QganVzdCByZXNpemluZyBhbmQgcmVhZGp1c3RpbmcgdGhlIHNsaWRlc1xuXG4gICAgICBpZiAoaXNGdW5jdGlvbihnZXRPcHRpb25zKCkuYWZ0ZXJMb2FkKSAmJiAhdi5sb2NhbElzUmVzaXppbmcpIHtcbiAgICAgICAgZmlyZUNhbGxiYWNrKCdhZnRlckxvYWQnLCB2KTtcbiAgICAgIH1cblxuICAgICAgdXBkYXRlU3RhdGUoKTtcblxuICAgICAgaWYgKCF2LmxvY2FsSXNSZXNpemluZykge1xuICAgICAgICBwbGF5TWVkaWEodi5lbGVtZW50KTtcbiAgICAgIH1cblxuICAgICAgYWRkQ2xhc3Modi5lbGVtZW50LCBDT01QTEVURUxZKTtcbiAgICAgIHJlbW92ZUNsYXNzKHNpYmxpbmdzKHYuZWxlbWVudCksIENPTVBMRVRFTFkpO1xuICAgICAgbGF6eUxvYWRPdGhlcnMoKTtcbiAgICAgIHNjcm9sbE92ZXJmbG93SGFuZGxlci5hZnRlclNlY3Rpb25Mb2FkcygpO1xuICAgICAgc2V0U3RhdGUoe1xuICAgICAgICBjYW5TY3JvbGw6IHRydWVcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoaXNGdW5jdGlvbih2LmNhbGxiYWNrKSkge1xuICAgICAgICB2LmNhbGxiYWNrKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgRlAubW92ZVNlY3Rpb25Eb3duID0gbW92ZVNlY3Rpb25Eb3duO1xuICAgIC8qKlxuICAgICogTW92ZXMgdGhlIHBhZ2UgZG93biBvbmUgc2VjdGlvbi5cbiAgICAqL1xuXG4gICAgZnVuY3Rpb24gbW92ZVNlY3Rpb25Eb3duKCkge1xuICAgICAgdmFyIG5leHQgPSBnZXRTdGF0ZSgpLmFjdGl2ZVNlY3Rpb24ubmV4dCgpOyAvL2xvb3BpbmcgdG8gdGhlIHRvcCBpZiB0aGVyZSdzIG5vIG1vcmUgc2VjdGlvbnMgYmVsb3dcblxuICAgICAgaWYgKCFuZXh0ICYmIChnZXRPcHRpb25zKCkubG9vcEJvdHRvbSB8fCBnZXRPcHRpb25zKCkuY29udGludW91c1ZlcnRpY2FsKSkge1xuICAgICAgICBuZXh0ID0gZ2V0U3RhdGUoKS5zZWN0aW9uc1swXTtcbiAgICAgIH1cblxuICAgICAgaWYgKG5leHQgIT0gbnVsbCkge1xuICAgICAgICBzY3JvbGxQYWdlKG5leHQsIG51bGwsIGZhbHNlKTtcbiAgICAgIH0gZWxzZSBpZiAoaGFzQ29udGVudEJleW9uZEZ1bGxQYWdlKCkpIHtcbiAgICAgICAgRXZlbnRFbWl0dGVyLmVtaXQoJ3Njcm9sbEJleW9uZEZ1bGxwYWdlJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFzQ29udGVudEJleW9uZEZ1bGxQYWdlKCkge1xuICAgICAgcmV0dXJuIGdldENvbnRhaW5lcigpLnNjcm9sbEhlaWdodCA8ICRib2R5LnNjcm9sbEhlaWdodDtcbiAgICB9XG5cbiAgICBGUC5tb3ZlU2VjdGlvblVwID0gbW92ZVNlY3Rpb25VcDtcbiAgICAvKipcbiAgICAqIE1vdmVzIHRoZSBwYWdlIHVwIG9uZSBzZWN0aW9uLlxuICAgICovXG5cbiAgICBmdW5jdGlvbiBtb3ZlU2VjdGlvblVwKCkge1xuICAgICAgdmFyIHByZXYgPSBnZXRTdGF0ZSgpLmFjdGl2ZVNlY3Rpb24ucHJldigpOyAvL2xvb3BpbmcgdG8gdGhlIGJvdHRvbSBpZiB0aGVyZSdzIG5vIG1vcmUgc2VjdGlvbnMgYWJvdmVcblxuICAgICAgaWYgKCFwcmV2ICYmIChnZXRPcHRpb25zKCkubG9vcFRvcCB8fCBnZXRPcHRpb25zKCkuY29udGludW91c1ZlcnRpY2FsKSkge1xuICAgICAgICBwcmV2ID0gZ2V0TGFzdChnZXRTdGF0ZSgpLnNlY3Rpb25zKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHByZXYgIT0gbnVsbCkge1xuICAgICAgICBzY3JvbGxQYWdlKHByZXYsIG51bGwsIHRydWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBvbGRQYWdlWSA9IDA7XG4gICAgLyoqXG4gICAgKiBEZXRlY3RpbmcgdGhlIGRpcmVjdGlvbiBvZiB0aGUgbW91c2UgbW92ZW1lbnQuXG4gICAgKiBVc2VkIG9ubHkgZm9yIHRoZSBtaWRkbGUgYnV0dG9uIG9mIHRoZSBtb3VzZS5cbiAgICAqL1xuXG4gICAgZnVuY3Rpb24gbW91c2VNb3ZlSGFuZGxlcihlKSB7XG4gICAgICBpZiAoIWdldE9wdGlvbnMoKS5hdXRvU2Nyb2xsaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXRlLmNhblNjcm9sbCkge1xuICAgICAgICAvLyBtb3ZpbmcgdXBcbiAgICAgICAgaWYgKGUucGFnZVkgPCBvbGRQYWdlWSAmJiBnZXRJc1Njcm9sbEFsbG93ZWQoKS5tLnVwKSB7XG4gICAgICAgICAgbW92ZVNlY3Rpb25VcCgpO1xuICAgICAgICB9IC8vIG1vdmluZyBkb3duXG4gICAgICAgIGVsc2UgaWYgKGUucGFnZVkgPiBvbGRQYWdlWSAmJiBnZXRJc1Njcm9sbEFsbG93ZWQoKS5tLmRvd24pIHtcbiAgICAgICAgICBtb3ZlU2VjdGlvbkRvd24oKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBvbGRQYWdlWSA9IGUucGFnZVk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHNldE9sZFBhZ2VZKHZhbHVlKSB7XG4gICAgICBvbGRQYWdlWSA9IHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogRGV0ZXJtaW5lcyB0aGUgd2F5IG9mIHNjcm9sbGluZyB1cCBvciBkb3duOlxuICAgICogYnkgJ2F1dG9tYXRpY2FsbHknIHNjcm9sbGluZyBhIHNlY3Rpb24gb3IgYnkgdXNpbmcgdGhlIGRlZmF1bHQgYW5kIG5vcm1hbCBzY3JvbGxpbmcuXG4gICAgKi9cblxuICAgIGZ1bmN0aW9uIHNjcm9sbGluZyh0eXBlKSB7XG4gICAgICBpZiAoIWdldElzU2Nyb2xsQWxsb3dlZCgpLm1bdHlwZV0pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgc2Nyb2xsU2VjdGlvbiA9IHR5cGUgPT09ICdkb3duJyA/IG1vdmVTZWN0aW9uRG93biA6IG1vdmVTZWN0aW9uVXA7XG5cbiAgICAgIGlmIChnZXRPcHRpb25zKCkuc2Nyb2xsT3ZlcmZsb3cgJiYgc2Nyb2xsT3ZlcmZsb3dIYW5kbGVyLmlzU2Nyb2xsYWJsZShnZXRTdGF0ZSgpLmFjdGl2ZVNlY3Rpb24pKSB7XG4gICAgICAgIC8vaXMgdGhlIHNjcm9sbGJhciBhdCB0aGUgc3RhcnQvZW5kIG9mIHRoZSBzY3JvbGw/XG4gICAgICAgIGlmIChzY3JvbGxPdmVyZmxvd0hhbmRsZXIuaXNTY3JvbGxlZCh0eXBlLCBnZXRTdGF0ZSgpLmFjdGl2ZVNlY3Rpb24uaXRlbSkgJiYgc2Nyb2xsT3ZlcmZsb3dIYW5kbGVyLnNob3VsZE1vdmVQYWdlKCkpIHtcbiAgICAgICAgICBzY3JvbGxTZWN0aW9uKCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNjcm9sbFNlY3Rpb24oKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgdG91Y2hTdGFydFkgPSAwO1xuICAgIHZhciB0b3VjaFN0YXJ0WCA9IDA7XG4gICAgdmFyIHRvdWNoRW5kWSA9IDA7XG4gICAgdmFyIHRvdWNoRW5kWCA9IDA7XG4gICAgdmFyIE1TUG9pbnRlciA9IGdldE1TUG9pbnRlcigpO1xuICAgIHZhciBldmVudHMgPSB7XG4gICAgICB0b3VjaG1vdmU6ICdvbnRvdWNobW92ZScgaW4gd2luZG93ID8gJ3RvdWNobW92ZScgOiBNU1BvaW50ZXIgPyBNU1BvaW50ZXIubW92ZSA6IG51bGwsXG4gICAgICB0b3VjaHN0YXJ0OiAnb250b3VjaHN0YXJ0JyBpbiB3aW5kb3cgPyAndG91Y2hzdGFydCcgOiBNU1BvaW50ZXIgPyBNU1BvaW50ZXIuZG93biA6IG51bGxcbiAgICB9O1xuICAgIC8qKlxuICAgICogQWRkcyB0aGUgcG9zc2liaWxpdHkgdG8gYXV0byBzY3JvbGwgdGhyb3VnaCBzZWN0aW9ucyBvbiB0b3VjaCBkZXZpY2VzLlxuICAgICovXG5cbiAgICBmdW5jdGlvbiBhZGRUb3VjaEhhbmRsZXIoKSB7XG4gICAgICBpZiAoIWV2ZW50cy50b3VjaG1vdmUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNUb3VjaERldmljZSB8fCBpc1RvdWNoKSB7XG4gICAgICAgIGlmIChnZXRPcHRpb25zKCkuYXV0b1Njcm9sbGluZykge1xuICAgICAgICAgICRib2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnRzLnRvdWNobW92ZSwgcHJldmVudEJvdW5jaW5nLCB7XG4gICAgICAgICAgICBwYXNzaXZlOiBmYWxzZVxuICAgICAgICAgIH0pO1xuICAgICAgICAgICRib2R5LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRzLnRvdWNobW92ZSwgcHJldmVudEJvdW5jaW5nLCB7XG4gICAgICAgICAgICBwYXNzaXZlOiBmYWxzZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHRvdWNoV3JhcHBlciA9IGdldE9wdGlvbnMoKS50b3VjaFdyYXBwZXI7XG4gICAgICAgIHRvdWNoV3JhcHBlci5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50cy50b3VjaHN0YXJ0LCB0b3VjaFN0YXJ0SGFuZGxlcik7XG4gICAgICAgIHRvdWNoV3JhcHBlci5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50cy50b3VjaG1vdmUsIHRvdWNoTW92ZUhhbmRsZXIsIHtcbiAgICAgICAgICBwYXNzaXZlOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgICAgdG91Y2hXcmFwcGVyLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRzLnRvdWNoc3RhcnQsIHRvdWNoU3RhcnRIYW5kbGVyKTtcbiAgICAgICAgdG91Y2hXcmFwcGVyLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRzLnRvdWNobW92ZSwgdG91Y2hNb3ZlSGFuZGxlciwge1xuICAgICAgICAgIHBhc3NpdmU6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAqIFJlbW92ZXMgdGhlIGF1dG8gc2Nyb2xsaW5nIGZvciB0b3VjaCBkZXZpY2VzLlxuICAgICovXG5cbiAgICBmdW5jdGlvbiByZW1vdmVUb3VjaEhhbmRsZXIoKSB7XG4gICAgICBpZiAoIWV2ZW50cy50b3VjaG1vdmUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNUb3VjaERldmljZSB8fCBpc1RvdWNoKSB7XG4gICAgICAgIC8vIG5vcm1hbFNjcm9sbEVsZW1lbnRzIHJlcXVpcmVzIGl0IG9mZiAjMjY5MVxuICAgICAgICBpZiAoZ2V0T3B0aW9ucygpLmF1dG9TY3JvbGxpbmcpIHtcbiAgICAgICAgICAkYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50cy50b3VjaG1vdmUsIHRvdWNoTW92ZUhhbmRsZXIsIHtcbiAgICAgICAgICAgIHBhc3NpdmU6IGZhbHNlXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgJGJvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudHMudG91Y2htb3ZlLCBwcmV2ZW50Qm91bmNpbmcsIHtcbiAgICAgICAgICAgIHBhc3NpdmU6IGZhbHNlXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdG91Y2hXcmFwcGVyID0gZ2V0T3B0aW9ucygpLnRvdWNoV3JhcHBlcjtcbiAgICAgICAgdG91Y2hXcmFwcGVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnRzLnRvdWNoc3RhcnQsIHRvdWNoU3RhcnRIYW5kbGVyKTtcbiAgICAgICAgdG91Y2hXcmFwcGVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnRzLnRvdWNobW92ZSwgdG91Y2hNb3ZlSGFuZGxlciwge1xuICAgICAgICAgIHBhc3NpdmU6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICAvKiBEZXRlY3RpbmcgdG91Y2ggZXZlbnRzXG5cbiAgICAqIEFzIHdlIGFyZSBjaGFuZ2luZyB0aGUgdG9wIHByb3BlcnR5IG9mIHRoZSBwYWdlIG9uIHNjcm9sbGluZywgd2UgY2FuIG5vdCB1c2UgdGhlIHRyYWRpdGlvbmFsIHdheSB0byBkZXRlY3QgaXQuXG4gICAgKiBUaGlzIHdheSwgdGhlIHRvdWNoc3RhcnQgYW5kIHRoZSB0b3VjaCBtb3ZlcyBzaG93cyBhbiBzbWFsbCBkaWZmZXJlbmNlIGJldHdlZW4gdGhlbSB3aGljaCBpcyB0aGVcbiAgICAqIHVzZWQgb25lIHRvIGRldGVybWluZSB0aGUgZGlyZWN0aW9uLlxuICAgICovXG5cbiAgICBmdW5jdGlvbiB0b3VjaE1vdmVIYW5kbGVyKGUpIHtcbiAgICAgIHZhciBhY3RpdmVTZWN0aW9uID0gY2xvc2VzdChlLnRhcmdldCwgU0VDVElPTl9TRUwpIHx8IGdldFN0YXRlKCkuYWN0aXZlU2VjdGlvbi5pdGVtO1xuICAgICAgdmFyIGhhc0FjdGl2ZVNlY3Rpb25PdmVyZmxvdyA9IHNjcm9sbE92ZXJmbG93SGFuZGxlci5pc1Njcm9sbGFibGUoZ2V0U3RhdGUoKS5hY3RpdmVTZWN0aW9uKTtcblxuICAgICAgaWYgKGlzUmVhbGx5VG91Y2goZSkpIHtcbiAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgIGlzR3JhYmJpbmc6IHRydWUsXG4gICAgICAgICAgaXNVc2luZ1doZWVsOiBmYWxzZVxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoZ2V0T3B0aW9ucygpLmF1dG9TY3JvbGxpbmcpIHtcbiAgICAgICAgICBpZiAoIWhhc0FjdGl2ZVNlY3Rpb25PdmVyZmxvdyB8fCBoYXNBY3RpdmVTZWN0aW9uT3ZlcmZsb3cgJiYgIXN0YXRlLmNhblNjcm9sbCkge1xuICAgICAgICAgICAgLy9wcmV2ZW50aW5nIHRoZSBlYXNpbmcgb24gaU9TIGRldmljZXNcbiAgICAgICAgICAgIHByZXZlbnREZWZhdWx0KGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0b3VjaEV2ZW50cyA9IGdldEV2ZW50c1BhZ2UoZSk7XG4gICAgICAgIHRvdWNoRW5kWSA9IHRvdWNoRXZlbnRzLnk7XG4gICAgICAgIHRvdWNoRW5kWCA9IHRvdWNoRXZlbnRzLng7XG4gICAgICAgIHZhciBpc1ZlcnRpY2FsTW92ZW1lbnRFbm91Z2ggPSBNYXRoLmFicyh0b3VjaFN0YXJ0WSAtIHRvdWNoRW5kWSkgPiB3aW4uaW5uZXJIZWlnaHQgLyAxMDAgKiBnZXRPcHRpb25zKCkudG91Y2hTZW5zaXRpdml0eTtcbiAgICAgICAgdmFyIGlzSG9yaXpvbnRhbE1vdmVtZW50RW5vdWdoID0gTWF0aC5hYnModG91Y2hTdGFydFggLSB0b3VjaEVuZFgpID4gZ2V0V2luZG93V2lkdGgoKSAvIDEwMCAqIGdldE9wdGlvbnMoKS50b3VjaFNlbnNpdGl2aXR5O1xuICAgICAgICB2YXIgaXNIb3Jpem9udGFsUHJlZG9taW5hbnRNb3ZlID0gJChTTElERVNfV1JBUFBFUl9TRUwsIGFjdGl2ZVNlY3Rpb24pLmxlbmd0aCAmJiBNYXRoLmFicyh0b3VjaFN0YXJ0WCAtIHRvdWNoRW5kWCkgPiBNYXRoLmFicyh0b3VjaFN0YXJ0WSAtIHRvdWNoRW5kWSk7XG4gICAgICAgIHZhciBkaXJlY3Rpb25IID0gdG91Y2hTdGFydFggPiB0b3VjaEVuZFggPyAncmlnaHQnIDogJ2xlZnQnO1xuICAgICAgICB2YXIgZGlyZWN0aW9uViA9IHRvdWNoU3RhcnRZID4gdG91Y2hFbmRZID8gJ2Rvd24nIDogJ3VwJztcbiAgICAgICAgdmFyIGRpcmVjdGlvbiA9IGlzSG9yaXpvbnRhbFByZWRvbWluYW50TW92ZSA/IGRpcmVjdGlvbkggOiBkaXJlY3Rpb25WO1xuICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgdG91Y2hEaXJlY3Rpb246IGRpcmVjdGlvblxuICAgICAgICB9KTsgLy9pZiBtb3ZlbWVudCBpbiB0aGUgWCBheHlzIGlzIGdyZWF0ZXIgdGhhbiBpbiB0aGUgWSBhbmQgdGhlIGN1cnJlY3Qgc2VjdGlvbiBoYXMgc2xpZGVzLi4uXG5cbiAgICAgICAgaWYgKGlzSG9yaXpvbnRhbFByZWRvbWluYW50TW92ZSkge1xuICAgICAgICAgIC8vaXMgdGhlIG1vdmVtZW50IGdyZWF0ZXIgdGhhbiB0aGUgbWluaW11bSByZXNpc3RhbmNlIHRvIHNjcm9sbD9cbiAgICAgICAgICBpZiAoIXN0YXRlLnNsaWRlTW92aW5nICYmIGlzSG9yaXpvbnRhbE1vdmVtZW50RW5vdWdoKSB7XG4gICAgICAgICAgICBpZiAodG91Y2hTdGFydFggPiB0b3VjaEVuZFgpIHtcbiAgICAgICAgICAgICAgaWYgKGdldElzU2Nyb2xsQWxsb3dlZCgpLm0ucmlnaHQpIHtcbiAgICAgICAgICAgICAgICBFdmVudEVtaXR0ZXIuZW1pdCgnbW92ZVNsaWRlUmlnaHQnLCB7XG4gICAgICAgICAgICAgICAgICBzZWN0aW9uOiBhY3RpdmVTZWN0aW9uXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGlmIChnZXRJc1Njcm9sbEFsbG93ZWQoKS5tLmxlZnQpIHtcbiAgICAgICAgICAgICAgICBFdmVudEVtaXR0ZXIuZW1pdCgnbW92ZVNsaWRlTGVmdCcsIHtcbiAgICAgICAgICAgICAgICAgIHNlY3Rpb246IGFjdGl2ZVNlY3Rpb25cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSAvL3ZlcnRpY2FsIHNjcm9sbGluZyAob25seSB3aGVuIGF1dG9TY3JvbGxpbmcgaXMgZW5hYmxlZClcbiAgICAgICAgZWxzZSBpZiAoZ2V0T3B0aW9ucygpLmF1dG9TY3JvbGxpbmcgJiYgc3RhdGUuY2FuU2Nyb2xsKSB7XG4gICAgICAgICAgLy9pcyB0aGUgbW92ZW1lbnQgZ3JlYXRlciB0aGFuIHRoZSBtaW5pbXVtIHJlc2lzdGFuY2UgdG8gc2Nyb2xsP1xuICAgICAgICAgIGlmIChpc1ZlcnRpY2FsTW92ZW1lbnRFbm91Z2gpIHtcbiAgICAgICAgICAgIHNjcm9sbGluZyhkaXJlY3Rpb25WKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgKiBBcyBJRSA+PSAxMCBmaXJlcyBib3RoIHRvdWNoIGFuZCBtb3VzZSBldmVudHMgd2hlbiB1c2luZyBhIG1vdXNlIGluIGEgdG91Y2hzY3JlZW5cbiAgICAqIHRoaXMgd2F5IHdlIG1ha2Ugc3VyZSB0aGF0IGlzIHJlYWxseSBhIHRvdWNoIGV2ZW50IHdoYXQgSUUgaXMgZGV0ZWN0aW5nLlxuICAgICovXG5cblxuICAgIGZ1bmN0aW9uIGlzUmVhbGx5VG91Y2goZSkge1xuICAgICAgLy9pZiBpcyBub3QgSUUgICB8fCAgSUUgaXMgZGV0ZWN0aW5nIGB0b3VjaGAgb3IgYHBlbmBcbiAgICAgIHJldHVybiB0eXBlb2YgZS5wb2ludGVyVHlwZSA9PT0gJ3VuZGVmaW5lZCcgfHwgZS5wb2ludGVyVHlwZSAhPSAnbW91c2UnO1xuICAgIH1cbiAgICAvKipcbiAgICAqIEhhbmRsZXIgZm9yIHRoZSB0b3VjaCBzdGFydCBldmVudC5cbiAgICAqL1xuXG5cbiAgICBmdW5jdGlvbiB0b3VjaFN0YXJ0SGFuZGxlcihlKSB7XG4gICAgICAvL3N0b3BwaW5nIHRoZSBhdXRvIHNjcm9sbCB0byBhZGp1c3QgdG8gYSBzZWN0aW9uXG4gICAgICBpZiAoZ2V0T3B0aW9ucygpLmZpdFRvU2VjdGlvbikge1xuICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgYWN0aXZlQW5pbWF0aW9uOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzUmVhbGx5VG91Y2goZSkpIHtcbiAgICAgICAgdmFyIHRvdWNoRXZlbnRzID0gZ2V0RXZlbnRzUGFnZShlKTtcbiAgICAgICAgdG91Y2hTdGFydFkgPSB0b3VjaEV2ZW50cy55O1xuICAgICAgICB0b3VjaFN0YXJ0WCA9IHRvdWNoRXZlbnRzLng7XG4gICAgICB9XG5cbiAgICAgIHdpbmRvd0FkZEV2ZW50KCd0b3VjaGVuZCcsIHRvdWNoRW5kSGFuZGxlcik7XG4gICAgfVxuICAgIC8qKlxuICAgICogSGFuZGxlciBmb3IgdGhlIHRvdWNoIGVuZCBldmVudC5cbiAgICAqL1xuXG5cbiAgICBmdW5jdGlvbiB0b3VjaEVuZEhhbmRsZXIoKSB7XG4gICAgICB3aW5kb3dSZW1vdmVFdmVudCgndG91Y2hlbmQnLCB0b3VjaEVuZEhhbmRsZXIpO1xuICAgICAgc2V0U3RhdGUoe1xuICAgICAgICBpc0dyYWJiaW5nOiBmYWxzZVxuICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICogR2V0cyB0aGUgcGFnZVggYW5kIHBhZ2VZIHByb3BlcnRpZXMgZGVwZW5kaW5nIG9uIHRoZSBicm93c2VyLlxuICAgICogaHR0cHM6Ly9naXRodWIuY29tL2FsdmFyb3RyaWdvL2Z1bGxQYWdlLmpzL2lzc3Vlcy8xOTQjaXNzdWVjb21tZW50LTM0MDY5ODU0XG4gICAgKi9cblxuXG4gICAgZnVuY3Rpb24gZ2V0RXZlbnRzUGFnZShlKSB7XG4gICAgICB2YXIgZXZlbnRzID0ge307XG4gICAgICBldmVudHMueSA9IHR5cGVvZiBlLnBhZ2VZICE9PSAndW5kZWZpbmVkJyAmJiAoZS5wYWdlWSB8fCBlLnBhZ2VYKSA/IGUucGFnZVkgOiBlLnRvdWNoZXNbMF0ucGFnZVk7XG4gICAgICBldmVudHMueCA9IHR5cGVvZiBlLnBhZ2VYICE9PSAndW5kZWZpbmVkJyAmJiAoZS5wYWdlWSB8fCBlLnBhZ2VYKSA/IGUucGFnZVggOiBlLnRvdWNoZXNbMF0ucGFnZVg7IC8vaW4gdG91Y2ggZGV2aWNlcyB3aXRoIHNjcm9sbEJhcjp0cnVlLCBlLnBhZ2VZIGlzIGRldGVjdGVkLCBidXQgd2UgaGF2ZSB0byBkZWFsIHdpdGggdG91Y2ggZXZlbnRzLiAjMTAwOFxuXG4gICAgICBpZiAoaXNUb3VjaCAmJiBpc1JlYWxseVRvdWNoKGUpICYmIGdldE9wdGlvbnMoKS5zY3JvbGxCYXIgJiYgdHlwZW9mIGUudG91Y2hlcyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgZXZlbnRzLnkgPSBlLnRvdWNoZXNbMF0ucGFnZVk7XG4gICAgICAgIGV2ZW50cy54ID0gZS50b3VjaGVzWzBdLnBhZ2VYO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZXZlbnRzO1xuICAgIH1cbiAgICAvKlxuICAgICogUmV0dXJucyBhbmQgb2JqZWN0IHdpdGggTWljcm9zb2Z0IHBvaW50ZXJzIChmb3IgSUU8MTEgYW5kIGZvciBJRSA+PSAxMSlcbiAgICAqIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9kbjMwNDg4Nih2PXZzLjg1KS5hc3B4XG4gICAgKi9cblxuXG4gICAgZnVuY3Rpb24gZ2V0TVNQb2ludGVyKCkge1xuICAgICAgdmFyIHBvaW50ZXI7IC8vSUUgPj0gMTEgJiByZXN0IG9mIGJyb3dzZXJzXG5cbiAgICAgIGlmICh3aW4uUG9pbnRlckV2ZW50KSB7XG4gICAgICAgIHBvaW50ZXIgPSB7XG4gICAgICAgICAgZG93bjogJ3BvaW50ZXJkb3duJyxcbiAgICAgICAgICBtb3ZlOiAncG9pbnRlcm1vdmUnXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwb2ludGVyO1xuICAgIH1cbiAgICAvKlxuICAgICogUHJldmVudGluZyBib3VuY2luZyBpbiBpT1MgIzIyODVcbiAgICAqL1xuXG5cbiAgICBmdW5jdGlvbiBwcmV2ZW50Qm91bmNpbmcoZSkge1xuICAgICAgaWYgKGdldE9wdGlvbnMoKS5hdXRvU2Nyb2xsaW5nICYmIGlzUmVhbGx5VG91Y2goZSkgJiYgZ2V0SXNTY3JvbGxBbGxvd2VkKCkubS51cCkge1xuICAgICAgICAvL3ByZXZlbnRpbmcgdGhlIGVhc2luZyBvbiBpT1MgZGV2aWNlc1xuICAgICAgICBpZiAoIXN0YXRlLmNhblNjcm9sbCkge1xuICAgICAgICAgIHByZXZlbnREZWZhdWx0KGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgRlAubW92ZVNsaWRlTGVmdCA9IG1vdmVTbGlkZUxlZnQ7XG4gICAgRlAubW92ZVNsaWRlUmlnaHQgPSBtb3ZlU2xpZGVSaWdodDtcbiAgICAvKipcbiAgICAqIFNsaWRlcyBhIHNsaWRlciB0byB0aGUgZ2l2ZW4gZGlyZWN0aW9uLlxuICAgICogT3B0aW9uYWwgYHNlY3Rpb25gIHBhcmFtLlxuICAgICovXG5cbiAgICBmdW5jdGlvbiBtb3ZlU2xpZGUoZGlyZWN0aW9uLCBzZWN0aW9uKSB7XG4gICAgICB2YXIgYWN0aXZlU2VjdGlvbkl0ZW0gPSBzZWN0aW9uID09IG51bGwgPyBnZXRTdGF0ZSgpLmFjdGl2ZVNlY3Rpb24uaXRlbSA6IHNlY3Rpb247XG4gICAgICB2YXIgYWN0aXZlU2VjdGlvbiA9IGdldFBhbmVsQnlFbGVtZW50KHN0YXRlLnNlY3Rpb25zLCBhY3RpdmVTZWN0aW9uSXRlbSk7XG4gICAgICB2YXIgc2xpZGVzID0gJChTTElERVNfV1JBUFBFUl9TRUwsIGFjdGl2ZVNlY3Rpb25JdGVtKVswXTsgLy8gbW9yZSB0aGFuIG9uZSBzbGlkZSBuZWVkZWQgYW5kIG5vdGhpbmcgc2hvdWxkIGJlIHNsaWRpbmdcblxuICAgICAgaWYgKHNsaWRlcyA9PSBudWxsIHx8IHN0YXRlLnNsaWRlTW92aW5nIHx8IGFjdGl2ZVNlY3Rpb24uc2xpZGVzLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgY3VycmVudFNsaWRlID0gYWN0aXZlU2VjdGlvbi5hY3RpdmVTbGlkZTtcbiAgICAgIHZhciBkZXN0aW55ID0gZGlyZWN0aW9uID09PSAnbGVmdCcgPyBjdXJyZW50U2xpZGUucHJldigpIDogY3VycmVudFNsaWRlLm5leHQoKTsgLy9pc24ndCB0aGVyZSBhIG5leHQgc2xpZGUgaW4gdGhlIHNlY3VlbmNlP1xuXG4gICAgICBpZiAoIWRlc3RpbnkpIHtcbiAgICAgICAgLy9yZXNwZWN0IGxvb3BIb3Jpem9udGFsIHNldHRpbmdcbiAgICAgICAgaWYgKCFnZXRPcHRpb25zKCkubG9vcEhvcml6b250YWwpIHJldHVybjtcbiAgICAgICAgZGVzdGlueSA9IGRpcmVjdGlvbiA9PT0gJ2xlZnQnID8gZ2V0TGFzdChhY3RpdmVTZWN0aW9uLnNsaWRlcykgOiBhY3RpdmVTZWN0aW9uLnNsaWRlc1swXTtcbiAgICAgIH1cblxuICAgICAgc2V0U3RhdGUoe1xuICAgICAgICBzbGlkZU1vdmluZzogIUZQLnRlc3QuaXNUZXN0aW5nXG4gICAgICB9KTtcbiAgICAgIGxhbmRzY2FwZVNjcm9sbChzbGlkZXMsIGRlc3RpbnkuaXRlbSwgZGlyZWN0aW9uKTtcbiAgICB9XG4gICAgLyoqXG4gICAgKiBTbGlkZXMgbGVmdCB0aGUgc2xpZGVyIG9mIHRoZSBhY3RpdmUgc2VjdGlvbi5cbiAgICAqIE9wdGlvbmFsIGBzZWN0aW9uYCBwYXJhbS5cbiAgICAqL1xuXG4gICAgZnVuY3Rpb24gbW92ZVNsaWRlTGVmdChzZWN0aW9uKSB7XG4gICAgICBtb3ZlU2xpZGUoJ2xlZnQnLCBzZWN0aW9uKTtcbiAgICB9XG4gICAgLyoqXG4gICAgKiBTbGlkZXMgcmlnaHQgdGhlIHNsaWRlciBvZiB0aGUgYWN0aXZlIHNlY3Rpb24uXG4gICAgKiBPcHRpb25hbCBgc2VjdGlvbmAgcGFyYW0uXG4gICAgKi9cblxuICAgIGZ1bmN0aW9uIG1vdmVTbGlkZVJpZ2h0KHNlY3Rpb24pIHtcbiAgICAgIG1vdmVTbGlkZSgncmlnaHQnLCBzZWN0aW9uKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEdldHMgYSBzZWN0aW9uIGJ5IGl0cyBhbmNob3IgLyBpbmRleFxuICAgICovXG5cbiAgICBmdW5jdGlvbiBnZXRTZWN0aW9uQnlBbmNob3Ioc2VjdGlvbkFuY2hvcikge1xuICAgICAgdmFyIHNlY3Rpb24gPSBnZXRTdGF0ZSgpLnNlY3Rpb25zLmZpbHRlcihmdW5jdGlvbiAoc2VjdGlvbikge1xuICAgICAgICByZXR1cm4gc2VjdGlvbi5hbmNob3IgPT09IHNlY3Rpb25BbmNob3I7XG4gICAgICB9KVswXTtcblxuICAgICAgaWYgKCFzZWN0aW9uKSB7XG4gICAgICAgIHZhciBzZWN0aW9uSW5kZXggPSB0eXBlb2Ygc2VjdGlvbkFuY2hvciAhPT0gJ3VuZGVmaW5lZCcgPyBzZWN0aW9uQW5jaG9yIC0gMSA6IDA7XG4gICAgICAgIHNlY3Rpb24gPSBnZXRTdGF0ZSgpLnNlY3Rpb25zW3NlY3Rpb25JbmRleF07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzZWN0aW9uO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogU2Nyb2xscyB0aGUgc2xpZGVyIHRvIHRoZSBnaXZlbiBzbGlkZSBkZXN0aW5hdGlvbiBmb3IgdGhlIGdpdmVuIHNlY3Rpb25cbiAgICAqL1xuXG4gICAgZnVuY3Rpb24gc2Nyb2xsU2xpZGVyKHNsaWRlRWxlbSkge1xuICAgICAgaWYgKHNsaWRlRWxlbSAhPSBudWxsKSB7XG4gICAgICAgIGxhbmRzY2FwZVNjcm9sbChjbG9zZXN0KHNsaWRlRWxlbSwgU0xJREVTX1dSQVBQRVJfU0VMKSwgc2xpZGVFbGVtKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAqIFNjcm9sbHMgdG8gdGhlIGdpdmVuIHNlY3Rpb24gYW5kIHNsaWRlIGFuY2hvcnNcbiAgICAqL1xuXG4gICAgZnVuY3Rpb24gc2Nyb2xsUGFnZUFuZFNsaWRlKHNlY3Rpb25BbmNob3IsIHNsaWRlQW5jaG9yKSB7XG4gICAgICB2YXIgc2VjdGlvbiA9IGdldFNlY3Rpb25CeUFuY2hvcihzZWN0aW9uQW5jaG9yKTsgLy9kbyBub3RoaW5nIGlmIHRoZXJlJ3Mgbm8gc2VjdGlvbiB3aXRoIHRoZSBnaXZlbiBhbmNob3IgbmFtZVxuXG4gICAgICBpZiAoc2VjdGlvbiA9PSBudWxsKSByZXR1cm47XG4gICAgICB2YXIgc2xpZGVFbGVtID0gZ2V0U2xpZGVCeUFuY2hvcihzbGlkZUFuY2hvciwgc2VjdGlvbik7IC8vd2UgbmVlZCB0byBzY3JvbGwgdG8gdGhlIHNlY3Rpb24gYW5kIHRoZW4gdG8gdGhlIHNsaWRlXG5cbiAgICAgIGlmIChzZWN0aW9uLmFuY2hvciAhPT0gc3RhdGUubGFzdFNjcm9sbGVkRGVzdGlueSAmJiAhaGFzQ2xhc3Moc2VjdGlvbi5pdGVtLCBBQ1RJVkUpKSB7XG4gICAgICAgIHNjcm9sbFBhZ2Uoc2VjdGlvbiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHNjcm9sbFNsaWRlcihzbGlkZUVsZW0pO1xuICAgICAgICB9KTtcbiAgICAgIH0gLy9pZiB3ZSB3ZXJlIGFscmVhZHkgaW4gdGhlIHNlY3Rpb25cbiAgICAgIGVsc2Uge1xuICAgICAgICBzY3JvbGxTbGlkZXIoc2xpZGVFbGVtKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgKiBHZXRzIGEgc2xpZGUgaW5zaWRlIGEgZ2l2ZW4gc2VjdGlvbiBieSBpdHMgYW5jaG9yIC8gaW5kZXhcbiAgICAqL1xuXG4gICAgZnVuY3Rpb24gZ2V0U2xpZGVCeUFuY2hvcihzbGlkZUFuY2hvciwgc2VjdGlvbikge1xuICAgICAgdmFyIHNsaWRlID0gc2VjdGlvbi5zbGlkZXMuZmlsdGVyKGZ1bmN0aW9uIChzbGlkZSkge1xuICAgICAgICByZXR1cm4gc2xpZGUuYW5jaG9yID09PSBzbGlkZUFuY2hvcjtcbiAgICAgIH0pWzBdO1xuXG4gICAgICBpZiAoc2xpZGUgPT0gbnVsbCkge1xuICAgICAgICBzbGlkZUFuY2hvciA9IHR5cGVvZiBzbGlkZUFuY2hvciAhPT0gJ3VuZGVmaW5lZCcgPyBzbGlkZUFuY2hvciA6IDA7XG4gICAgICAgIHNsaWRlID0gc2VjdGlvbi5zbGlkZXNbc2xpZGVBbmNob3JdO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc2xpZGUgPyBzbGlkZS5pdGVtIDogbnVsbDtcbiAgICB9XG5cbiAgICBGUC5tb3ZlVG8gPSBtb3ZlVG8kMTtcbiAgICAvKipcbiAgICAqIE1vdmVzIHRoZSBwYWdlIHRvIHRoZSBnaXZlbiBzZWN0aW9uIGFuZCBzbGlkZS5cbiAgICAqIEFuY2hvcnMgb3IgaW5kZXggcG9zaXRpb25zIGNhbiBiZSB1c2VkIGFzIHBhcmFtcy5cbiAgICAqL1xuXG4gICAgZnVuY3Rpb24gbW92ZVRvJDEoc2VjdGlvbkFuY2hvciwgc2xpZGVBbmNob3IpIHtcbiAgICAgIHZhciBkZXN0aW55ID0gZ2V0U2VjdGlvbkJ5QW5jaG9yKHNlY3Rpb25BbmNob3IpO1xuXG4gICAgICBpZiAodHlwZW9mIHNsaWRlQW5jaG9yICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBzY3JvbGxQYWdlQW5kU2xpZGUoc2VjdGlvbkFuY2hvciwgc2xpZGVBbmNob3IpO1xuICAgICAgfSBlbHNlIGlmIChkZXN0aW55ICE9IG51bGwpIHtcbiAgICAgICAgc2Nyb2xsUGFnZShkZXN0aW55KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvL0B0cy1jaGVja1xuICAgIHZhciBnX2NvbnRyb2xQcmVzc2VkO1xuICAgIHZhciBnX2tleWRvd25JZDtcbiAgICBFdmVudEVtaXR0ZXIub24oJ2JpbmRFdmVudHMnLCBiaW5kRXZlbnRzJDgpO1xuXG4gICAgZnVuY3Rpb24gYmluZEV2ZW50cyQ4KCkge1xuICAgICAgLy93aGVuIG9wZW5pbmcgYSBuZXcgdGFiIChjdHJsICsgdCksIGBjb250cm9sYCB3b24ndCBiZSBwcmVzc2VkIHdoZW4gY29taW5nIGJhY2suXG4gICAgICB3aW5kb3dBZGRFdmVudCgnYmx1cicsIGJsdXJIYW5kbGVyKTsgLy9TbGlkaW5nIHdpdGggYXJyb3cga2V5cywgYm90aCwgdmVydGljYWwgYW5kIGhvcml6b250YWxcblxuICAgICAgZG9jQWRkRXZlbnQoJ2tleWRvd24nLCBrZXlkb3duSGFuZGxlcik7IC8vIGZvciBmaXRUb1NlY3Rpb246dHJ1ZVxuXG4gICAgICAkYm9keS5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgb25Cb2R5Q2xpY2spOyAvL3RvIHByZXZlbnQgc2Nyb2xsaW5nIHdoaWxlIHpvb21pbmdcblxuICAgICAgZG9jQWRkRXZlbnQoJ2tleXVwJywga2V5VXBIYW5kbGVyKTtcbiAgICAgIEV2ZW50RW1pdHRlci5vbignb25EZXN0cm95Jywgb25EZXN0cm95JDUpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uRGVzdHJveSQ1KCkge1xuICAgICAgY2xlYXJUaW1lb3V0KGdfa2V5ZG93bklkKTtcbiAgICAgIGRvY1JlbW92ZUV2ZW50KCdrZXlkb3duJywga2V5ZG93bkhhbmRsZXIpO1xuICAgICAgZG9jUmVtb3ZlRXZlbnQoJ2tleXVwJywga2V5VXBIYW5kbGVyKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0luc2lkZUlucHV0KCkge1xuICAgICAgdmFyIGFjdGl2ZUVsZW1lbnQgPSBkb2MuYWN0aXZlRWxlbWVudDtcbiAgICAgIHJldHVybiBtYXRjaGVzKGFjdGl2ZUVsZW1lbnQsICd0ZXh0YXJlYScpIHx8IG1hdGNoZXMoYWN0aXZlRWxlbWVudCwgJ2lucHV0JykgfHwgbWF0Y2hlcyhhY3RpdmVFbGVtZW50LCAnc2VsZWN0JykgfHwgZ2V0QXR0cihhY3RpdmVFbGVtZW50LCAnY29udGVudEVkaXRhYmxlJykgPT0gXCJ0cnVlXCIgfHwgZ2V0QXR0cihhY3RpdmVFbGVtZW50LCAnY29udGVudEVkaXRhYmxlJykgPT0gJyc7XG4gICAgfSAvL1NsaWRpbmcgd2l0aCBhcnJvdyBrZXlzLCBib3RoLCB2ZXJ0aWNhbCBhbmQgaG9yaXpvbnRhbFxuXG5cbiAgICBmdW5jdGlvbiBrZXlkb3duSGFuZGxlcihlKSB7XG4gICAgICBjbGVhclRpbWVvdXQoZ19rZXlkb3duSWQpO1xuICAgICAgdmFyIGtleUNvZGUgPSBlLmtleUNvZGU7XG4gICAgICB2YXIgaXNQcmVzc2luZ0hvcml6b250YWxBcnJvd3MgPSBbMzcsIDM5XS5pbmRleE9mKGtleUNvZGUpID4gLTE7XG4gICAgICB2YXIgY2FuU2Nyb2xsV2l0aEtleWJvYXJkID0gZ2V0T3B0aW9ucygpLmF1dG9TY3JvbGxpbmcgfHwgaXNQcmVzc2luZ0hvcml6b250YWxBcnJvd3M7IC8vdGFiP1xuXG4gICAgICBpZiAoa2V5Q29kZSA9PT0gOSkge1xuICAgICAgICBvblRhYihlKTtcbiAgICAgIH0gZWxzZSBpZiAoIWlzSW5zaWRlSW5wdXQoKSAmJiBnZXRPcHRpb25zKCkua2V5Ym9hcmRTY3JvbGxpbmcgJiYgY2FuU2Nyb2xsV2l0aEtleWJvYXJkKSB7XG4gICAgICAgIGdfY29udHJvbFByZXNzZWQgPSBlLmN0cmxLZXk7XG4gICAgICAgIGdfa2V5ZG93bklkID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgb25rZXlkb3duKGUpO1xuICAgICAgICB9LCAwKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgKiBLZXlkb3duIGV2ZW50XG4gICAgKi9cblxuXG4gICAgZnVuY3Rpb24gb25rZXlkb3duKGUpIHtcbiAgICAgIHZhciBzaGlmdFByZXNzZWQgPSBlLnNoaWZ0S2V5O1xuICAgICAgdmFyIGFjdGl2ZUVsZW1lbnQgPSBkb2MuYWN0aXZlRWxlbWVudDtcbiAgICAgIHZhciBpc01lZGlhRm9jdXNlZCA9IG1hdGNoZXMoYWN0aXZlRWxlbWVudCwgJ3ZpZGVvJykgfHwgbWF0Y2hlcyhhY3RpdmVFbGVtZW50LCAnYXVkaW8nKTtcbiAgICAgIHZhciBpc1Njcm9sbGVkID0ge1xuICAgICAgICB1cDogc2Nyb2xsT3ZlcmZsb3dIYW5kbGVyLmlzU2Nyb2xsZWQoJ3VwJywgZ2V0U3RhdGUoKS5hY3RpdmVTZWN0aW9uLml0ZW0pLFxuICAgICAgICBkb3duOiBzY3JvbGxPdmVyZmxvd0hhbmRsZXIuaXNTY3JvbGxlZCgnZG93bicsIGdldFN0YXRlKCkuYWN0aXZlU2VjdGlvbi5pdGVtKVxuICAgICAgfTtcbiAgICAgIHZhciBpc1VzaW5nSG9yaXpvbnRhbEFycm93S2V5cyA9IFszNywgMzldLmluZGV4T2YoZS5rZXlDb2RlKSA+IC0xO1xuICAgICAgY2FuY2VsRGlyZWN0aW9uS2V5RXZlbnRzKGUpOyAvL2RvIG5vdGhpbmcgaWYgd2UgY2FuIG5vdCBzY3JvbGwgb3Igd2UgYXJlIG5vdCB1c2luZyBob3Jpem90bmFsIGtleSBhcnJvd3MuXG5cbiAgICAgIGlmICghc3RhdGUuY2FuU2Nyb2xsICYmICFpc1VzaW5nSG9yaXpvbnRhbEFycm93S2V5cykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgc2Nyb2xsVHJpZ2dlcjogJ2tleWRvd24nXG4gICAgICB9KTtcblxuICAgICAgc3dpdGNoIChlLmtleUNvZGUpIHtcbiAgICAgICAgLy91cFxuICAgICAgICBjYXNlIDM4OlxuICAgICAgICBjYXNlIDMzOlxuICAgICAgICAgIGlmIChnZXRJc1Njcm9sbEFsbG93ZWQoKS5rLnVwICYmIGlzU2Nyb2xsZWQudXApIHtcbiAgICAgICAgICAgIGlmIChzdGF0ZS5pc0JleW9uZEZ1bGxwYWdlKSB7XG4gICAgICAgICAgICAgIEV2ZW50RW1pdHRlci5lbWl0KCdvbktleURvd24nLCB7XG4gICAgICAgICAgICAgICAgZTogZVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIG1vdmVTZWN0aW9uVXAoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgLy9kb3duXG5cbiAgICAgICAgY2FzZSAzMjpcbiAgICAgICAgICAvL3NwYWNlYmFyXG4gICAgICAgICAgaWYgKHNoaWZ0UHJlc3NlZCAmJiBnZXRJc1Njcm9sbEFsbG93ZWQoKS5rLnVwICYmICFpc01lZGlhRm9jdXNlZCAmJiBpc1Njcm9sbGVkLnVwKSB7XG4gICAgICAgICAgICBtb3ZlU2VjdGlvblVwKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuXG4gICAgICAgIGNhc2UgNDA6XG4gICAgICAgIGNhc2UgMzQ6XG4gICAgICAgICAgaWYgKGdldElzU2Nyb2xsQWxsb3dlZCgpLmsuZG93biAmJiBpc1Njcm9sbGVkLmRvd24pIHtcbiAgICAgICAgICAgIGlmIChzdGF0ZS5pc0JleW9uZEZ1bGxwYWdlKSB7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH0gLy8gc3BhY2UgYmFyP1xuXG5cbiAgICAgICAgICAgIGlmIChlLmtleUNvZGUgIT09IDMyIHx8ICFpc01lZGlhRm9jdXNlZCkge1xuICAgICAgICAgICAgICBtb3ZlU2VjdGlvbkRvd24oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgLy9Ib21lXG5cbiAgICAgICAgY2FzZSAzNjpcbiAgICAgICAgICBpZiAoZ2V0SXNTY3JvbGxBbGxvd2VkKCkuay51cCkge1xuICAgICAgICAgICAgbW92ZVRvJDEoMSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIC8vRW5kXG5cbiAgICAgICAgY2FzZSAzNTpcbiAgICAgICAgICBpZiAoZ2V0SXNTY3JvbGxBbGxvd2VkKCkuay5kb3duKSB7XG4gICAgICAgICAgICBtb3ZlVG8kMShnZXRTdGF0ZSgpLnNlY3Rpb25zLmxlbmd0aCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIC8vbGVmdFxuXG4gICAgICAgIGNhc2UgMzc6XG4gICAgICAgICAgaWYgKGdldElzU2Nyb2xsQWxsb3dlZCgpLmsubGVmdCkge1xuICAgICAgICAgICAgbW92ZVNsaWRlTGVmdCgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICAvL3JpZ2h0XG5cbiAgICAgICAgY2FzZSAzOTpcbiAgICAgICAgICBpZiAoZ2V0SXNTY3JvbGxBbGxvd2VkKCkuay5yaWdodCkge1xuICAgICAgICAgICAgbW92ZVNsaWRlUmlnaHQoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgLy8gZXhpdCB0aGlzIGhhbmRsZXIgZm9yIG90aGVyIGtleXNcbiAgICAgIH1cbiAgICB9IC8vdG8gcHJldmVudCBzY3JvbGxpbmcgd2hpbGUgem9vbWluZ1xuXG5cbiAgICBmdW5jdGlvbiBrZXlVcEhhbmRsZXIoZSkge1xuICAgICAgaWYgKHN0YXRlLmlzV2luZG93Rm9jdXNlZCkge1xuICAgICAgICAvL3RoZSBrZXl1cCBnZXRzIGZpcmVkIG9uIG5ldyB0YWIgY3RybCArIHQgaW4gRmlyZWZveFxuICAgICAgICBnX2NvbnRyb2xQcmVzc2VkID0gZS5jdHJsS2V5O1xuICAgICAgfVxuICAgIH0gLy93aGVuIG9wZW5pbmcgYSBuZXcgdGFiIChjdHJsICsgdCksIGBjb250cm9sYCB3b24ndCBiZSBwcmVzc2VkIHdoZW4gY29taW5nIGJhY2suXG5cblxuICAgIGZ1bmN0aW9uIGJsdXJIYW5kbGVyKCkge1xuICAgICAgc2V0U3RhdGUoe1xuICAgICAgICBpc1dpbmRvd0ZvY3VzZWQ6IGZhbHNlXG4gICAgICB9KTtcbiAgICAgIGdfY29udHJvbFByZXNzZWQgPSBmYWxzZTtcbiAgICB9XG4gICAgLyoqXG4gICAgKiBNYWtlcyBzdXJlIHRoZSB0YWIga2V5IHdpbGwgb25seSBmb2N1cyBlbGVtZW50cyB3aXRoaW4gdGhlIGN1cnJlbnQgc2VjdGlvbi9zbGlkZVxuICAgICogcHJldmVudGluZyB0aGlzIHdheSBmcm9tIGJyZWFraW5nIHRoZSBwYWdlLlxuICAgICogQmFzZWQgb24gXCJNb2RhbHMgYW5kIGtleWJvYXJkIHRyYXBzXCJcbiAgICAqIGZyb20gaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vd2ViL2Z1bmRhbWVudGFscy9hY2Nlc3NpYmlsaXR5L2ZvY3VzL3VzaW5nLXRhYmluZGV4XG4gICAgKi9cblxuXG4gICAgZnVuY3Rpb24gb25UYWIoZSkge1xuICAgICAgdmFyIGlzU2hpZnRQcmVzc2VkID0gZS5zaGlmdEtleTtcbiAgICAgIHZhciBhY3RpdmVFbGVtZW50ID0gZG9jLmFjdGl2ZUVsZW1lbnQ7XG4gICAgICB2YXIgZm9jdXNhYmxlRWxlbWVudHMgPSBnZXRGb2N1c2FibGVzKGdldFNsaWRlT3JTZWN0aW9uKGdldFN0YXRlKCkuYWN0aXZlU2VjdGlvbi5pdGVtKSk7XG5cbiAgICAgIGZ1bmN0aW9uIHByZXZlbnRBbmRGb2N1c0ZpcnN0KGUpIHtcbiAgICAgICAgcHJldmVudERlZmF1bHQoZSk7XG4gICAgICAgIHJldHVybiBmb2N1c2FibGVFbGVtZW50c1swXSA/IGZvY3VzYWJsZUVsZW1lbnRzWzBdLmZvY3VzKCkgOiBudWxsO1xuICAgICAgfSAvL291dHNpZGUgYW55IHNlY3Rpb24gb3Igc2xpZGU/IExldCdzIG5vdCBoaWphY2sgdGhlIHRhYiFcblxuXG4gICAgICBpZiAoaXNGb2N1c091dHNpZGUoZSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSAvL2lzIHRoZXJlIGFuIGVsZW1lbnQgd2l0aCBmb2N1cz9cblxuXG4gICAgICBpZiAoYWN0aXZlRWxlbWVudCkge1xuICAgICAgICBpZiAoY2xvc2VzdChhY3RpdmVFbGVtZW50LCBTRUNUSU9OX0FDVElWRV9TRUwgKyAnLCcgKyBTRUNUSU9OX0FDVElWRV9TRUwgKyAnICcgKyBTTElERV9BQ1RJVkVfU0VMKSA9PSBudWxsKSB7XG4gICAgICAgICAgYWN0aXZlRWxlbWVudCA9IHByZXZlbnRBbmRGb2N1c0ZpcnN0KGUpO1xuICAgICAgICB9XG4gICAgICB9IC8vbm8gZWxlbWVudCBpZiBmb2N1c2VkPyBMZXQncyBmb2N1cyB0aGUgZmlyc3Qgb25lIG9mIHRoZSBzZWN0aW9uL3NsaWRlXG4gICAgICBlbHNlIHtcbiAgICAgICAgcHJldmVudEFuZEZvY3VzRmlyc3QoZSk7XG4gICAgICB9IC8vd2hlbiByZWFjaGVkIHRoZSBmaXJzdCBvciBsYXN0IGZvY3VzYWJsZSBlbGVtZW50IG9mIHRoZSBzZWN0aW9uL3NsaWRlXG4gICAgICAvL3dlIHByZXZlbnQgdGhlIHRhYiBhY3Rpb24gdG8ga2VlcCBpdCBpbiB0aGUgbGFzdCBmb2N1c2FibGUgZWxlbWVudFxuXG5cbiAgICAgIGlmICghaXNTaGlmdFByZXNzZWQgJiYgYWN0aXZlRWxlbWVudCA9PSBmb2N1c2FibGVFbGVtZW50c1tmb2N1c2FibGVFbGVtZW50cy5sZW5ndGggLSAxXSB8fCBpc1NoaWZ0UHJlc3NlZCAmJiBhY3RpdmVFbGVtZW50ID09IGZvY3VzYWJsZUVsZW1lbnRzWzBdKSB7XG4gICAgICAgIHByZXZlbnREZWZhdWx0KGUpO1xuICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAqIEdldHMgYWxsIHRoZSBmb2N1c2FibGUgZWxlbWVudHMgaW5zaWRlIHRoZSBwYXNzZWQgZWxlbWVudC5cbiAgICAqL1xuXG5cbiAgICBmdW5jdGlvbiBnZXRGb2N1c2FibGVzKGVsKSB7XG4gICAgICByZXR1cm4gW10uc2xpY2UuY2FsbCgkKGZvY3VzYWJsZUVsZW1lbnRzU3RyaW5nLCBlbCkpLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICByZXR1cm4gZ2V0QXR0cihpdGVtLCAndGFiaW5kZXgnKSAhPT0gJy0xJyAmJiAvL2FyZSBhbHNvIG5vdCBoaWRkZW4gZWxlbWVudHMgKG9yIHdpdGggaGlkZGVuIHBhcmVudHMpXG4gICAgICAgIGl0ZW0ub2Zmc2V0UGFyZW50ICE9PSBudWxsO1xuICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBmb2N1cyBpcyBvdXRzaWRlIGZ1bGxwYWdlLmpzIHNlY3Rpb25zL3NsaWRlcyBvciBub3QuXG4gICAgKi9cblxuXG4gICAgZnVuY3Rpb24gaXNGb2N1c091dHNpZGUoZSkge1xuICAgICAgdmFyIGFsbEZvY3VzYWJsZXMgPSBnZXRGb2N1c2FibGVzKGRvYyk7XG4gICAgICB2YXIgY3VycmVudEZvY3VzSW5kZXggPSBhbGxGb2N1c2FibGVzLmluZGV4T2YoZG9jLmFjdGl2ZUVsZW1lbnQpO1xuICAgICAgdmFyIGZvY3VzRGVzdGluYXRpb25JbmRleCA9IGUuc2hpZnRLZXkgPyBjdXJyZW50Rm9jdXNJbmRleCAtIDEgOiBjdXJyZW50Rm9jdXNJbmRleCArIDE7XG4gICAgICB2YXIgZm9jdXNEZXN0aW5hdGlvbiA9IGFsbEZvY3VzYWJsZXNbZm9jdXNEZXN0aW5hdGlvbkluZGV4XTtcbiAgICAgIHZhciBkZXN0aW5hdGlvbkl0ZW1TbGlkZSA9IGNsb3Nlc3QoZm9jdXNEZXN0aW5hdGlvbiwgU0xJREVfU0VMKTtcbiAgICAgIHZhciBkZXN0aW5hdGlvbkl0ZW1TZWN0aW9uID0gY2xvc2VzdChmb2N1c0Rlc3RpbmF0aW9uLCBTRUNUSU9OX1NFTCk7XG4gICAgICByZXR1cm4gIWRlc3RpbmF0aW9uSXRlbVNsaWRlICYmICFkZXN0aW5hdGlvbkl0ZW1TZWN0aW9uO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNob3VsZENhbmNlbEtleWJvYXJkTmF2aWdhdGlvbihlKSB7XG4gICAgICAvLyBodHRwczovL2tleWNvZGUuaW5mby9mb3IvMzRcbiAgICAgIC8vIDQwID0gYXJyb3cgZG93blxuICAgICAgLy8gMzggPSBhcnJvdyB1cFxuICAgICAgLy8gMzIgPSBzcGFjZWJhclxuICAgICAgLy8gMzMgID0gUGFnZVVwXG4gICAgICAvLyAzNCA9IFBhZ2VEb3duXG4gICAgICB2YXIga2V5Q29udHJvbHMgPSBbNDAsIDM4LCAzMiwgMzMsIDM0XTtcbiAgICAgIHJldHVybiBrZXlDb250cm9scy5pbmRleE9mKGUua2V5Q29kZSkgPiAtMSAmJiAhc3RhdGUuaXNCZXlvbmRGdWxscGFnZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbkJvZHlDbGljayhlKSB7XG4gICAgICBpZiAoIWlzSW5zaWRlSW5wdXQoKSkge1xuICAgICAgICBjYW5jZWxEaXJlY3Rpb25LZXlFdmVudHMoZSk7XG4gICAgICB9XG4gICAgfSAvL3ByZXZlbnRpbmcgdGhlIHNjcm9sbCB3aXRoIGFycm93IGtleXMgJiBzcGFjZWJhciAmIFBhZ2UgVXAgJiBEb3duIGtleXNcblxuXG4gICAgZnVuY3Rpb24gY2FuY2VsRGlyZWN0aW9uS2V5RXZlbnRzKGUpIHtcbiAgICAgIGlmIChzaG91bGRDYW5jZWxLZXlib2FyZE5hdmlnYXRpb24oZSkgJiYgIWNsb3Nlc3QoZS50YXJnZXQsIE9WRVJGTE9XX1NFTCkpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldENvbnRyb2xQcmVzc2VkKCkge1xuICAgICAgcmV0dXJuIGdfY29udHJvbFByZXNzZWQ7XG4gICAgfVxuXG4gICAgdmFyIHByZXZUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgdmFyIHNjcm9sbGluZ3MgPSBbXTtcbiAgICBGUC5zZXRNb3VzZVdoZWVsU2Nyb2xsaW5nID0gc2V0TW91c2VXaGVlbFNjcm9sbGluZztcbiAgICAvKipcbiAgICAqIEFkZHMgb3IgcmVtb3ZlIHRoZSBwb3NzaWJpbGl0eSBvZiBzY3JvbGxpbmcgdGhyb3VnaCBzZWN0aW9ucyBieSB1c2luZyB0aGUgbW91c2Ugd2hlZWwgb3IgdGhlIHRyYWNrcGFkLlxuICAgICovXG5cbiAgICBmdW5jdGlvbiBzZXRNb3VzZVdoZWVsU2Nyb2xsaW5nKHZhbHVlKSB7XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgYWRkTW91c2VXaGVlbEhhbmRsZXIoKTtcbiAgICAgICAgYWRkTWlkZGxlV2hlZWxIYW5kbGVyKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZW1vdmVNb3VzZVdoZWVsSGFuZGxlcigpO1xuICAgICAgICByZW1vdmVNaWRkbGVXaGVlbEhhbmRsZXIoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgKiBBZGRzIHRoZSBhdXRvIHNjcm9sbGluZyBhY3Rpb24gZm9yIHRoZSBtb3VzZSB3aGVlbCBhbmQgdHJhY2twYWQuXG4gICAgKiBBZnRlciB0aGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCwgdGhlIG1vdXNld2hlZWwgYW5kIHRyYWNrcGFkIG1vdmVtZW50cyB3aWxsIHNjcm9sbCB0aHJvdWdoIHNlY3Rpb25zXG4gICAgKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9FdmVudHMvd2hlZWxcbiAgICAqL1xuXG5cbiAgICBmdW5jdGlvbiBhZGRNb3VzZVdoZWVsSGFuZGxlcigpIHtcbiAgICAgIHZhciBwcmVmaXggPSAnJztcblxuICAgICAgdmFyIF9hZGRFdmVudExpc3RlbmVyO1xuXG4gICAgICBpZiAod2luLmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgICAgX2FkZEV2ZW50TGlzdGVuZXIgPSBcImFkZEV2ZW50TGlzdGVuZXJcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF9hZGRFdmVudExpc3RlbmVyID0gXCJhdHRhY2hFdmVudFwiO1xuICAgICAgICBwcmVmaXggPSAnb24nO1xuICAgICAgfSAvLyBkZXRlY3QgYXZhaWxhYmxlIHdoZWVsIGV2ZW50XG5cblxuICAgICAgdmFyIHN1cHBvcnQgPSAnb253aGVlbCcgaW4gZG9jLmNyZWF0ZUVsZW1lbnQoJ2RpdicpID8gJ3doZWVsJyA6IC8vIE1vZGVybiBicm93c2VycyBzdXBwb3J0IFwid2hlZWxcIlxuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgZG9jLm9ubW91c2V3aGVlbCAhPT0gdW5kZWZpbmVkID8gJ21vdXNld2hlZWwnIDogLy8gV2Via2l0IGFuZCBJRSBzdXBwb3J0IGF0IGxlYXN0IFwibW91c2V3aGVlbFwiXG4gICAgICAnRE9NTW91c2VTY3JvbGwnOyAvLyBsZXQncyBhc3N1bWUgdGhhdCByZW1haW5pbmcgYnJvd3NlcnMgYXJlIG9sZGVyIEZpcmVmb3hcblxuICAgICAgdmFyIHBhc3NpdmVFdmVudCA9IGdldFBhc3NpdmVPcHRpb25zSWZQb3NzaWJsZSgpO1xuXG4gICAgICBpZiAoc3VwcG9ydCA9PSAnRE9NTW91c2VTY3JvbGwnKSB7XG4gICAgICAgIGRvY1tfYWRkRXZlbnRMaXN0ZW5lcl0ocHJlZml4ICsgJ01vek1vdXNlUGl4ZWxTY3JvbGwnLCBNb3VzZVdoZWVsSGFuZGxlciwgcGFzc2l2ZUV2ZW50KTtcbiAgICAgIH0gLy9oYW5kbGUgTW96TW91c2VQaXhlbFNjcm9sbCBpbiBvbGRlciBGaXJlZm94XG4gICAgICBlbHNlIHtcbiAgICAgICAgZG9jW19hZGRFdmVudExpc3RlbmVyXShwcmVmaXggKyBzdXBwb3J0LCBNb3VzZVdoZWVsSGFuZGxlciwgcGFzc2l2ZUV2ZW50KTtcbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgKiBCaW5kaW5nIHRoZSBtb3VzZW1vdmUgd2hlbiB0aGUgbW91c2UncyBtaWRkbGUgYnV0dG9uIGlzIHByZXNzZWRcbiAgICAqL1xuXG5cbiAgICBmdW5jdGlvbiBhZGRNaWRkbGVXaGVlbEhhbmRsZXIoKSB7XG4gICAgICBnZXRDb250YWluZXIoKS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBtb3VzZURvd25IYW5kbGVyKTtcbiAgICAgIGdldENvbnRhaW5lcigpLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBtb3VzZVVwSGFuZGxlcik7XG4gICAgfVxuICAgIC8qKlxuICAgICogUmVtb3ZlcyB0aGUgYXV0byBzY3JvbGxpbmcgYWN0aW9uIGZpcmVkIGJ5IHRoZSBtb3VzZSB3aGVlbCBhbmQgdHJhY2twYWQuXG4gICAgKiBBZnRlciB0aGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCwgdGhlIG1vdXNld2hlZWwgYW5kIHRyYWNrcGFkIG1vdmVtZW50cyB3b24ndCBzY3JvbGwgdGhyb3VnaCBzZWN0aW9ucy5cbiAgICAqL1xuXG5cbiAgICBmdW5jdGlvbiByZW1vdmVNb3VzZVdoZWVsSGFuZGxlcigpIHtcbiAgICAgIGlmIChkb2MuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICBkb2NSZW1vdmVFdmVudCgnbW91c2V3aGVlbCcsIE1vdXNlV2hlZWxIYW5kbGVyLCBmYWxzZSk7IC8vSUU5LCBDaHJvbWUsIFNhZmFyaSwgT3BlclxuXG4gICAgICAgIGRvY1JlbW92ZUV2ZW50KCd3aGVlbCcsIE1vdXNlV2hlZWxIYW5kbGVyLCBmYWxzZSk7IC8vRmlyZWZveFxuXG4gICAgICAgIGRvY1JlbW92ZUV2ZW50KCdNb3pNb3VzZVBpeGVsU2Nyb2xsJywgTW91c2VXaGVlbEhhbmRsZXIsIGZhbHNlKTsgLy9vbGQgRmlyZWZveFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBkb2MuZGV0YWNoRXZlbnQoJ29ubW91c2V3aGVlbCcsIE1vdXNlV2hlZWxIYW5kbGVyKTsgLy9JRSA2LzcvOFxuICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAqIFVuYmluZGluZyB0aGUgbW91c2Vtb3ZlIHdoZW4gdGhlIG1vdXNlJ3MgbWlkZGxlIGJ1dHRvbiBpcyByZWxlYXNlZFxuICAgICovXG5cblxuICAgIGZ1bmN0aW9uIHJlbW92ZU1pZGRsZVdoZWVsSGFuZGxlcigpIHtcbiAgICAgIGdldENvbnRhaW5lcigpLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIG1vdXNlRG93bkhhbmRsZXIpO1xuICAgICAgZ2V0Q29udGFpbmVyKCkucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIG1vdXNlVXBIYW5kbGVyKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGV0ZWN0aW5nIG1vdXNld2hlZWwgc2Nyb2xsaW5nXG4gICAgICpcbiAgICAgKiBodHRwOi8vYmxvZ3Muc2l0ZXBvaW50c3RhdGljLmNvbS9leGFtcGxlcy90ZWNoL21vdXNlLXdoZWVsL2luZGV4Lmh0bWxcbiAgICAgKiBodHRwOi8vd3d3LnNpdGVwb2ludC5jb20vaHRtbDUtamF2YXNjcmlwdC1tb3VzZS13aGVlbC9cbiAgICAgKi9cblxuXG4gICAgZnVuY3Rpb24gTW91c2VXaGVlbEhhbmRsZXIoZSkge1xuICAgICAgdmFyIGN1clRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICAgIHZhciBpc05vcm1hbFNjcm9sbCA9IGhhc0NsYXNzKCQoQ09NUExFVEVMWV9TRUwpWzBdLCBOT1JNQUxfU0NST0xMKTtcbiAgICAgIHZhciBpc1Njcm9sbEFsbG93ZWRCZXlvbmRGdWxsUGFnZSA9IGJleW9uZEZ1bGxQYWdlSGFuZGxlcihnZXRDb250YWluZXIoKSwgZSk7XG5cbiAgICAgIGlmICghc3RhdGUuaXNVc2luZ1doZWVsKSB7XG4gICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICBpc0dyYWJiaW5nOiBmYWxzZSxcbiAgICAgICAgICBpc1VzaW5nV2hlZWw6IHRydWUsXG4gICAgICAgICAgdG91Y2hEaXJlY3Rpb246ICdub25lJ1xuICAgICAgICB9KTtcbiAgICAgIH0gLy9pcyBzY3JvbGwgYWxsb3dlZD9cblxuXG4gICAgICBpZiAoIWdldElzU2Nyb2xsQWxsb3dlZCgpLm0uZG93biAmJiAhZ2V0SXNTY3JvbGxBbGxvd2VkKCkubS51cCkge1xuICAgICAgICBwcmV2ZW50RGVmYXVsdChlKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNTY3JvbGxBbGxvd2VkQmV5b25kRnVsbFBhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9IGVsc2UgaWYgKGlzU2Nyb2xsQWxsb3dlZEJleW9uZEZ1bGxQYWdlID09PSBmYWxzZSkge1xuICAgICAgICBwcmV2ZW50RGVmYXVsdChlKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSAvL2F1dG9zY3JvbGxpbmcgYW5kIG5vdCB6b29taW5nP1xuXG5cbiAgICAgIGlmIChnZXRPcHRpb25zKCkuYXV0b1Njcm9sbGluZyAmJiAhZ2V0Q29udHJvbFByZXNzZWQoKSAmJiAhaXNOb3JtYWxTY3JvbGwpIHtcbiAgICAgICAgLy8gY3Jvc3MtYnJvd3NlciB3aGVlbCBkZWx0YVxuICAgICAgICBlID0gZSB8fCB3aW4uZXZlbnQ7XG4gICAgICAgIHZhciB2YWx1ZSA9IGUud2hlZWxEZWx0YSB8fCAtZS5kZWx0YVkgfHwgLWUuZGV0YWlsO1xuICAgICAgICB2YXIgZGVsdGEgPSBNYXRoLm1heCgtMSwgTWF0aC5taW4oMSwgdmFsdWUpKTtcbiAgICAgICAgdmFyIGhvcml6b250YWxEZXRlY3Rpb24gPSB0eXBlb2YgZS53aGVlbERlbHRhWCAhPT0gJ3VuZGVmaW5lZCcgfHwgdHlwZW9mIGUuZGVsdGFYICE9PSAndW5kZWZpbmVkJztcbiAgICAgICAgdmFyIGlzU2Nyb2xsaW5nVmVydGljYWxseSA9IE1hdGguYWJzKGUud2hlZWxEZWx0YVgpIDwgTWF0aC5hYnMoZS53aGVlbERlbHRhKSB8fCBNYXRoLmFicyhlLmRlbHRhWCkgPCBNYXRoLmFicyhlLmRlbHRhWSkgfHwgIWhvcml6b250YWxEZXRlY3Rpb247XG4gICAgICAgIHZhciBkaXJlY3Rpb24gPSBkZWx0YSA8IDAgPyAnZG93bicgOiBkZWx0YSA+IDAgPyAndXAnIDogJ25vbmUnOyAvL0xpbWl0aW5nIHRoZSBhcnJheSB0byAxNTAgKGxldHMgbm90IHdhc3RlIG1lbW9yeSEpXG5cbiAgICAgICAgaWYgKHNjcm9sbGluZ3MubGVuZ3RoID4gMTQ5KSB7XG4gICAgICAgICAgc2Nyb2xsaW5ncy5zaGlmdCgpO1xuICAgICAgICB9IC8va2VlcGluZyByZWNvcmQgb2YgdGhlIHByZXZpb3VzIHNjcm9sbGluZ3NcblxuXG4gICAgICAgIHNjcm9sbGluZ3MucHVzaChNYXRoLmFicyh2YWx1ZSkpOyAvL3ByZXZlbnRpbmcgdG8gc2Nyb2xsIHRoZSBzaXRlIG9uIG1vdXNlIHdoZWVsIHdoZW4gc2Nyb2xsYmFyIGlzIHByZXNlbnRcblxuICAgICAgICBpZiAoZ2V0T3B0aW9ucygpLnNjcm9sbEJhcikge1xuICAgICAgICAgIHByZXZlbnREZWZhdWx0KGUpO1xuICAgICAgICB9IC8vdGltZSBkaWZmZXJlbmNlIGJldHdlZW4gdGhlIGxhc3Qgc2Nyb2xsIGFuZCB0aGUgY3VycmVudCBvbmVcblxuXG4gICAgICAgIHZhciB0aW1lRGlmZiA9IGN1clRpbWUgLSBwcmV2VGltZTtcbiAgICAgICAgcHJldlRpbWUgPSBjdXJUaW1lOyAvL2hhdmVuJ3QgdGhleSBzY3JvbGxlZCBpbiBhIHdoaWxlP1xuICAgICAgICAvLyhlbm91Z2ggdG8gYmUgY29uc2lkZXIgYSBkaWZmZXJlbnQgc2Nyb2xsaW5nIGFjdGlvbiB0byBzY3JvbGwgYW5vdGhlciBzZWN0aW9uKVxuXG4gICAgICAgIGlmICh0aW1lRGlmZiA+IDIwMCkge1xuICAgICAgICAgIC8vZW1wdHlpbmcgdGhlIGFycmF5LCB3ZSBkb250IGNhcmUgYWJvdXQgb2xkIHNjcm9sbGluZ3MgZm9yIG91ciBhdmVyYWdlc1xuICAgICAgICAgIHNjcm9sbGluZ3MgPSBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICB3aGVlbERpcmVjdGlvbjogZGlyZWN0aW9uXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChzdGF0ZS5jYW5TY3JvbGwpIHtcbiAgICAgICAgICB2YXIgYXZlcmFnZUVuZCA9IGdldEF2ZXJhZ2Uoc2Nyb2xsaW5ncywgMTApO1xuICAgICAgICAgIHZhciBhdmVyYWdlTWlkZGxlID0gZ2V0QXZlcmFnZShzY3JvbGxpbmdzLCA3MCk7XG4gICAgICAgICAgdmFyIGlzQWNjZWxlcmF0aW5nID0gYXZlcmFnZUVuZCA+PSBhdmVyYWdlTWlkZGxlOyAvL3RvIGF2b2lkIGRvdWJsZSBzd2lwZXMuLi5cblxuICAgICAgICAgIGlmIChpc0FjY2VsZXJhdGluZyAmJiBpc1Njcm9sbGluZ1ZlcnRpY2FsbHkpIHtcbiAgICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgICAgc2Nyb2xsVHJpZ2dlcjogJ3doZWVsJ1xuICAgICAgICAgICAgfSk7IC8vc2Nyb2xsaW5nIGRvd24/XG5cbiAgICAgICAgICAgIGlmIChkZWx0YSA8IDApIHtcbiAgICAgICAgICAgICAgc2Nyb2xsaW5nKCdkb3duJyk7XG4gICAgICAgICAgICB9IC8vc2Nyb2xsaW5nIHVwP1xuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgIHNjcm9sbGluZygndXAnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmIChnZXRPcHRpb25zKCkuZml0VG9TZWN0aW9uKSB7XG4gICAgICAgIC8vc3RvcHBpbmcgdGhlIGF1dG8gc2Nyb2xsIHRvIGFkanVzdCB0byBhIHNlY3Rpb25cbiAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgIGFjdGl2ZUFuaW1hdGlvbjogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSAvL2JpbmRpbmcgdGhlIG1vdXNlbW92ZSB3aGVuIHRoZSBtb3VzZSdzIG1pZGRsZSBidXR0b24gaXMgcmVsZWFzZWRcblxuXG4gICAgZnVuY3Rpb24gbW91c2VEb3duSGFuZGxlcihlKSB7XG4gICAgICAvL21pZGRsZSBidXR0b25cbiAgICAgIGlmIChlLndoaWNoID09IDIpIHtcbiAgICAgICAgc2V0T2xkUGFnZVkoZS5wYWdlWSk7XG4gICAgICAgIGdldENvbnRhaW5lcigpLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIG1vdXNlTW92ZUhhbmRsZXIpO1xuICAgICAgfVxuICAgIH0gLy91bmJpbmRpbmcgdGhlIG1vdXNlbW92ZSB3aGVuIHRoZSBtb3VzZSdzIG1pZGRsZSBidXR0b24gaXMgcmVsZWFzZWRcblxuXG4gICAgZnVuY3Rpb24gbW91c2VVcEhhbmRsZXIoZSkge1xuICAgICAgLy9taWRkbGUgYnV0dG9uXG4gICAgICBpZiAoZS53aGljaCA9PSAyKSB7XG4gICAgICAgIGdldENvbnRhaW5lcigpLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIG1vdXNlTW92ZUhhbmRsZXIpO1xuICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAqIEFkZHMgb3IgcmVtb3ZlIHRoZSBtb3VzZSB3aGVlbCBoaWphY2tpbmdcbiAgICAqL1xuXG5cbiAgICBmdW5jdGlvbiBzZXRNb3VzZUhpamFjayh2YWx1ZSkge1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIHNldE1vdXNlV2hlZWxTY3JvbGxpbmcodHJ1ZSk7XG4gICAgICAgIGFkZFRvdWNoSGFuZGxlcigpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2V0TW91c2VXaGVlbFNjcm9sbGluZyhmYWxzZSk7XG4gICAgICAgIHJlbW92ZVRvdWNoSGFuZGxlcigpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBnX2NhbkZpcmVNb3VzZUVudGVyTm9ybWFsU2Nyb2xsID0gdHJ1ZTtcbiAgICBFdmVudEVtaXR0ZXIub24oJ2JpbmRFdmVudHMnLCBiaW5kRXZlbnRzJDcpO1xuXG4gICAgZnVuY3Rpb24gYmluZEV2ZW50cyQ3KCkge1xuICAgICAgLyoqXG4gICAgICAqIEFwcGx5aW5nIG5vcm1hbFNjcm9sbCBlbGVtZW50cy5cbiAgICAgICogSWdub3JpbmcgdGhlIHNjcm9sbHMgb3ZlciB0aGUgc3BlY2lmaWVkIHNlbGVjdG9ycy5cbiAgICAgICovXG4gICAgICBpZiAoZ2V0T3B0aW9ucygpLm5vcm1hbFNjcm9sbEVsZW1lbnRzKSB7XG4gICAgICAgIFsnbW91c2VlbnRlcicsICd0b3VjaHN0YXJ0J10uZm9yRWFjaChmdW5jdGlvbiAoZXZlbnROYW1lKSB7XG4gICAgICAgICAgZm9yTW91c2VMZWF2ZU9yVG91Y2goZXZlbnROYW1lLCBmYWxzZSk7XG4gICAgICAgIH0pO1xuICAgICAgICBbJ21vdXNlbGVhdmUnLCAndG91Y2hlbmQnXS5mb3JFYWNoKGZ1bmN0aW9uIChldmVudE5hbWUpIHtcbiAgICAgICAgICBmb3JNb3VzZUxlYXZlT3JUb3VjaChldmVudE5hbWUsIHRydWUpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgRXZlbnRFbWl0dGVyLm9uKCdvbkRlc3Ryb3knLCBvbkRlc3Ryb3kkNCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25EZXN0cm95JDQoKSB7XG4gICAgICBbJ21vdXNlZW50ZXInLCAndG91Y2hzdGFydCcsICdtb3VzZWxlYXZlJywgJ3RvdWNoZW5kJ10uZm9yRWFjaChmdW5jdGlvbiAoZXZlbnROYW1lKSB7XG4gICAgICAgIGRvY1JlbW92ZUV2ZW50KGV2ZW50TmFtZSwgb25Nb3VzZUVudGVyT3JMZWF2ZSwgdHJ1ZSk7IC8vdHJ1ZSBpcyByZXF1aXJlZCFcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZvck1vdXNlTGVhdmVPclRvdWNoKGV2ZW50TmFtZSwgYWxsb3dTY3JvbGxpbmcpIHtcbiAgICAgIC8vYSB3YXkgdG8gcGFzcyBhcmd1bWVudHMgdG8gdGhlIG9uTW91c2VFbnRlck9yTGVhdmUgZnVuY3Rpb25cbiAgICAgIGRvY3VtZW50WydmcF8nICsgZXZlbnROYW1lXSA9IGFsbG93U2Nyb2xsaW5nO1xuICAgICAgZG9jQWRkRXZlbnQoZXZlbnROYW1lLCBvbk1vdXNlRW50ZXJPckxlYXZlLCB0cnVlKTsgLy9jYXB0dXJpbmcgcGhhc2VcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbk1vdXNlRW50ZXJPckxlYXZlKGUpIHtcbiAgICAgIHZhciB0eXBlID0gZS50eXBlO1xuICAgICAgdmFyIGlzSW5zaWRlT25lTm9ybWFsU2Nyb2xsID0gZmFsc2U7IC8vb25Nb3VzZUxlYXZlIHdpbGwgdXNlIHRoZSBkZXN0aW5hdGlvbiB0YXJnZXQsIG5vdCB0aGUgb25lIHdlIGFyZSBtb3ZpbmcgYXdheSBmcm9tXG5cbiAgICAgIHZhciB0YXJnZXQgPSB0eXBlID09PSAnbW91c2VsZWF2ZScgPyBlLnRvRWxlbWVudCB8fCBlLnJlbGF0ZWRUYXJnZXQgOiBlLnRhcmdldDsgLy9jb21pbmcgZnJvbSBjbG9zaW5nIGEgbm9ybWFsU2Nyb2xsRWxlbWVudHMgbW9kYWwgb3IgbW92aW5nIG91dHNpZGUgdmlld3BvcnQ/XG5cbiAgICAgIGlmICh0YXJnZXQgPT0gZG9jdW1lbnQgfHwgIXRhcmdldCkge1xuICAgICAgICBzZXRNb3VzZUhpamFjayh0cnVlKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZSA9PT0gJ3RvdWNoZW5kJykge1xuICAgICAgICBnX2NhbkZpcmVNb3VzZUVudGVyTm9ybWFsU2Nyb2xsID0gZmFsc2U7XG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGdfY2FuRmlyZU1vdXNlRW50ZXJOb3JtYWxTY3JvbGwgPSB0cnVlO1xuICAgICAgICB9LCA4MDApO1xuICAgICAgfSAvL3ByZXZlbnRpbmcgbW91c2VlbnRlciBldmVudCB0byBkbyBhbnl0aGluZyB3aGVuIGNvbWluZyBmcm9tIGEgdG91Y2hFbmQgZXZlbnRcbiAgICAgIC8vZml4aW5nIGlzc3VlICMzNTc2XG5cblxuICAgICAgaWYgKHR5cGUgPT09ICdtb3VzZWVudGVyJyAmJiAhZ19jYW5GaXJlTW91c2VFbnRlck5vcm1hbFNjcm9sbCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBub3JtYWxTZWxlY3RvcnMgPSBnZXRPcHRpb25zKCkubm9ybWFsU2Nyb2xsRWxlbWVudHMuc3BsaXQoJywnKTtcbiAgICAgIG5vcm1hbFNlbGVjdG9ycy5mb3JFYWNoKGZ1bmN0aW9uIChub3JtYWxTZWxlY3Rvcikge1xuICAgICAgICBpZiAoIWlzSW5zaWRlT25lTm9ybWFsU2Nyb2xsKSB7XG4gICAgICAgICAgdmFyIGlzTm9ybWFsU2Nyb2xsVGFyZ2V0ID0gbWF0Y2hlcyh0YXJnZXQsIG5vcm1hbFNlbGVjdG9yKTsgLy9sZWF2aW5nIGEgY2hpbGQgaW5zaWRlIHRoZSBub3JtYWxTY29sbCBlbGVtZW50IGlzIG5vdCBsZWF2aW5nIHRoZSBub3JtYWxTY3JvbGwgIzM2NjFcblxuICAgICAgICAgIHZhciBpc05vcm1hbFNjcm9sbENoaWxkRm9jdXNlZCA9IGNsb3Nlc3QodGFyZ2V0LCBub3JtYWxTZWxlY3Rvcik7XG5cbiAgICAgICAgICBpZiAoaXNOb3JtYWxTY3JvbGxUYXJnZXQgfHwgaXNOb3JtYWxTY3JvbGxDaGlsZEZvY3VzZWQpIHtcbiAgICAgICAgICAgIGlmICghRlAuc2hhcmVkLmlzTm9ybWFsU2Nyb2xsRWxlbWVudCkge1xuICAgICAgICAgICAgICBzZXRNb3VzZUhpamFjayhmYWxzZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIEZQLnNoYXJlZC5pc05vcm1hbFNjcm9sbEVsZW1lbnQgPSB0cnVlO1xuICAgICAgICAgICAgaXNJbnNpZGVPbmVOb3JtYWxTY3JvbGwgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7IC8vbm90IGluc2lkZSBhIHNpbmdsZSBub3JtYWwgc2Nyb2xsIGVsZW1lbnQgYW55bW9yZT9cblxuICAgICAgaWYgKCFpc0luc2lkZU9uZU5vcm1hbFNjcm9sbCAmJiBGUC5zaGFyZWQuaXNOb3JtYWxTY3JvbGxFbGVtZW50KSB7XG4gICAgICAgIHNldE1vdXNlSGlqYWNrKHRydWUpO1xuICAgICAgICBGUC5zaGFyZWQuaXNOb3JtYWxTY3JvbGxFbGVtZW50ID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgRlAuc2lsZW50TW92ZVRvID0gc2lsZW50TW92ZVRvO1xuICAgIC8qKlxuICAgICogTW92ZXMgdGhlIHBhZ2UgdG8gdGhlIGdpdmVuIHNlY3Rpb24gYW5kIHNsaWRlIHdpdGggbm8gYW5pbWF0aW9uLlxuICAgICogQW5jaG9ycyBvciBpbmRleCBwb3NpdGlvbnMgY2FuIGJlIHVzZWQgYXMgcGFyYW1zLlxuICAgICovXG5cbiAgICBmdW5jdGlvbiBzaWxlbnRNb3ZlVG8oc2VjdGlvbkFuY2hvciwgc2xpZGVBbmNob3IpIHtcbiAgICAgIHNldFNjcm9sbGluZ1NwZWVkKDAsICdpbnRlcm5hbCcpO1xuICAgICAgbW92ZVRvJDEoc2VjdGlvbkFuY2hvciwgc2xpZGVBbmNob3IpO1xuICAgICAgc2V0U2Nyb2xsaW5nU3BlZWQoZ2V0T3JpZ2luYWxzKCkuc2Nyb2xsaW5nU3BlZWQsICdpbnRlcm5hbCcpO1xuICAgIH1cblxuICAgIHZhciBwcmV2aW91c0hlaWdodCA9IGdldFdpbmRvd0hlaWdodCgpO1xuICAgIHZhciB3aW5kb3dzV2lkdGggPSBnZXRXaW5kb3dXaWR0aCgpO1xuICAgIHZhciBnX3Jlc2l6ZUlkO1xuICAgIHZhciBnX2lzQ29uc2VjdXRpdmVSZXNpemUgPSBmYWxzZTtcbiAgICB2YXIgZ19yZXNpemVNb2JpbGVIYW5kbGVySWQ7XG4gICAgRlAucmVCdWlsZCA9IHJlQnVpbGQ7XG4gICAgRXZlbnRFbWl0dGVyLm9uKCdiaW5kRXZlbnRzJywgYmluZEV2ZW50cyQ2KTtcblxuICAgIGZ1bmN0aW9uIGJpbmRFdmVudHMkNigpIHtcbiAgICAgIC8vd2hlbiByZXNpemluZyB0aGUgc2l0ZSwgd2UgYWRqdXN0IHRoZSBoZWlnaHRzIG9mIHRoZSBzZWN0aW9ucywgc2xpbVNjcm9sbC4uLlxuICAgICAgd2luZG93QWRkRXZlbnQoJ3Jlc2l6ZScsIHJlc2l6ZUhhbmRsZXIpO1xuICAgICAgRXZlbnRFbWl0dGVyLm9uKCdvbkRlc3Ryb3knLCBvbkRlc3Ryb3kkMyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25EZXN0cm95JDMoKSB7XG4gICAgICBjbGVhclRpbWVvdXQoZ19yZXNpemVJZCk7XG4gICAgICBjbGVhclRpbWVvdXQoZ19yZXNpemVNb2JpbGVIYW5kbGVySWQpO1xuICAgICAgd2luZG93UmVtb3ZlRXZlbnQoJ3Jlc2l6ZScsIHJlc2l6ZUhhbmRsZXIpO1xuICAgIH1cbiAgICAvKlxuICAgICogUmVzaXplIGV2ZW50IGhhbmRsZXIuXG4gICAgKi9cblxuXG4gICAgZnVuY3Rpb24gcmVzaXplSGFuZGxlcigpIHtcbiAgICAgIGlmICghZ19pc0NvbnNlY3V0aXZlUmVzaXplKSB7XG4gICAgICAgIGlmIChnZXRPcHRpb25zKCkuYXV0b1Njcm9sbGluZyAmJiAhZ2V0T3B0aW9ucygpLnNjcm9sbEJhciB8fCAhZ2V0T3B0aW9ucygpLmZpdFRvU2VjdGlvbikge1xuICAgICAgICAgIHNldFNlY3Rpb25zSGVpZ2h0KGdldFdpbmRvd0hlaWdodCgpKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmaXRUb0FjdGl2ZVNlY3Rpb24oKTtcbiAgICAgIGdfaXNDb25zZWN1dGl2ZVJlc2l6ZSA9IHRydWU7IC8vaW4gb3JkZXIgdG8gY2FsbCB0aGUgZnVuY3Rpb25zIG9ubHkgd2hlbiB0aGUgcmVzaXplIGlzIGZpbmlzaGVkXG4gICAgICAvL2h0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNDI5ODYxMi9qcXVlcnktaG93LXRvLWNhbGwtcmVzaXplLWV2ZW50LW9ubHktb25jZS1pdHMtZmluaXNoZWQtcmVzaXppbmcgICAgXG5cbiAgICAgIGNsZWFyVGltZW91dChnX3Jlc2l6ZUlkKTtcbiAgICAgIGdfcmVzaXplSWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy9pc3N1ZSAjMzMzNiBcbiAgICAgICAgLy8oc29tZSBhcHBzIG9yIGJyb3dzZXJzLCBsaWtlIENocm9tZS9GaXJlZm94IGZvciBNb2JpbGUgdGFrZSB0aW1lIHRvIHJlcG9ydCB0aGUgcmVhbCBoZWlnaHQpXG4gICAgICAgIC8vc28gd2UgY2hlY2sgaXQgMyB0aW1lcyB3aXRoIGludGVydmFscyBpbiB0aGF0IGNhc2VcbiAgICAgICAgLy8gZm9yKHZhciBpID0gMDsgaTwgNDsgaSsrKXtcbiAgICAgICAgcmVzaXplQWN0aW9ucygpO1xuICAgICAgICBnX2lzQ29uc2VjdXRpdmVSZXNpemUgPSBmYWxzZTsgLy8gfVxuICAgICAgfSwgNDAwKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmaXRUb0FjdGl2ZVNlY3Rpb24oKSB7XG4gICAgICBpZiAoaXNUb3VjaERldmljZSkge1xuICAgICAgICAvLyBJc3N1ZSAjNDM5MyBhbmQgcHJldmlvdXNseSBpbiB2MywgIzMzMzZcbiAgICAgICAgLy8gKHNvbWUgYXBwcyBvciBicm93c2VycywgbGlrZSBDaHJvbWUvRmlyZWZveCB3aWxsIGRlbGF5IGEgYml0IHRvIHNjcm9sbCBcbiAgICAgICAgLy8gdG8gdGhlIGZvY3VzZWQgaW5wdXRcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyBpKyspIHtcbiAgICAgICAgICBnX3Jlc2l6ZU1vYmlsZUhhbmRsZXJJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIC8vIG9uIEFuZHJvaWQgZGV2aWNlcyB0aGUgYnJvd3NlciBzY3JvbGxzIHRvIHRoZSBmb2N1c2VkIGVsZW1lbnRcbiAgICAgICAgICAgICAgLy8gbWVzc2luZyB1cCB0aGUgd2hvbGUgcGFnZSBzdHJ1Y3R1cmUuIFNvIHdlIG5lZWQgdG8gdXBkYXRlIHRoZVxuICAgICAgICAgICAgICAvLyB0cmFuc2xhdGUzZCB2YWx1ZSB3aGVuIHRoZSBrZXlib2FyZCBzaG93cy9oaWRlc1xuICAgICAgICAgICAgICBpZiAoZ2V0T3B0aW9ucygpLmF1dG9TY3JvbGxpbmcgJiYgIWdldE9wdGlvbnMoKS5zY3JvbGxCYXIpIHtcbiAgICAgICAgICAgICAgICBzaWxlbnRNb3ZlVG8oc3RhdGUuYWN0aXZlU2VjdGlvbi5pbmRleCgpICsgMSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0sIDIwMCAqIGkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICogV2hlbiByZXNpemluZyB0aGUgc2l0ZSwgd2UgYWRqdXN0IHRoZSBoZWlnaHRzIG9mIHRoZSBzZWN0aW9ucywgc2xpbVNjcm9sbC4uLlxuICAgICovXG5cblxuICAgIGZ1bmN0aW9uIHJlc2l6ZUFjdGlvbnMoKSB7XG4gICAgICBzZXRTdGF0ZSh7XG4gICAgICAgIGlzUmVzaXppbmc6IHRydWVcbiAgICAgIH0pO1xuICAgICAgc2V0U2VjdGlvbnNIZWlnaHQoJycpO1xuXG4gICAgICBpZiAoZ2V0T3B0aW9ucygpLmZpdFRvU2VjdGlvbiAmJiAhZ2V0T3B0aW9ucygpLmF1dG9TY3JvbGxpbmcgJiYgIXN0YXRlLmlzQmV5b25kRnVsbHBhZ2UpIHtcbiAgICAgICAgc2V0VmhVbml0cygpO1xuICAgICAgfVxuXG4gICAgICBFdmVudEVtaXR0ZXIuZW1pdCgnY29udGVudENoYW5nZWQnKTtcbiAgICAgIHVwZGF0ZVN0YXRlKCk7IC8vY2hlY2tpbmcgaWYgaXQgbmVlZHMgdG8gZ2V0IHJlc3BvbnNpdmVcblxuICAgICAgcmVzcG9uc2l2ZSgpOyAvLyByZWJ1aWxkIGltbWVkaWF0ZWx5IG9uIHRvdWNoIGRldmljZXNcblxuICAgICAgaWYgKGlzVG91Y2hEZXZpY2UpIHtcbiAgICAgICAgdmFyIGFjdGl2ZUVsZW1lbnQgPSBkb2MuYWN0aXZlRWxlbWVudDsgLy9pZiB0aGUga2V5Ym9hcmQgaXMgTk9UIHZpc2libGVcblxuICAgICAgICBpZiAoIW1hdGNoZXMoYWN0aXZlRWxlbWVudCwgJ3RleHRhcmVhJykgJiYgIW1hdGNoZXMoYWN0aXZlRWxlbWVudCwgJ2lucHV0JykgJiYgIW1hdGNoZXMoYWN0aXZlRWxlbWVudCwgJ3NlbGVjdCcpKSB7XG4gICAgICAgICAgdmFyIGN1cnJlbnRIZWlnaHQgPSBnZXRXaW5kb3dIZWlnaHQoKTsgLy9tYWtpbmcgc3VyZSB0aGUgY2hhbmdlIGluIHRoZSB2aWV3cG9ydCBzaXplIGlzIGVub3VnaCB0byBmb3JjZSBhIHJlYnVpbGQuICgyMCAlIG9mIHRoZSB3aW5kb3cgdG8gYXZvaWQgcHJvYmxlbXMgd2hlbiBoaWRkaW5nIHNjcm9sbCBiYXJzKVxuXG4gICAgICAgICAgaWYgKE1hdGguYWJzKGN1cnJlbnRIZWlnaHQgLSBwcmV2aW91c0hlaWdodCkgPiAyMCAqIE1hdGgubWF4KHByZXZpb3VzSGVpZ2h0LCBjdXJyZW50SGVpZ2h0KSAvIDEwMCkge1xuICAgICAgICAgICAgcmVCdWlsZCh0cnVlKTtcbiAgICAgICAgICAgIHByZXZpb3VzSGVpZ2h0ID0gY3VycmVudEhlaWdodDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFkanVzdFRvTmV3Vmlld3BvcnQoKTtcbiAgICAgIH1cblxuICAgICAgc2V0U3RhdGUoe1xuICAgICAgICBpc1Jlc2l6aW5nOiBmYWxzZVxuICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdoZW4gcmVzaXppbmcgaXMgZmluaXNoZWQsIHdlIGFkanVzdCB0aGUgc2xpZGVzIHNpemVzIGFuZCBwb3NpdGlvbnNcbiAgICAgKi9cblxuXG4gICAgZnVuY3Rpb24gcmVCdWlsZChyZXNpemluZykge1xuICAgICAgaWYgKGhhc0NsYXNzKGdldENvbnRhaW5lcigpLCBERVNUUk9ZRUQpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gLy9ub3RoaW5nIHRvIGRvIGlmIHRoZSBwbHVnaW4gd2FzIGRlc3Ryb3llZFxuICAgICAgLy91cGRhdGluZyBnbG9iYWwgdmFyc1xuXG5cbiAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgaXNSZXNpemluZzogdHJ1ZSxcbiAgICAgICAgd2luZG93c0hlaWdodDogZ2V0V2luZG93SGVpZ2h0KCksXG4gICAgICAgIHdpbmRvd3NXaWR0aDogZ2V0V2luZG93V2lkdGgoKVxuICAgICAgfSk7XG4gICAgICB2YXIgc2VjdGlvbnMgPSBnZXRTdGF0ZSgpLnNlY3Rpb25zO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlY3Rpb25zLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHZhciBzZWN0aW9uID0gc2VjdGlvbnNbaV07XG4gICAgICAgIHZhciBzbGlkZXNXcmFwID0gJChTTElERVNfV1JBUFBFUl9TRUwsIHNlY3Rpb24uaXRlbSlbMF07XG4gICAgICAgIHZhciBzbGlkZXMgPSBzZWN0aW9uLnNsaWRlczsgLy9hZGp1c3RpbmcgdGhlIHBvc2l0aW9uIGZvIHRoZSBGVUxMIFdJRFRIIHNsaWRlcy4uLlxuXG4gICAgICAgIGlmIChzbGlkZXMubGVuZ3RoID4gMSkge1xuICAgICAgICAgIGxhbmRzY2FwZVNjcm9sbChzbGlkZXNXcmFwLCBzZWN0aW9uLmFjdGl2ZVNsaWRlLml0ZW0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChnZXRPcHRpb25zKCkuc2Nyb2xsT3ZlcmZsb3cpIHtcbiAgICAgICAgc2Nyb2xsT3ZlcmZsb3dIYW5kbGVyLm1ha2VTY3JvbGxhYmxlKCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBzZWN0aW9uSW5kZXggPSBnZXRTdGF0ZSgpLmFjdGl2ZVNlY3Rpb24uaW5kZXgoKTtcblxuICAgICAgaWYgKCFzdGF0ZS5pc0JleW9uZEZ1bGxwYWdlKSB7XG4gICAgICAgIC8vaXNuJ3QgaXQgdGhlIGZpcnN0IHNlY3Rpb24/XG4gICAgICAgIGlmIChzZWN0aW9uSW5kZXgpIHtcbiAgICAgICAgICAvL2FkanVzdGluZyB0aGUgcG9zaXRpb24gZm9yIHRoZSBjdXJyZW50IHNlY3Rpb25cbiAgICAgICAgICBzaWxlbnRNb3ZlVG8oc2VjdGlvbkluZGV4ICsgMSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc2V0U3RhdGUoe1xuICAgICAgICBpc1Jlc2l6aW5nOiBmYWxzZVxuICAgICAgfSk7XG5cbiAgICAgIGlmIChpc0Z1bmN0aW9uKGdldE9wdGlvbnMoKS5hZnRlclJlc2l6ZSkgJiYgcmVzaXppbmcpIHtcbiAgICAgICAgZ2V0T3B0aW9ucygpLmFmdGVyUmVzaXplLmNhbGwoZ2V0Q29udGFpbmVyKCksIHdpbi5pbm5lcldpZHRoLCB3aW4uaW5uZXJIZWlnaHQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNGdW5jdGlvbihnZXRPcHRpb25zKCkuYWZ0ZXJSZUJ1aWxkKSAmJiAhcmVzaXppbmcpIHtcbiAgICAgICAgZ2V0T3B0aW9ucygpLmFmdGVyUmVCdWlsZC5jYWxsKGdldENvbnRhaW5lcigpKTtcbiAgICAgIH1cblxuICAgICAgdHJpZ2dlcihnZXRDb250YWluZXIoKSwgJ2FmdGVyUmVidWlsZCcpO1xuICAgIH1cbiAgICAvKipcbiAgICAqIEFkanVzdHMgYSBzZWN0aW9uIHRvIHRoZSB2aWV3cG9ydCBpZiBpdCBoYXMgY2hhbmdlZC5cbiAgICAqL1xuXG5cbiAgICBmdW5jdGlvbiBhZGp1c3RUb05ld1ZpZXdwb3J0KCkge1xuICAgICAgdmFyIG5ld1dpbmRvd0hlaWdodCA9IGdldFdpbmRvd0hlaWdodCgpO1xuICAgICAgdmFyIG5ld1dpbmRvd1dpZHRoID0gZ2V0V2luZG93V2lkdGgoKTtcblxuICAgICAgaWYgKHN0YXRlLndpbmRvd3NIZWlnaHQgIT09IG5ld1dpbmRvd0hlaWdodCB8fCB3aW5kb3dzV2lkdGggIT09IG5ld1dpbmRvd1dpZHRoKSB7XG4gICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICB3aW5kb3dzSGVpZ2h0OiBuZXdXaW5kb3dIZWlnaHRcbiAgICAgICAgfSk7XG4gICAgICAgIHdpbmRvd3NXaWR0aCA9IG5ld1dpbmRvd1dpZHRoO1xuICAgICAgICByZUJ1aWxkKHRydWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldFNlY3Rpb25zSGVpZ2h0KHZhbHVlKSB7XG4gICAgICB2YXIgcHJvcGVydHlWYWx1ZSA9IHZhbHVlID09PSAnJyA/ICcnIDogdmFsdWUgKyAncHgnO1xuICAgICAgZ2V0U3RhdGUoKS5zZWN0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChzZWN0aW9uKSB7XG4gICAgICAgIGNzcyhzZWN0aW9uLml0ZW0sIHtcbiAgICAgICAgICAnaGVpZ2h0JzogcHJvcGVydHlWYWx1ZVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZWZpbmluZyB0aGUgdmFsdWUgaW4gcHggb2YgYSBWSCB1bml0LiAoVXNlZCBmb3IgYXV0b1Njcm9sbGluZzogZmFsc2UpXG4gICAgICogVG8gZml4IHRoZSBoZWlnaHQgaXNzdWUgb24gbW9iaWxlIGRldmljZXMgd2hlbiB1c2luZyBWSCB1bml0cy5cbiAgICAgKiBodHRwczovL2Nzcy10cmlja3MuY29tL3RoZS10cmljay10by12aWV3cG9ydC11bml0cy1vbi1tb2JpbGUvXG4gICAgICovXG5cblxuICAgIGZ1bmN0aW9uIHNldFZoVW5pdHMoKSB7XG4gICAgICBpZiAoIWdldE9wdGlvbnMoKS5hdXRvU2Nyb2xsaW5nIHx8IGdldE9wdGlvbnMoKS5zY3JvbGxCYXIpIHtcbiAgICAgICAgLy8gRmlyc3Qgd2UgZ2V0IHRoZSB2aWV3cG9ydCBoZWlnaHQgYW5kIHdlIG11bHRpcGxlIGl0IGJ5IDElIHRvIGdldCBhIHZhbHVlIGZvciBhIHZoIHVuaXRcbiAgICAgICAgdmFyIHZoID0gd2luLmlubmVySGVpZ2h0ICogMC4wMTsgLy8gVGhlbiB3ZSBzZXQgdGhlIHZhbHVlIGluIHRoZSAtLXZoIGN1c3RvbSBwcm9wZXJ0eSB0byB0aGUgcm9vdCBvZiB0aGUgZG9jdW1lbnRcblxuICAgICAgICBkb2MuZG9jdW1lbnRFbGVtZW50LnN0eWxlLnNldFByb3BlcnR5KCctLXZoJywgXCJcIi5jb25jYXQodmgsIFwicHhcIikpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldEFuY2hvcnNVUkwoKSB7XG4gICAgICB2YXIgc2VjdGlvbjtcbiAgICAgIHZhciBzbGlkZTtcbiAgICAgIHZhciBoYXNoID0gd2luLmxvY2F0aW9uLmhhc2g7XG5cbiAgICAgIGlmIChoYXNoLmxlbmd0aCkge1xuICAgICAgICAvL2dldHRpbmcgdGhlIGFuY2hvciBsaW5rIGluIHRoZSBVUkwgYW5kIGRlbGV0aW5nIHRoZSBgI2BcbiAgICAgICAgdmFyIGFuY2hvcnNQYXJ0cyA9IGhhc2gucmVwbGFjZSgnIycsICcnKS5zcGxpdCgnLycpOyAvL3VzaW5nIC8gZm9yIHZpc3VhbCByZWFzb25zIGFuZCBub3QgYXMgYSBzZWN0aW9uL3NsaWRlIHNlcGFyYXRvciAjMjgwM1xuXG4gICAgICAgIHZhciBpc0Z1bmt5QW5jaG9yID0gaGFzaC5pbmRleE9mKCcjLycpID4gLTE7XG4gICAgICAgIHNlY3Rpb24gPSBpc0Z1bmt5QW5jaG9yID8gJy8nICsgYW5jaG9yc1BhcnRzWzFdIDogZGVjb2RlVVJJQ29tcG9uZW50KGFuY2hvcnNQYXJ0c1swXSk7XG4gICAgICAgIHZhciBzbGlkZUFuY2hvciA9IGlzRnVua3lBbmNob3IgPyBhbmNob3JzUGFydHNbMl0gOiBhbmNob3JzUGFydHNbMV07XG5cbiAgICAgICAgaWYgKHNsaWRlQW5jaG9yICYmIHNsaWRlQW5jaG9yLmxlbmd0aCkge1xuICAgICAgICAgIHNsaWRlID0gZGVjb2RlVVJJQ29tcG9uZW50KHNsaWRlQW5jaG9yKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBzZWN0aW9uOiBzZWN0aW9uLFxuICAgICAgICBzbGlkZTogc2xpZGVcbiAgICAgIH07XG4gICAgfVxuXG4gICAgRlAuc2V0TG9ja0FuY2hvcnMgPSBzZXRMb2NrQW5jaG9ycztcbiAgICBFdmVudEVtaXR0ZXIub24oJ2JpbmRFdmVudHMnLCBiaW5kRXZlbnRzJDUpO1xuXG4gICAgZnVuY3Rpb24gYmluZEV2ZW50cyQ1KCkge1xuICAgICAgLy9kZXRlY3RpbmcgYW55IGNoYW5nZSBvbiB0aGUgVVJMIHRvIHNjcm9sbCB0byB0aGUgZ2l2ZW4gYW5jaG9yIGxpbmtcbiAgICAgIC8vKGEgd2F5IHRvIGRldGVjdCBiYWNrIGhpc3RvcnkgYnV0dG9uIGFzIHdlIHBsYXkgd2l0aCB0aGUgaGFzaGVzIG9uIHRoZSBVUkwpXG4gICAgICB3aW5kb3dBZGRFdmVudCgnaGFzaGNoYW5nZScsIGhhc2hDaGFuZ2VIYW5kbGVyKTtcbiAgICAgIEV2ZW50RW1pdHRlci5vbignb25EZXN0cm95Jywgb25EZXN0cm95JDIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uRGVzdHJveSQyKCkge1xuICAgICAgd2luZG93UmVtb3ZlRXZlbnQoJ2hhc2hjaGFuZ2UnLCBoYXNoQ2hhbmdlSGFuZGxlcik7XG4gICAgfVxuICAgIC8qKlxuICAgICogU2V0cyBsb2NrQW5jaG9yc1xuICAgICovXG5cblxuICAgIGZ1bmN0aW9uIHNldExvY2tBbmNob3JzKHZhbHVlKSB7XG4gICAgICBnZXRPcHRpb25zKCkubG9ja0FuY2hvcnMgPSB2YWx1ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgKiBEZXRlY3RpbmcgYW55IGNoYW5nZSBvbiB0aGUgVVJMIHRvIHNjcm9sbCB0byB0aGUgZ2l2ZW4gYW5jaG9yIGxpbmtcbiAgICAqIChhIHdheSB0byBkZXRlY3QgYmFjayBoaXN0b3J5IGJ1dHRvbiBhcyB3ZSBwbGF5IHdpdGggdGhlIGhhc2hlcyBvbiB0aGUgVVJMKVxuICAgICovXG5cblxuICAgIGZ1bmN0aW9uIGhhc2hDaGFuZ2VIYW5kbGVyKCkge1xuICAgICAgaWYgKCFzdGF0ZS5pc1Njcm9sbGluZyAmJiAhZ2V0T3B0aW9ucygpLmxvY2tBbmNob3JzKSB7XG4gICAgICAgIHZhciBhbmNob3JzID0gZ2V0QW5jaG9yc1VSTCgpO1xuICAgICAgICB2YXIgc2VjdGlvbkFuY2hvciA9IGFuY2hvcnMuc2VjdGlvbjtcbiAgICAgICAgdmFyIHNsaWRlQW5jaG9yID0gYW5jaG9ycy5zbGlkZTsgLy93aGVuIG1vdmluZyB0byBhIHNsaWRlIGluIHRoZSBmaXJzdCBzZWN0aW9uIGZvciB0aGUgZmlyc3QgdGltZSAoZmlyc3QgdGltZSB0byBhZGQgYW4gYW5jaG9yIHRvIHRoZSBVUkwpXG5cbiAgICAgICAgdmFyIGlzRmlyc3RTbGlkZU1vdmUgPSB0eXBlb2Ygc3RhdGUubGFzdFNjcm9sbGVkRGVzdGlueSA9PT0gJ3VuZGVmaW5lZCc7XG4gICAgICAgIHZhciBpc0ZpcnN0U2Nyb2xsTW92ZSA9IHR5cGVvZiBzdGF0ZS5sYXN0U2Nyb2xsZWREZXN0aW55ID09PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygc2xpZGVBbmNob3IgPT09ICd1bmRlZmluZWQnICYmICFzdGF0ZS5zbGlkZU1vdmluZztcblxuICAgICAgICBpZiAoc2VjdGlvbkFuY2hvciAmJiBzZWN0aW9uQW5jaG9yLmxlbmd0aCkge1xuICAgICAgICAgIC8qaW4gb3JkZXIgdG8gY2FsbCBzY3JvbGxwYWdlKCkgb25seSBvbmNlIGZvciBlYWNoIGRlc3RpbmF0aW9uIGF0IGEgdGltZVxuICAgICAgICAgIEl0IGlzIGNhbGxlZCB0d2ljZSBmb3IgZWFjaCBzY3JvbGwgb3RoZXJ3aXNlLCBhcyBpbiBjYXNlIG9mIHVzaW5nIGFuY2hvcmxpbmtzIGBoYXNoQ2hhbmdlYFxuICAgICAgICAgIGV2ZW50IGlzIGZpcmVkIG9uIGV2ZXJ5IHNjcm9sbCB0b28uKi9cbiAgICAgICAgICBpZiAoc2VjdGlvbkFuY2hvciAmJiBzZWN0aW9uQW5jaG9yICE9PSBzdGF0ZS5sYXN0U2Nyb2xsZWREZXN0aW55ICYmICFpc0ZpcnN0U2xpZGVNb3ZlIHx8IGlzRmlyc3RTY3JvbGxNb3ZlIHx8ICFzdGF0ZS5zbGlkZU1vdmluZyAmJiBzdGF0ZS5sYXN0U2Nyb2xsZWRTbGlkZSAhPSBzbGlkZUFuY2hvcikge1xuICAgICAgICAgICAgRXZlbnRFbWl0dGVyLmVtaXQoJ29uU2Nyb2xsUGFnZUFuZFNsaWRlJywge1xuICAgICAgICAgICAgICBzZWN0aW9uQW5jaG9yOiBzZWN0aW9uQW5jaG9yLFxuICAgICAgICAgICAgICBzbGlkZUFuY2hvcjogc2xpZGVBbmNob3JcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIEV2ZW50RW1pdHRlci5vbignYmluZEV2ZW50cycsIGJpbmRFdmVudHMkNCk7XG5cbiAgICBmdW5jdGlvbiBiaW5kRXZlbnRzJDQoKSB7XG4gICAgICBkb2NBZGRFdmVudCgnd2hlZWwnLCB3aGVlbERhdGFIYW5kbGVyLnJlZ2lzdGVyRXZlbnQsIGdldFBhc3NpdmVPcHRpb25zSWZQb3NzaWJsZSgpKTtcbiAgICAgIEV2ZW50RW1pdHRlci5vbignc2Nyb2xsQmV5b25kRnVsbHBhZ2UnLCBzY3JvbGxCZXlvbmRGdWxsUGFnZSk7XG4gICAgICBFdmVudEVtaXR0ZXIub24oJ29uS2V5RG93bicsIG9uS2V5RG93bik7XG4gICAgfVxuXG4gICAgRXZlbnRFbWl0dGVyLm9uKCdiaW5kRXZlbnRzJywgYmluZEV2ZW50cyQzKTtcblxuICAgIGZ1bmN0aW9uIGJpbmRFdmVudHMkMygpIHtcbiAgICAgIEV2ZW50RW1pdHRlci5vbignb25DbGlja09yVG91Y2gnLCBvbkNsaWNrT3JUb3VjaCQxKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbkNsaWNrT3JUb3VjaCQxKHBhcmFtcykge1xuICAgICAgdmFyIHRhcmdldCA9IHBhcmFtcy50YXJnZXQ7XG5cbiAgICAgIGlmIChjbG9zZXN0KHRhcmdldCwgZ2V0T3B0aW9ucygpLm1lbnUgKyAnIFtkYXRhLW1lbnVhbmNob3JdJykpIHtcbiAgICAgICAgbWVudUl0ZW1zSGFuZGxlci5jYWxsKHRhcmdldCwgcGFyYW1zKTtcbiAgICAgIH1cbiAgICB9IC8vTWVudSBpdGVtIGhhbmRsZXIgd2hlbiBub3QgdXNpbmcgYW5jaG9ycyBvciB1c2luZyBsb2NrQW5jaG9yczp0cnVlXG5cblxuICAgIGZ1bmN0aW9uIG1lbnVJdGVtc0hhbmRsZXIoZSkge1xuICAgICAgc2V0U3RhdGUoe1xuICAgICAgICBzY3JvbGxUcmlnZ2VyOiAnbWVudSdcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoJChnZXRPcHRpb25zKCkubWVudSlbMF0gJiYgKGdldE9wdGlvbnMoKS5sb2NrQW5jaG9ycyB8fCAhZ2V0T3B0aW9ucygpLmFuY2hvcnMubGVuZ3RoKSkge1xuICAgICAgICBwcmV2ZW50RGVmYXVsdChlKTtcbiAgICAgICAgLypqc2hpbnQgdmFsaWR0aGlzOnRydWUgKi9cblxuICAgICAgICBFdmVudEVtaXR0ZXIuZW1pdCgnb25NZW51Q2xpY2snLCB7XG4gICAgICAgICAgYW5jaG9yOiBnZXRBdHRyKHRoaXMsICdkYXRhLW1lbnVhbmNob3InKVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBFdmVudEVtaXR0ZXIub24oJ2JpbmRFdmVudHMnLCBiaW5kRXZlbnRzJDIpO1xuXG4gICAgZnVuY3Rpb24gYmluZEV2ZW50cyQyKCkge1xuICAgICAgRXZlbnRFbWl0dGVyLm9uKCdvbkNsaWNrT3JUb3VjaCcsIG9uQ2xpY2tPclRvdWNoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbkNsaWNrT3JUb3VjaChwYXJhbXMpIHtcbiAgICAgIHZhciB0YXJnZXQgPSBwYXJhbXMudGFyZ2V0O1xuXG4gICAgICBpZiAodGFyZ2V0ICYmIGNsb3Nlc3QodGFyZ2V0LCBTRUNUSU9OX05BVl9TRUwgKyAnIGEnKSkge1xuICAgICAgICBzZWN0aW9uQnVsbGV0SGFuZGxlci5jYWxsKHRhcmdldCwgcGFyYW1zLmUpO1xuICAgICAgfSBlbHNlIGlmIChtYXRjaGVzKHRhcmdldCwgU0VDVElPTl9OQVZfVE9PTFRJUF9TRUwpKSB7XG4gICAgICAgIHRvb2x0aXBUZXh0SGFuZGxlci5jYWxsKHRhcmdldCk7XG4gICAgICB9IGVsc2UgaWYgKG1hdGNoZXModGFyZ2V0LCBTTElERVNfTkFWX0xJTktfU0VMKSB8fCBjbG9zZXN0KHRhcmdldCwgU0xJREVTX05BVl9MSU5LX1NFTCkgIT0gbnVsbCkge1xuICAgICAgICBzbGlkZUJ1bGxldEhhbmRsZXIuY2FsbCh0YXJnZXQsIHBhcmFtcy5lKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgbGFzdFNjcm9sbCA9IDA7XG4gICAgdmFyIGdfc2Nyb2xsSWQ7XG4gICAgdmFyIGdfc2Nyb2xsSWQyO1xuICAgIEV2ZW50RW1pdHRlci5vbignb25EZXN0cm95Jywgb25EZXN0cm95JDEpOyAvL3doZW4gc2Nyb2xsaW5nLi4uXG5cbiAgICBmdW5jdGlvbiBzY3JvbGxIYW5kbGVyKGUpIHtcbiAgICAgIHZhciBjdXJyZW50U2VjdGlvbjtcbiAgICAgIHZhciBjdXJyZW50U2VjdGlvbkVsZW07XG5cbiAgICAgIGlmIChzdGF0ZS5pc1Jlc2l6aW5nIHx8ICFnZXRTdGF0ZSgpLmFjdGl2ZVNlY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBnZXRMYXN0KGdldFN0YXRlKCkuc2VjdGlvbnMpO1xuXG4gICAgICBpZiAoZ2V0U3RhdGUoKS5pc0JleW9uZEZ1bGxwYWdlIHx8IGdldFN0YXRlKCkuaXNBYm91dFRvU2Nyb2xsVG9GdWxsUGFnZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICghZ2V0T3B0aW9ucygpLmF1dG9TY3JvbGxpbmcgfHwgZ2V0T3B0aW9ucygpLnNjcm9sbEJhcikge1xuICAgICAgICB2YXIgY3VycmVudFNjcm9sbCA9IGdldFNjcm9sbFRvcChnZXRPcHRpb25zKCkpO1xuICAgICAgICB2YXIgc2Nyb2xsRGlyZWN0aW9uID0gZ2V0U2Nyb2xsRGlyZWN0aW9uKGN1cnJlbnRTY3JvbGwpO1xuICAgICAgICB2YXIgdmlzaWJsZVNlY3Rpb25JbmRleCA9IDA7XG4gICAgICAgIHZhciBzY3JlZW5fbWlkID0gY3VycmVudFNjcm9sbCArIGdldFdpbmRvd0hlaWdodCgpIC8gMi4wO1xuICAgICAgICB2YXIgaXNBdEJvdHRvbSA9ICRib2R5LnNjcm9sbEhlaWdodCAtIGdldFdpbmRvd0hlaWdodCgpID09PSBjdXJyZW50U2Nyb2xsO1xuICAgICAgICB2YXIgc2VjdGlvbnMgPSBnZXRTdGF0ZSgpLnNlY3Rpb25zO1xuICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgc2Nyb2xsWTogY3VycmVudFNjcm9sbFxuICAgICAgICB9KTsgLy93aGVuIHVzaW5nIGBhdXRvLWhlaWdodGAgZm9yIGEgc21hbGwgbGFzdCBzZWN0aW9uIGl0IHdvbid0IGJlIGNlbnRlcmVkIGluIHRoZSB2aWV3cG9ydFxuXG4gICAgICAgIGlmIChpc0F0Qm90dG9tKSB7XG4gICAgICAgICAgdmlzaWJsZVNlY3Rpb25JbmRleCA9IHNlY3Rpb25zLmxlbmd0aCAtIDE7XG4gICAgICAgIH0gLy9pcyBhdCB0b3A/IHdoZW4gdXNpbmcgYGF1dG8taGVpZ2h0YCBmb3IgYSBzbWFsbCBmaXJzdCBzZWN0aW9uIGl0IHdvbid0IGJlIGNlbnRlcmVkIGluIHRoZSB2aWV3cG9ydFxuICAgICAgICBlbHNlIGlmICghY3VycmVudFNjcm9sbCkge1xuICAgICAgICAgIHZpc2libGVTZWN0aW9uSW5kZXggPSAwO1xuICAgICAgICB9IC8vdGFraW5nIHRoZSBzZWN0aW9uIHdoaWNoIGlzIHNob3dpbmcgbW9yZSBjb250ZW50IGluIHRoZSB2aWV3cG9ydFxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlY3Rpb25zLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICB2YXIgc2VjdGlvbiA9IHNlY3Rpb25zW2ldLml0ZW07IC8vIFBpY2sgdGhlIHRoZSBsYXN0IHNlY3Rpb24gd2hpY2ggcGFzc2VzIHRoZSBtaWRkbGUgbGluZSBvZiB0aGUgc2NyZWVuLlxuXG4gICAgICAgICAgICBpZiAoc2VjdGlvbi5vZmZzZXRUb3AgPD0gc2NyZWVuX21pZCkge1xuICAgICAgICAgICAgICB2aXNpYmxlU2VjdGlvbkluZGV4ID0gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNDb21wbGV0ZWx5SW5WaWV3UG9ydChzY3JvbGxEaXJlY3Rpb24pKSB7XG4gICAgICAgICAgaWYgKCFoYXNDbGFzcyhnZXRTdGF0ZSgpLmFjdGl2ZVNlY3Rpb24uaXRlbSwgQ09NUExFVEVMWSkpIHtcbiAgICAgICAgICAgIGFkZENsYXNzKGdldFN0YXRlKCkuYWN0aXZlU2VjdGlvbi5pdGVtLCBDT01QTEVURUxZKTtcbiAgICAgICAgICAgIHJlbW92ZUNsYXNzKHNpYmxpbmdzKGdldFN0YXRlKCkuYWN0aXZlU2VjdGlvbi5pdGVtKSwgQ09NUExFVEVMWSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IC8vZ2V0aW5nIHRoZSBsYXN0IG9uZSwgdGhlIGN1cnJlbnQgb25lIG9uIHRoZSBzY3JlZW5cblxuXG4gICAgICAgIGN1cnJlbnRTZWN0aW9uID0gc2VjdGlvbnNbdmlzaWJsZVNlY3Rpb25JbmRleF07XG4gICAgICAgIGN1cnJlbnRTZWN0aW9uRWxlbSA9IGN1cnJlbnRTZWN0aW9uLml0ZW07IC8vc2V0dGluZyB0aGUgdmlzaWJsZSBzZWN0aW9uIGFzIGFjdGl2ZSB3aGVuIG1hbnVhbGx5IHNjcm9sbGluZ1xuICAgICAgICAvL2V4ZWN1dGluZyBvbmx5IG9uY2UgdGhlIGZpcnN0IHRpbWUgd2UgcmVhY2ggdGhlIHNlY3Rpb25cblxuICAgICAgICBpZiAoIWN1cnJlbnRTZWN0aW9uLmlzQWN0aXZlKSB7XG4gICAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgICAgaXNTY3JvbGxpbmc6IHRydWVcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB2YXIgbGVhdmluZ1NlY3Rpb24gPSBnZXRTdGF0ZSgpLmFjdGl2ZVNlY3Rpb24uaXRlbTtcbiAgICAgICAgICB2YXIgbGVhdmluZ1NlY3Rpb25JbmRleCA9IGdldFN0YXRlKCkuYWN0aXZlU2VjdGlvbi5pbmRleCgpICsgMTtcbiAgICAgICAgICB2YXIgeU1vdmVtZW50ID0gZ2V0WW1vdmVtZW50KGdldFN0YXRlKCkuYWN0aXZlU2VjdGlvbiwgY3VycmVudFNlY3Rpb25FbGVtKTtcbiAgICAgICAgICB2YXIgYW5jaG9yTGluayA9IGN1cnJlbnRTZWN0aW9uLmFuY2hvcjtcbiAgICAgICAgICB2YXIgc2VjdGlvbkluZGV4ID0gY3VycmVudFNlY3Rpb24uaW5kZXgoKSArIDE7XG4gICAgICAgICAgdmFyIGFjdGl2ZVNsaWRlID0gY3VycmVudFNlY3Rpb24uYWN0aXZlU2xpZGU7XG4gICAgICAgICAgdmFyIHNsaWRlSW5kZXg7XG4gICAgICAgICAgdmFyIHNsaWRlQW5jaG9yTGluaztcbiAgICAgICAgICB2YXIgY2FsbGJhY2tzUGFyYW1zID0ge1xuICAgICAgICAgICAgYWN0aXZlU2VjdGlvbjogbGVhdmluZ1NlY3Rpb24sXG4gICAgICAgICAgICBzZWN0aW9uSW5kZXg6IHNlY3Rpb25JbmRleCAtIDEsXG4gICAgICAgICAgICBhbmNob3JMaW5rOiBhbmNob3JMaW5rLFxuICAgICAgICAgICAgZWxlbWVudDogY3VycmVudFNlY3Rpb25FbGVtLFxuICAgICAgICAgICAgbGVhdmluZ1NlY3Rpb246IGxlYXZpbmdTZWN0aW9uSW5kZXgsXG4gICAgICAgICAgICBkaXJlY3Rpb246IHlNb3ZlbWVudCxcbiAgICAgICAgICAgIGl0ZW1zOiB7XG4gICAgICAgICAgICAgIG9yaWdpbjogZ2V0U3RhdGUoKS5hY3RpdmVTZWN0aW9uLFxuICAgICAgICAgICAgICBkZXN0aW5hdGlvbjogY3VycmVudFNlY3Rpb25cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgaWYgKGFjdGl2ZVNsaWRlKSB7XG4gICAgICAgICAgICBzbGlkZUFuY2hvckxpbmsgPSBhY3RpdmVTbGlkZS5hbmNob3I7XG4gICAgICAgICAgICBzbGlkZUluZGV4ID0gYWN0aXZlU2xpZGUuaW5kZXgoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoc3RhdGUuY2FuU2Nyb2xsKSB7XG4gICAgICAgICAgICBhZGRDbGFzcyhjdXJyZW50U2VjdGlvbkVsZW0sIEFDVElWRSk7XG4gICAgICAgICAgICByZW1vdmVDbGFzcyhzaWJsaW5ncyhjdXJyZW50U2VjdGlvbkVsZW0pLCBBQ1RJVkUpO1xuXG4gICAgICAgICAgICBpZiAoaXNGdW5jdGlvbihnZXRPcHRpb25zKCkuYmVmb3JlTGVhdmUpKSB7XG4gICAgICAgICAgICAgIGZpcmVDYWxsYmFja09uY2VQZXJTY3JvbGwoJ2JlZm9yZUxlYXZlJywgY2FsbGJhY2tzUGFyYW1zKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24oZ2V0T3B0aW9ucygpLm9uTGVhdmUpKSB7XG4gICAgICAgICAgICAgIGZpcmVDYWxsYmFjaygnb25MZWF2ZScsIGNhbGxiYWNrc1BhcmFtcyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKGdldE9wdGlvbnMoKS5hZnRlckxvYWQpKSB7XG4gICAgICAgICAgICAgIGZpcmVDYWxsYmFjaygnYWZ0ZXJMb2FkJywgY2FsbGJhY2tzUGFyYW1zKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc3RvcE1lZGlhKGxlYXZpbmdTZWN0aW9uKTtcbiAgICAgICAgICAgIGxhenlMb2FkKGN1cnJlbnRTZWN0aW9uRWxlbSk7XG4gICAgICAgICAgICBwbGF5TWVkaWEoY3VycmVudFNlY3Rpb25FbGVtKTtcbiAgICAgICAgICAgIGFjdGl2YXRlTWVudUFuZE5hdihhbmNob3JMaW5rLCBzZWN0aW9uSW5kZXggLSAxKTtcblxuICAgICAgICAgICAgaWYgKGdldE9wdGlvbnMoKS5hbmNob3JzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAvL25lZWRlZCB0byBlbnRlciBpbiBoYXNoQ2hhbmdlIGV2ZW50IHdoZW4gdXNpbmcgdGhlIG1lbnUgd2l0aCBhbmNob3IgbGlua3NcbiAgICAgICAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgIGxhc3RTY3JvbGxlZERlc3Rpbnk6IGFuY2hvckxpbmtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHNldFBhZ2VTdGF0dXMoc2xpZGVJbmRleCwgc2xpZGVBbmNob3JMaW5rLCBhbmNob3JMaW5rKTtcbiAgICAgICAgICAgIHVwZGF0ZVN0YXRlKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGdldE9wdGlvbnMoKS5maXRUb1NlY3Rpb24gJiYgc3RhdGUuY2FuU2Nyb2xsKSB7XG4gICAgICAgICAgICAvLyBTbWFsbCB0aW1lb3V0IGluIG9yZGVyIHRvIGF2b2lkIGVudGVyaW5nIGluIGhhc2hDaGFuZ2UgZXZlbnQgd2hlbiBzY3JvbGxpbmcgaXMgbm90IGZpbmlzaGVkIHlldFxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGdfc2Nyb2xsSWQpO1xuICAgICAgICAgICAgZ19zY3JvbGxJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgaXNTY3JvbGxpbmc6IGZhbHNlXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB2YXIgZml4ZWRTZWN0aW9ucyA9IHN0YXRlLnNlY3Rpb25zLmZpbHRlcihmdW5jdGlvbiAoc2VjdGlvbikge1xuICAgICAgICAgICAgICAgIHZhciBzZWN0aW9uVmFsdWVzID0gc2VjdGlvbi5pdGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLnJvdW5kKHNlY3Rpb25WYWx1ZXMuYm90dG9tKSA9PT0gTWF0aC5yb3VuZChnZXRXaW5kb3dIZWlnaHQoKSkgfHwgTWF0aC5yb3VuZChzZWN0aW9uVmFsdWVzLnRvcCkgPT09IDA7XG4gICAgICAgICAgICAgIH0pOyAvLyBObyBzZWN0aW9uIGlzIGZpdHRpbmcgdGhlIHZpZXdwb3J0PyBMZXQncyBmaXggdGhhdCFcblxuICAgICAgICAgICAgICBpZiAoIWZpeGVkU2VjdGlvbnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgY3NzKGRvYy5ib2R5LCB7XG4gICAgICAgICAgICAgICAgICAnc2Nyb2xsLXNuYXAtdHlwZSc6ICd5IG1hbmRhdG9yeSdcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgMzAwKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbkRlc3Ryb3kkMSgpIHtcbiAgICAgIGNsZWFyVGltZW91dChnX3Njcm9sbElkKTtcbiAgICAgIGNsZWFyVGltZW91dChnX3Njcm9sbElkMik7XG4gICAgfVxuICAgIC8qKlxuICAgICogR2V0cyB0aGUgZGlyZWN0b24gb2YgdGhlIHRoZSBzY3JvbGxpbmcgZmlyZWQgYnkgdGhlIHNjcm9sbCBldmVudC5cbiAgICAqL1xuXG5cbiAgICBmdW5jdGlvbiBnZXRTY3JvbGxEaXJlY3Rpb24oY3VycmVudFNjcm9sbCkge1xuICAgICAgdmFyIGRpcmVjdGlvbiA9IGN1cnJlbnRTY3JvbGwgPiBsYXN0U2Nyb2xsID8gJ2Rvd24nIDogJ3VwJztcbiAgICAgIGxhc3RTY3JvbGwgPSBjdXJyZW50U2Nyb2xsOyAvL25lZWRlZCBmb3IgYXV0by1oZWlnaHQgc2VjdGlvbnMgdG8gZGV0ZXJtaW5lIGlmIHdlIHdhbnQgdG8gc2Nyb2xsIHRvIHRoZSB0b3Agb3IgYm90dG9tIG9mIHRoZSBkZXN0aW5hdGlvblxuXG4gICAgICBzZXRTdGF0ZSh7XG4gICAgICAgIHByZXZpb3VzRGVzdFRvcDogY3VycmVudFNjcm9sbFxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZGlyZWN0aW9uO1xuICAgIH1cbiAgICAvKipcbiAgICAqIERldGVybWluZXMgd2hldGhlciB0aGUgYWN0aXZlIHNlY3Rpb24gaGFzIHNlZW4gaW4gaXRzIHdob2xlIG9yIG5vdC5cbiAgICAqL1xuXG5cbiAgICBmdW5jdGlvbiBpc0NvbXBsZXRlbHlJblZpZXdQb3J0KG1vdmVtZW50KSB7XG4gICAgICB2YXIgdG9wID0gZ2V0U3RhdGUoKS5hY3RpdmVTZWN0aW9uLml0ZW0ub2Zmc2V0VG9wO1xuICAgICAgdmFyIGJvdHRvbSA9IHRvcCArIGdldFdpbmRvd0hlaWdodCgpO1xuXG4gICAgICBpZiAobW92ZW1lbnQgPT0gJ3VwJykge1xuICAgICAgICByZXR1cm4gYm90dG9tID49IGdldFNjcm9sbFRvcChnZXRPcHRpb25zKCkpICsgZ2V0V2luZG93SGVpZ2h0KCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0b3AgPD0gZ2V0U2Nyb2xsVG9wKGdldE9wdGlvbnMoKSk7XG4gICAgfVxuXG4gICAgRXZlbnRFbWl0dGVyLm9uKCdiaW5kRXZlbnRzJywgYmluZEV2ZW50cyQxKTtcbiAgICBFdmVudEVtaXR0ZXIub24oJ29uRGVzdHJveScsIG9uRGVzdHJveSk7XG5cbiAgICBmdW5jdGlvbiBvbkRlc3Ryb3koKSB7XG4gICAgICB3aW5kb3dSZW1vdmVFdmVudCgnc2Nyb2xsJywgc2Nyb2xsSGFuZGxlcik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYmluZEV2ZW50cyQxKCkge1xuICAgICAgd2luZG93QWRkRXZlbnQoJ3Njcm9sbCcsIHNjcm9sbEhhbmRsZXIpO1xuICAgICAgZG9jLmJvZHkuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgc2Nyb2xsSGFuZGxlcik7XG4gICAgICBFdmVudEVtaXR0ZXIub24oJ29uU2Nyb2xsUGFnZUFuZFNsaWRlJywgZnVuY3Rpb24gKHBhcmFtcykge1xuICAgICAgICBzY3JvbGxQYWdlQW5kU2xpZGUocGFyYW1zLnNlY3Rpb25BbmNob3IsIHBhcmFtcy5zbGlkZUFuY2hvcik7XG4gICAgICB9KTtcbiAgICAgIEV2ZW50RW1pdHRlci5vbignb25NZW51Q2xpY2snLCBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgICAgIG1vdmVUbyQxKHBhcmFtcy5hbmNob3IsIHVuZGVmaW5lZCk7XG4gICAgICB9KTtcbiAgICAgIEV2ZW50RW1pdHRlci5vbignb25TY3JvbGxPdmVyZmxvd1Njcm9sbGVkJywgZnVuY3Rpb24gKHBhcmFtcykge1xuICAgICAgICB2YXIgc2Nyb2xsU2VjdGlvbiA9IHBhcmFtcy5kaXJlY3Rpb24gPT09ICdkb3duJyA/IG1vdmVTZWN0aW9uRG93biA6IG1vdmVTZWN0aW9uVXA7XG4gICAgICAgIHNjcm9sbFNlY3Rpb24oKTtcbiAgICAgIH0pO1xuICAgICAgRXZlbnRFbWl0dGVyLm9uKCdzY3JvbGxQYWdlJywgZnVuY3Rpb24gKHBhcmFtcykge1xuICAgICAgICBzY3JvbGxQYWdlKHBhcmFtcy5kZXN0aW5hdGlvbik7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBGUC5nZXRBY3RpdmVTbGlkZSA9IGdldEFjdGl2ZVNsaWRlO1xuXG4gICAgRlAuZ2V0U2Nyb2xsWCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBzdGF0ZS5zY3JvbGxYO1xuICAgIH07XG5cbiAgICBFdmVudEVtaXR0ZXIub24oJ2JpbmRFdmVudHMnLCBiaW5kRXZlbnRzKTtcblxuICAgIGZ1bmN0aW9uIGJpbmRFdmVudHMoKSB7XG4gICAgICBFdmVudEVtaXR0ZXIub24oJ29uRGVzdHJveScsIG9uRGVzdHJveSQ3KTtcbiAgICAgIEV2ZW50RW1pdHRlci5vbignbGFuZHNjYXBlU2Nyb2xsJywgZnVuY3Rpb24gKHBhcmFtcykge1xuICAgICAgICBsYW5kc2NhcGVTY3JvbGwocGFyYW1zLnNsaWRlcywgcGFyYW1zLmRlc3RpbmF0aW9uKTtcbiAgICAgIH0pO1xuICAgICAgRXZlbnRFbWl0dGVyLm9uKCdtb3ZlU2xpZGVSaWdodCcsIGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICAgICAgbW92ZVNsaWRlUmlnaHQocGFyYW1zLnNlY3Rpb24pO1xuICAgICAgfSk7XG4gICAgICBFdmVudEVtaXR0ZXIub24oJ21vdmVTbGlkZUxlZnQnLCBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgICAgIG1vdmVTbGlkZUxlZnQocGFyYW1zLnNlY3Rpb24pO1xuICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICogR2V0cyB0aGUgYWN0aXZlIHNsaWRlLlxuICAgICovXG5cblxuICAgIGZ1bmN0aW9uIGdldEFjdGl2ZVNsaWRlKCkge1xuICAgICAgcmV0dXJuIG51bGxPclNsaWRlKGdldFN0YXRlKCkuYWN0aXZlU2VjdGlvbi5hY3RpdmVTbGlkZSk7XG4gICAgfVxuXG4gICAgRXZlbnRFbWl0dGVyLm9uKCdiaW5kRXZlbnRzJywgaW5pdCQxKTtcblxuICAgIGZ1bmN0aW9uIGluaXQkMSgpIHtcbiAgICAgIHZhciBwb3NpdGlvbiA9IGdldE9wdGlvbnMoKS5jcmVkaXRzLnBvc2l0aW9uO1xuICAgICAgdmFyIHBvc2l0aW9uU3R5bGUgPSBbJ2xlZnQnLCAncmlnaHQnXS5pbmRleE9mKHBvc2l0aW9uKSA+IC0xID8gXCJcIi5jb25jYXQocG9zaXRpb24sIFwiOiAwO1wiKSA6ICcnO1xuICAgICAgdmFyIHdhdGVyTWFyayA9IFwiXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJmcC13YXRlcm1hcmtcXFwiIHN0eWxlPVxcXCJcIi5jb25jYXQocG9zaXRpb25TdHlsZSwgXCJcXFwiPlxcbiAgICAgICAgICAgIDxhIGhyZWY9XFxcImh0dHBzOi8vYWx2YXJvdHJpZ28uY29tL2Z1bGxQYWdlL1xcXCIgXFxuICAgICAgICAgICAgICAgIHJlbD1cXFwibm9mb2xsb3cgbm9vcGVuZXJcXFwiIFxcbiAgICAgICAgICAgICAgICB0YXJnZXQ9XFxcIl9ibGFua1xcXCIgXFxuICAgICAgICAgICAgICAgIHN0eWxlPVxcXCJ0ZXh0LWRlY29yYXRpb246bm9uZTsgY29sb3I6ICMwMDA7XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIFwiKS5jb25jYXQoZ2V0T3B0aW9ucygpLmNyZWRpdHMubGFiZWwsIFwiXFxuICAgICAgICAgICAgPC9hPlxcbiAgICAgICAgPC9kaXY+XFxuICAgIFwiKTtcbiAgICAgIHZhciBsYXN0U2VjdGlvbiA9IGdldExhc3Qoc3RhdGUuc2VjdGlvbnMpO1xuICAgICAgdmFyIHNob3VsZFVzZVdhdGVyTWFyayA9IGdldE9wdGlvbnMoKS5jcmVkaXRzLmVuYWJsZWQgJiYgIXN0YXRlLmlzVmFsaWQ7XG5cbiAgICAgIGlmIChsYXN0U2VjdGlvbiAmJiBsYXN0U2VjdGlvbi5pdGVtICYmIHNob3VsZFVzZVdhdGVyTWFyaykge1xuICAgICAgICBsYXN0U2VjdGlvbi5pdGVtLmluc2VydEFkamFjZW50SFRNTCgnYmVmb3JlZW5kJywgd2F0ZXJNYXJrKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAhZnVuY3Rpb24gKCkge1xuICAgICAgRXZlbnRFbWl0dGVyLm9uKFwib25Jbml0aWFsaXNlXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG4sIHM7XG4gICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICBpc1ZhbGlkOiAoZ2V0T3B0aW9ucygpLmxpY2Vuc2VLZXksIG4gPSBnZXRPcHRpb25zKCkubGljZW5zZUtleSwgcyA9IGZ1bmN0aW9uIChuKSB7XG4gICAgICAgICAgICB2YXIgZSA9IHBhcnNlSW50KFwiXFx4MzVcXHgzMVxceDM0XCIpLnRvU3RyaW5nKDE2KTtcbiAgICAgICAgICAgIGlmICghbiB8fCBuLmxlbmd0aCA8IDI5IHx8IDQgPT09IG4uc3BsaXQodFswXSkubGVuZ3RoKSByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIHZhciBpID0gW1wiXFx4NDVcXHg2MVxceDYzXFx4NjhcIiwgXCJcXHg2NlxceDZmXFx4NzJcIl1bcigpXSgpLmpvaW4oXCJcIiksXG4gICAgICAgICAgICAgICAgcyA9IG5bW1wiXFx4NzNcXHg3MFxceDZjXFx4NjlcXHg3NFwiXV0oXCItXCIpLFxuICAgICAgICAgICAgICAgIGwgPSBbXTtcbiAgICAgICAgICAgIHNbaV0oZnVuY3Rpb24gKHQsIG4pIHtcbiAgICAgICAgICAgICAgaWYgKG4gPCA0KSB7XG4gICAgICAgICAgICAgICAgdmFyIGkgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgdmFyIG4gPSB0W3QubGVuZ3RoIC0gMV0sXG4gICAgICAgICAgICAgICAgICAgICAgZSA9IFtcIlxceDRlXFx4NjFcXHg0ZVwiLCBcIlxceDY5XFx4NzNcIl1bcigpXSgpLmpvaW4oXCJcIik7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gd2luZG93W2VdKG4pID8gbyhuKSA6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0IC0gQUNUSVZFLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgIH0obik7XG4gICAgICAgICAgICAgICAgfSh0KTtcblxuICAgICAgICAgICAgICAgIGwucHVzaChpKTtcbiAgICAgICAgICAgICAgICB2YXIgYSA9IG8odFtpXSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoMSA9PT0gbikge1xuICAgICAgICAgICAgICAgICAgdmFyIHMgPSBbXCJcXHg3MFxceDYxXCIsIFwiXFx4NjRcXHg1M1wiLCBcIlxceDc0XCIsIFwiXFx4NjFcXHg3MlxceDc0XCJdLmpvaW4oXCJcIik7XG4gICAgICAgICAgICAgICAgICBhID0gYS50b1N0cmluZygpW3NdKDIsIFwiMFwiKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBlICs9IGEsIDAgIT09IG4gJiYgMSAhPT0gbiB8fCAoZSArPSBcIi1cIik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdmFyIHAgPSAwLFxuICAgICAgICAgICAgICAgIGMgPSBcIlwiO1xuICAgICAgICAgICAgcmV0dXJuIG4uc3BsaXQoXCItXCIpLmZvckVhY2goZnVuY3Rpb24gKHQsIG4pIHtcbiAgICAgICAgICAgICAgaWYgKG4gPCA0KSB7XG4gICAgICAgICAgICAgICAgdmFyIF9yID0gMDtcblxuICAgICAgICAgICAgICAgIGZvciAodmFyIGUgPSAwOyBlIDwgNDsgZSsrKSB7XG4gICAgICAgICAgICAgICAgICBlICE9PSBsW25dICYmIChfciArPSBNYXRoLmFicyhvKHRbZV0pKSwgaXNOYU4odFtlXSkgfHwgcCsrKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgaSA9IGEoX3IpO1xuICAgICAgICAgICAgICAgIGMgKz0gaTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSksIGMgKz0gYShwKSwge1xuICAgICAgICAgICAgICB2OiBuZXcgRGF0ZShlICsgXCJUMDA6MDBcIiksXG4gICAgICAgICAgICAgIG86IGUuc3BsaXQoXCItXCIpWzJdID09PSA4ICogKEFDVElWRS5sZW5ndGggLSAyKSArIFwiXCIsXG4gICAgICAgICAgICAgIGw6IGNcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfShuKSwgcyAmJiAoZ2V0T3B0aW9ucygpLmNyZWRpdHMgJiYgcyAmJiBlIDw9IHMudiAmJiBzLmwgPT09IG4uc3BsaXQodFswXSlbNF0gfHwgZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgIHZhciBuID0gaVtyKCldKCkuam9pbihcIlwiKTtcbiAgICAgICAgICAgIHJldHVybiB0ICYmIDAgPT09IG4uaW5kZXhPZih0KSAmJiB0Lmxlbmd0aCA9PT0gbi5sZW5ndGg7XG4gICAgICAgICAgfShuKSB8fCBzLm8pIHx8ICExKVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgdmFyIHQgPSBbXCItXCJdO1xuICAgICAgdmFyIG4gPSBcIjIwMjItNC0zMFwiLnNwbGl0KFwiLVwiKSxcbiAgICAgICAgICBlID0gbmV3IERhdGUoblswXSwgblsxXSwgblsyXSksXG4gICAgICAgICAgaSA9IFtcInNlXCIsIFwibGljZW5cIiwgXCItXCIsIFwidjNcIiwgXCJsXCIsIFwiZ3BcIl07XG5cbiAgICAgIGZ1bmN0aW9uIHIoKSB7XG4gICAgICAgIHJldHVybiBbW1wiXFx4NzJcXHg2NVwiLCBcIlxceDc2XFx4NjVcXHg3MlxceDczXFx4NjVcIl0uam9pbihcIlwiKV1bXCJcIi5sZW5ndGhdO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBvKHQpIHtcbiAgICAgICAgcmV0dXJuIHQgPyBpc05hTih0KSA/IHQuY2hhckNvZGVBdCgwKSAtIDcyIDogdCA6IFwiXCI7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGEodCkge1xuICAgICAgICB2YXIgbiA9IDcyICsgdDtcbiAgICAgICAgcmV0dXJuIG4gPiA5MCAmJiBuIDwgOTcgJiYgKG4gKz0gMTUpLCBTdHJpbmcuZnJvbUNoYXJDb2RlKG4pLnRvVXBwZXJDYXNlKCk7XG4gICAgICB9XG4gICAgfSgpO1xuXG4gICAgLy9AdHMtY2hlY2tcbiAgICBGUC5zZXRLZXlib2FyZFNjcm9sbGluZyA9IHNldEtleWJvYXJkU2Nyb2xsaW5nO1xuICAgIC8qKlxuICAgICogQWRkcyBvciByZW1vdmUgdGhlIHBvc3NpYmlsaXR5IG9mIHNjcm9sbGluZyB0aHJvdWdoIHNlY3Rpb25zIGJ5IHVzaW5nIHRoZSBrZXlib2FyZCBhcnJvdyBrZXlzXG4gICAgKi9cblxuICAgIGZ1bmN0aW9uIHNldEtleWJvYXJkU2Nyb2xsaW5nKHZhbHVlLCBkaXJlY3Rpb25zKSB7XG4gICAgICBpZiAodHlwZW9mIGRpcmVjdGlvbnMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGRpcmVjdGlvbnMgPSBkaXJlY3Rpb25zLnJlcGxhY2UoLyAvZywgJycpLnNwbGl0KCcsJyk7XG4gICAgICAgIGRpcmVjdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoZGlyZWN0aW9uKSB7XG4gICAgICAgICAgc2V0SXNTY3JvbGxBbGxvd2VkKHZhbHVlLCBkaXJlY3Rpb24sICdrJyk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2V0SXNTY3JvbGxBbGxvd2VkKHZhbHVlLCAnYWxsJywgJ2snKTtcbiAgICAgICAgZ2V0T3B0aW9ucygpLmtleWJvYXJkU2Nyb2xsaW5nID0gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBTZXRzIHRoZSBkYXRhLWFuY2hvciBhdHRyaWJ1dGVzIHRvIHRoZSBtZW51IGVsZW1lbnRzIGFuZCBhY3RpdmF0ZXMgdGhlIGN1cnJlbnQgb25lLlxuICAgICovXG5cbiAgICBmdW5jdGlvbiBzdHlsZU1lbnUoc2VjdGlvbikge1xuICAgICAgdmFyIGluZGV4ID0gc2VjdGlvbi5pbmRleCgpO1xuXG4gICAgICBpZiAodHlwZW9mIGdldE9wdGlvbnMoKS5hbmNob3JzW2luZGV4XSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgLy9hY3RpdmF0aW5nIHRoZSBtZW51IC8gbmF2IGVsZW1lbnQgb24gbG9hZFxuICAgICAgICBpZiAoc2VjdGlvbi5pc0FjdGl2ZSkge1xuICAgICAgICAgIGFjdGl2YXRlTWVudUFuZE5hdihnZXRPcHRpb25zKCkuYW5jaG9yc1tpbmRleF0sIGluZGV4KTtcbiAgICAgICAgfVxuICAgICAgfSAvL21vdmluZyB0aGUgbWVudSBvdXRzaWRlIHRoZSBtYWluIGNvbnRhaW5lciBpZiBpdCBpcyBpbnNpZGUgKGF2b2lkIHByb2JsZW1zIHdpdGggZml4ZWQgcG9zaXRpb25zIHdoZW4gdXNpbmcgQ1NTMyB0cmFuZm9ybXMpXG5cblxuICAgICAgaWYgKGdldE9wdGlvbnMoKS5tZW51ICYmIGdldE9wdGlvbnMoKS5jc3MzICYmIGNsb3Nlc3QoJChnZXRPcHRpb25zKCkubWVudSlbMF0sIFdSQVBQRVJfU0VMKSAhPSBudWxsKSB7XG4gICAgICAgICQoZ2V0T3B0aW9ucygpLm1lbnUpLmZvckVhY2goZnVuY3Rpb24gKG1lbnUpIHtcbiAgICAgICAgICAkYm9keS5hcHBlbmRDaGlsZChtZW51KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBXb3JrcyBvdmVyIHRoZSBET00gc3RydWN0dXJlIHRvIHNldCBpdCB1cCBmb3IgdGhlIGN1cnJlbnQgZnVsbHBhZ2UgZ2V0T3B0aW9ucygpLlxuICAgICovXG5cbiAgICBmdW5jdGlvbiBwcmVwYXJlRG9tKCkge1xuICAgICAgY3NzKGdldFBhcmVudHNVbnRpbChnZXRDb250YWluZXIoKSwgJ2JvZHknKSwge1xuICAgICAgICAnaGVpZ2h0JzogJzEwMCUnLFxuICAgICAgICAncG9zaXRpb24nOiAncmVsYXRpdmUnXG4gICAgICB9KTsgLy9hZGRpbmcgYSBjbGFzcyB0byByZWNvZ25pemUgdGhlIGNvbnRhaW5lciBpbnRlcm5hbGx5IGluIHRoZSBjb2RlXG5cbiAgICAgIGFkZENsYXNzKGdldENvbnRhaW5lcigpLCBXUkFQUEVSKTtcbiAgICAgIGFkZENsYXNzKCRodG1sLCBFTkFCTEVEKTsgLy9kdWUgdG8gaHR0cHM6Ly9naXRodWIuY29tL2FsdmFyb3RyaWdvL2Z1bGxQYWdlLmpzL2lzc3Vlcy8xNTAyXG5cbiAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgd2luZG93c0hlaWdodDogZ2V0V2luZG93SGVpZ2h0KClcbiAgICAgIH0pO1xuICAgICAgcmVtb3ZlQ2xhc3MoZ2V0Q29udGFpbmVyKCksIERFU1RST1lFRCk7IC8vaW4gY2FzZSBpdCB3YXMgZGVzdHJveWVkIGJlZm9yZSBpbml0aWFsaXppbmcgaXQgYWdhaW5cblxuICAgICAgYWRkSW50ZXJuYWxTZWxlY3RvcnMoKTtcbiAgICAgIHZhciBzZWN0aW9ucyA9IGdldFN0YXRlKCkuc2VjdGlvbnNJbmNsdWRpbmdIaWRkZW47IC8vc3R5bGluZyB0aGUgc2VjdGlvbnMgLyBzbGlkZXMgLyBtZW51XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VjdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHNlY3Rpb24gPSBzZWN0aW9uc1tpXTtcbiAgICAgICAgdmFyIHNsaWRlcyA9IHNlY3Rpb24uYWxsU2xpZGVzSXRlbXM7IC8vY2FjaGluZyB0aGUgb3JpZ2luYWwgc3R5bGVzIHRvIGFkZCB0aGVtIGJhY2sgb24gZGVzdHJveSgnYWxsJylcblxuICAgICAgICBzZWN0aW9uLml0ZW0uc2V0QXR0cmlidXRlKCdkYXRhLWZwLXN0eWxlcycsIGdldEF0dHIoc2VjdGlvbi5pdGVtLCAnc3R5bGUnKSk7XG4gICAgICAgIHN0eWxlU2VjdGlvbihzZWN0aW9uKTtcbiAgICAgICAgc3R5bGVNZW51KHNlY3Rpb24pOyAvLyBpZiB0aGVyZSdzIGFueSBzbGlkZVxuXG4gICAgICAgIGlmIChzbGlkZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHN0eWxlU2xpZGVzKHNlY3Rpb24pO1xuICAgICAgICB9XG4gICAgICB9IC8vZml4ZWQgZWxlbWVudHMgbmVlZCB0byBiZSBtb3ZlZCBvdXQgb2YgdGhlIHBsdWdpbiBjb250YWluZXIgZHVlIHRvIHByb2JsZW1zIHdpdGggQ1NTMy5cblxuXG4gICAgICBpZiAoZ2V0T3B0aW9ucygpLmZpeGVkRWxlbWVudHMgJiYgZ2V0T3B0aW9ucygpLmNzczMpIHtcbiAgICAgICAgJChnZXRPcHRpb25zKCkuZml4ZWRFbGVtZW50cykuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgICRib2R5LmFwcGVuZENoaWxkKGl0ZW0pO1xuICAgICAgICB9KTtcbiAgICAgIH0gLy92ZXJ0aWNhbCBjZW50ZXJlZCBvZiB0aGUgbmF2aWdhdGlvbiArIGFjdGl2ZSBidWxsZXRcblxuXG4gICAgICBpZiAoZ2V0T3B0aW9ucygpLm5hdmlnYXRpb24pIHtcbiAgICAgICAgYWRkVmVydGljYWxOYXZpZ2F0aW9uKCk7XG4gICAgICB9XG5cbiAgICAgIGVuYWJsZVlvdXR1YmVBUEkoKTtcbiAgICB9XG5cbiAgICBGUC5zaGFyZWQuYWZ0ZXJSZW5kZXJBY3Rpb25zID0gYWZ0ZXJSZW5kZXJBY3Rpb25zO1xuICAgIC8qKlxuICAgICogQWN0aW9ucyBhbmQgY2FsbGJhY2tzIHRvIGZpcmUgYWZ0ZXJSZW5kZXJcbiAgICAqL1xuXG4gICAgZnVuY3Rpb24gYWZ0ZXJSZW5kZXJBY3Rpb25zKCkge1xuICAgICAgdmFyIHNlY3Rpb24gPSBnZXRTdGF0ZSgpLmFjdGl2ZVNlY3Rpb247XG4gICAgICB2YXIgc2VjdGlvbkVsZW0gPSBnZXRTdGF0ZSgpLmFjdGl2ZVNlY3Rpb24uaXRlbTtcbiAgICAgIGFkZENsYXNzKHNlY3Rpb25FbGVtLCBDT01QTEVURUxZKTtcbiAgICAgIGxhenlMb2FkKHNlY3Rpb25FbGVtKTtcbiAgICAgIGxhenlMb2FkT3RoZXJzKCk7XG4gICAgICBwbGF5TWVkaWEoc2VjdGlvbkVsZW0pO1xuXG4gICAgICBpZiAoaXNEZXN0aW55VGhlU3RhcnRpbmdTZWN0aW9uKCkgJiYgaXNGdW5jdGlvbihnZXRPcHRpb25zKCkuYWZ0ZXJMb2FkKSkge1xuICAgICAgICBmaXJlQ2FsbGJhY2soJ2FmdGVyTG9hZCcsIHtcbiAgICAgICAgICBhY3RpdmVTZWN0aW9uOiBzZWN0aW9uRWxlbSxcbiAgICAgICAgICBlbGVtZW50OiBzZWN0aW9uRWxlbSxcbiAgICAgICAgICBkaXJlY3Rpb246IG51bGwsXG4gICAgICAgICAgLy9mb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgY2FsbGJhY2sgKHRvIGJlIHJlbW92ZWQgaW4gYSBmdXR1cmUhKVxuICAgICAgICAgIGFuY2hvckxpbms6IHNlY3Rpb24uYW5jaG9yLFxuICAgICAgICAgIHNlY3Rpb25JbmRleDogc2VjdGlvbi5pbmRleCgpLFxuICAgICAgICAgIGl0ZW1zOiB7XG4gICAgICAgICAgICBvcmlnaW46IGdldFN0YXRlKCkuYWN0aXZlU2VjdGlvbixcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uOiBnZXRTdGF0ZSgpLmFjdGl2ZVNlY3Rpb25cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNGdW5jdGlvbihnZXRPcHRpb25zKCkuYWZ0ZXJSZW5kZXIpKSB7XG4gICAgICAgIGZpcmVDYWxsYmFjaygnYWZ0ZXJSZW5kZXInKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgKiBEZXRlcm1pbmVzIGlmIHRoZSBVUkwgYW5jaG9yIGRlc3RpbnkgaXMgdGhlIHN0YXJ0aW5nIHNlY3Rpb24gKHRoZSBvbmUgdXNpbmcgJ2FjdGl2ZScgY2xhc3MgYmVmb3JlIGluaXRpYWxpemF0aW9uKVxuICAgICovXG5cbiAgICBmdW5jdGlvbiBpc0Rlc3RpbnlUaGVTdGFydGluZ1NlY3Rpb24oKSB7XG4gICAgICB2YXIgYW5jaG9yID0gZ2V0QW5jaG9yc1VSTCgpO1xuICAgICAgdmFyIGRlc3RpbmF0aW9uU2VjdGlvbiA9IGdldFNlY3Rpb25CeUFuY2hvcihhbmNob3Iuc2VjdGlvbik7XG4gICAgICByZXR1cm4gIWFuY2hvci5zZWN0aW9uIHx8ICFkZXN0aW5hdGlvblNlY3Rpb24gfHwgdHlwZW9mIGRlc3RpbmF0aW9uU2VjdGlvbiAhPT0gJ3VuZGVmaW5lZCcgJiYgZGVzdGluYXRpb25TZWN0aW9uLmluZGV4KCkgPT09IGluZGV4KGdldFN0YXJ0aW5nU2VjdGlvbigpKTtcbiAgICB9XG5cbiAgICBGUC5zZXRBbGxvd1Njcm9sbGluZyA9IHNldEFsbG93U2Nyb2xsaW5nO1xuICAgIC8qKlxuICAgICogQWRkcyBvciByZW1vdmUgdGhlIHBvc3NpYmlsaXR5IG9mIHNjcm9sbGluZyB0aHJvdWdoIHNlY3Rpb25zIGJ5IHVzaW5nIHRoZSBtb3VzZSB3aGVlbC90cmFja3BhZCBvciB0b3VjaCBnZXN0dXJlcy5cbiAgICAqIE9wdGlvbmFsbHkgYSBzZWNvbmQgcGFyYW1ldGVyIGNhbiBiZSB1c2VkIHRvIHNwZWNpZnkgdGhlIGRpcmVjdGlvbiBmb3Igd2hpY2ggdGhlIGFjdGlvbiB3aWxsIGJlIGFwcGxpZWQuXG4gICAgKlxuICAgICogQHBhcmFtIGRpcmVjdGlvbnMgc3RyaW5nIGNvbnRhaW5pbmcgdGhlIGRpcmVjdGlvbiBvciBkaXJlY3Rpb25zIHNlcGFyYXRlZCBieSBjb21tYS5cbiAgICAqL1xuXG4gICAgZnVuY3Rpb24gc2V0QWxsb3dTY3JvbGxpbmcodmFsdWUsIGRpcmVjdGlvbnMpIHtcbiAgICAgIGlmICh0eXBlb2YgZGlyZWN0aW9ucyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgZGlyZWN0aW9ucyA9IGRpcmVjdGlvbnMucmVwbGFjZSgvIC9nLCAnJykuc3BsaXQoJywnKTtcbiAgICAgICAgZGlyZWN0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChkaXJlY3Rpb24pIHtcbiAgICAgICAgICBzZXRJc1Njcm9sbEFsbG93ZWQodmFsdWUsIGRpcmVjdGlvbiwgJ20nKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZXRJc1Njcm9sbEFsbG93ZWQodmFsdWUsICdhbGwnLCAnbScpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICogU2Nyb2xscyB0byB0aGUgYW5jaG9yIGluIHRoZSBVUkwgd2hlbiBsb2FkaW5nIHRoZSBzaXRlXG4gICAgKi9cblxuICAgIGZ1bmN0aW9uIHNjcm9sbFRvQW5jaG9yKCkge1xuICAgICAgdmFyIGFuY2hvcnMgPSBnZXRBbmNob3JzVVJMKCk7XG4gICAgICB2YXIgc2VjdGlvbkFuY2hvciA9IGFuY2hvcnMuc2VjdGlvbjtcbiAgICAgIHZhciBzbGlkZUFuY2hvciA9IGFuY2hvcnMuc2xpZGU7XG5cbiAgICAgIGlmIChzZWN0aW9uQW5jaG9yKSB7XG4gICAgICAgIC8vaWYgdGhlcmVzIGFueSAjXG4gICAgICAgIGlmIChnZXRPcHRpb25zKCkuYW5pbWF0ZUFuY2hvcikge1xuICAgICAgICAgIHNjcm9sbFBhZ2VBbmRTbGlkZShzZWN0aW9uQW5jaG9yLCBzbGlkZUFuY2hvcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2lsZW50TW92ZVRvKHNlY3Rpb25BbmNob3IsIHNsaWRlQW5jaG9yKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8qXG4gICAgKiBSZW1vdmVzIGlubGluZSBzdHlsZXMgYWRkZWQgYnkgZnVsbHBhZ2UuanNcbiAgICAqL1xuXG4gICAgZnVuY3Rpb24gZGVzdHJveVN0cnVjdHVyZSgpIHtcbiAgICAgIC8vcmVzZXRpbmcgdGhlIGB0b3BgIG9yIGB0cmFuc2xhdGVgIHByb3BlcnRpZXMgdG8gMFxuICAgICAgc2lsZW50U2Nyb2xsKDApOyAvL2xvYWRpbmcgYWxsIHRoZSBsYXp5IGxvYWQgY29udGVudFxuXG4gICAgICAkKCdpbWdbZGF0YS1zcmNdLCBzb3VyY2VbZGF0YS1zcmNdLCBhdWRpb1tkYXRhLXNyY10sIGlmcmFtZVtkYXRhLXNyY10nLCBnZXRDb250YWluZXIoKSkuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICBzZXRTcmMoaXRlbSwgJ3NyYycpO1xuICAgICAgfSk7XG4gICAgICAkKCdpbWdbZGF0YS1zcmNzZXRdJykuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICBzZXRTcmMoaXRlbSwgJ3NyY3NldCcpO1xuICAgICAgfSk7XG4gICAgICByZW1vdmUoJChTRUNUSU9OX05BVl9TRUwgKyAnLCAnICsgU0xJREVTX05BVl9TRUwgKyAnLCAnICsgU0xJREVTX0FSUk9XX1NFTCkpOyAvL3JlbW92aW5nIGlubGluZSBzdHlsZXNcblxuICAgICAgY3NzKGdldE5vZGVzKGdldFN0YXRlKCkuc2VjdGlvbnMpLCB7XG4gICAgICAgICdoZWlnaHQnOiAnJyxcbiAgICAgICAgJ2JhY2tncm91bmQtY29sb3InOiAnJyxcbiAgICAgICAgJ3BhZGRpbmcnOiAnJ1xuICAgICAgfSk7XG4gICAgICBjc3MoZ2V0Tm9kZXMoZ2V0U3RhdGUoKS5zbGlkZXMpLCB7XG4gICAgICAgICd3aWR0aCc6ICcnXG4gICAgICB9KTtcbiAgICAgIGNzcyhnZXRDb250YWluZXIoKSwge1xuICAgICAgICAnaGVpZ2h0JzogJycsXG4gICAgICAgICdwb3NpdGlvbic6ICcnLFxuICAgICAgICAnLW1zLXRvdWNoLWFjdGlvbic6ICcnLFxuICAgICAgICAndG91Y2gtYWN0aW9uJzogJydcbiAgICAgIH0pO1xuICAgICAgY3NzKCRodG1sQm9keSwge1xuICAgICAgICAnb3ZlcmZsb3cnOiAnJyxcbiAgICAgICAgJ2hlaWdodCc6ICcnXG4gICAgICB9KTsgLy8gcmVtb3ZlIC5mcC1lbmFibGVkIGNsYXNzXG5cbiAgICAgIHJlbW92ZUNsYXNzKCRodG1sLCBFTkFCTEVEKTsgLy8gcmVtb3ZlIC5mcC1yZXNwb25zaXZlIGNsYXNzXG5cbiAgICAgIHJlbW92ZUNsYXNzKCRib2R5LCBSRVNQT05TSVZFKTsgLy8gcmVtb3ZlIGFsbCBvZiB0aGUgLmZwLXZpZXdpbmctIGNsYXNzZXNcblxuICAgICAgJGJvZHkuY2xhc3NOYW1lLnNwbGl0KC9cXHMrLykuZm9yRWFjaChmdW5jdGlvbiAoY2xhc3NOYW1lKSB7XG4gICAgICAgIGlmIChjbGFzc05hbWUuaW5kZXhPZihWSUVXSU5HX1BSRUZJWCkgPT09IDApIHtcbiAgICAgICAgICByZW1vdmVDbGFzcygkYm9keSwgY2xhc3NOYW1lKTtcbiAgICAgICAgfVxuICAgICAgfSk7IC8vcmVtb3ZpbmcgYWRkZWQgY2xhc3Nlc1xuXG4gICAgICBnZXROb2RlcyhnZXRTdGF0ZSgpLnBhbmVscykuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICBpZiAoZ2V0T3B0aW9ucygpLnNjcm9sbE92ZXJmbG93KSB7XG4gICAgICAgICAgcmVtb3ZlQ2xhc3MoaXRlbSwgT1ZFUkZMT1cpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVtb3ZlQ2xhc3MoaXRlbSwgVEFCTEUgKyAnICcgKyBBQ1RJVkUgKyAnICcgKyBDT01QTEVURUxZKTtcbiAgICAgICAgdmFyIHByZXZpb3VzU3R5bGVzID0gZ2V0QXR0cihpdGVtLCAnZGF0YS1mcC1zdHlsZXMnKTtcblxuICAgICAgICBpZiAocHJldmlvdXNTdHlsZXMpIHtcbiAgICAgICAgICBpdGVtLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCBnZXRBdHRyKGl0ZW0sICdkYXRhLWZwLXN0eWxlcycpKTtcbiAgICAgICAgfSAvL3JlbW92aW5nIGFuY2hvcnMgaWYgdGhleSB3ZXJlIG5vdCBzZXQgdXNpbmcgdGhlIEhUTUwgbWFya3VwXG5cblxuICAgICAgICBpZiAoaGFzQ2xhc3MoaXRlbSwgU0VDVElPTikgJiYgIWdldEluaXRpYWxBbmNob3JzSW5Eb20oKSkge1xuICAgICAgICAgIGl0ZW0ucmVtb3ZlQXR0cmlidXRlKCdkYXRhLWFuY2hvcicpO1xuICAgICAgICB9XG4gICAgICB9KTsgLy9yZW1vdmluZyB0aGUgYXBwbGllZCB0cmFuc2l0aW9uIGZyb20gdGhlIGZ1bGxwYWdlIHdyYXBwZXJcblxuICAgICAgcmVtb3ZlQW5pbWF0aW9uKGdldENvbnRhaW5lcigpKTsgLy9VbndyYXBwaW5nIGNvbnRlbnRcblxuICAgICAgW1RBQkxFX0NFTExfU0VMLCBTTElERVNfQ09OVEFJTkVSX1NFTCwgU0xJREVTX1dSQVBQRVJfU0VMXS5mb3JFYWNoKGZ1bmN0aW9uIChzZWxlY3Rvcikge1xuICAgICAgICAkKHNlbGVjdG9yLCBnZXRDb250YWluZXIoKSkuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgIC8vdW53cmFwIG5vdCBiZWluZyB1c2UgaW4gY2FzZSB0aGVyZSdzIG5vIGNoaWxkIGVsZW1lbnQgaW5zaWRlIGFuZCBpdHMganVzdCB0ZXh0XG4gICAgICAgICAgdW53cmFwKGl0ZW0pO1xuICAgICAgICB9KTtcbiAgICAgIH0pOyAvL3JlbW92aW5nIHRoZSBhcHBsaWVkIHRyYW5zaXRpb24gZnJvbSB0aGUgZnVsbHBhZ2Ugd3JhcHBlclxuXG4gICAgICBjc3MoZ2V0Q29udGFpbmVyKCksIHtcbiAgICAgICAgJy13ZWJraXQtdHJhbnNpdGlvbic6ICdub25lJyxcbiAgICAgICAgJ3RyYW5zaXRpb24nOiAnbm9uZSdcbiAgICAgIH0pOyAvL3Njcm9sbGluZyB0aGUgcGFnZSB0byB0aGUgdG9wIHdpdGggbm8gYW5pbWF0aW9uXG5cbiAgICAgIHdpbi5zY3JvbGxUbygwLCAwKTsgLy9yZW1vdmluZyBzZWxlY3RvcnNcblxuICAgICAgdmFyIHVzZWRTZWxlY3RvcnMgPSBbU0VDVElPTiwgU0xJREUsIFNMSURFU19DT05UQUlORVJdO1xuICAgICAgdXNlZFNlbGVjdG9ycy5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIHJlbW92ZUNsYXNzKCQoJy4nICsgaXRlbSksIGl0ZW0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgRlAuZGVzdHJveSA9IGRlc3Ryb3k7XG4gICAgZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgIHVwZGF0ZVN0cnVjdHVyYWxTdGF0ZSgpO1xuICAgICAgdXBkYXRlU3RhdGUoKTtcbiAgICAgIGdldE9wdGlvbnMoKS5zY3JvbGxCYXIgPSBnZXRPcHRpb25zKCkuc2Nyb2xsQmFyIHx8IGdldE9wdGlvbnMoKS5oeWJyaWQ7XG4gICAgICBzZXRPcHRpb25zRnJvbURPTSgpO1xuICAgICAgcHJlcGFyZURvbSgpO1xuICAgICAgdG9nZ2xlQ3NzU25hcHNXaGVuUG9zc2libGUodHJ1ZSk7XG4gICAgICBzZXRBbGxvd1Njcm9sbGluZyh0cnVlKTtcbiAgICAgIHNldE1vdXNlSGlqYWNrKHRydWUpO1xuICAgICAgc2V0QXV0b1Njcm9sbGluZyhnZXRPcHRpb25zKCkuYXV0b1Njcm9sbGluZywgJ2ludGVybmFsJyk7XG4gICAgICByZXNwb25zaXZlKCk7IC8vc2V0dGluZyB0aGUgY2xhc3MgZm9yIHRoZSBib2R5IGVsZW1lbnRcblxuICAgICAgc2V0Qm9keUNsYXNzKCk7XG5cbiAgICAgIGlmIChkb2MucmVhZHlTdGF0ZSA9PT0gJ2NvbXBsZXRlJykge1xuICAgICAgICBzY3JvbGxUb0FuY2hvcigpO1xuICAgICAgfVxuXG4gICAgICB3aW5kb3dBZGRFdmVudCgnbG9hZCcsIHNjcm9sbFRvQW5jaG9yKTtcbiAgICAgIGFmdGVyUmVuZGVyQWN0aW9ucygpOyAvLyBVcGRhdGluZyB0aGUgc3RhdGUgYWdhaW4gd2l0aCB0aGUgbmV3IERPTVxuXG4gICAgICB1cGRhdGVTdHJ1Y3R1cmFsU3RhdGUoKTtcbiAgICAgIHVwZGF0ZVN0YXRlKCk7XG4gICAgfVxuICAgIC8qXG4gICAgKiBEZXN0cm95cyBmdWxscGFnZS5qcyBwbHVnaW4gZXZlbnRzIGFuZCBvcHRpbmFsbHkgaXRzIGh0bWwgbWFya3VwIGFuZCBzdHlsZXNcbiAgICAqL1xuXG4gICAgZnVuY3Rpb24gZGVzdHJveShhbGwpIHtcbiAgICAgIHNldEF1dG9TY3JvbGxpbmcoZmFsc2UsICdpbnRlcm5hbCcpO1xuICAgICAgc2V0QWxsb3dTY3JvbGxpbmcodHJ1ZSk7XG4gICAgICBzZXRNb3VzZUhpamFjayhmYWxzZSk7XG4gICAgICBzZXRLZXlib2FyZFNjcm9sbGluZyhmYWxzZSk7XG4gICAgICBhZGRDbGFzcyhnZXRDb250YWluZXIoKSwgREVTVFJPWUVEKTtcbiAgICAgIEV2ZW50RW1pdHRlci5lbWl0KCdvbkRlc3Ryb3knKTsgLy9sZXRzIG1ha2UgYSBtZXNzIVxuXG4gICAgICBpZiAoYWxsKSB7XG4gICAgICAgIGRlc3Ryb3lTdHJ1Y3R1cmUoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgaXNPSyA9IGZ1bmN0aW9uIGlzT0soKSB7XG4gICAgICByZXR1cm4gZ2V0T3B0aW9ucygpICYmIHN0YXRlLmlzVmFsaWQgfHwgZG9jLmRvbWFpbi5pbmRleE9mKCdhbCcgKyAndmFyb3RyaScgKyAnZ28nICsgJy4nICsgJ2NvbScpID4gLTE7XG4gICAgfTtcbiAgICAvKipcbiAgICAqIERpc3BsYXlzIHdhcm5pbmdzXG4gICAgKi9cblxuXG4gICAgZnVuY3Rpb24gZGlzcGxheVdhcm5pbmdzKCkge1xuICAgICAgdmFyIGwgPSBnZXRPcHRpb25zKClbJ2xpJyArICdjJyArICdlbnNlSycgKyAnZScgKyAneSddO1xuICAgICAgdmFyIG1zZ1N0eWxlID0gJ2ZvbnQtc2l6ZTogMTVweDtiYWNrZ3JvdW5kOnllbGxvdzsnO1xuXG4gICAgICBpZiAoIWlzT0soKSkge1xuICAgICAgICBzaG93RXJyb3IoJ2Vycm9yJywgJ0Z1bGxwYWdlLmpzIHJlcXVpcmVzIGEgYGxpY2Vuc2VLZXlgIG9wdGlvbi4gUmVhZCBhYm91dCBpdCBvbiB0aGUgZm9sbG93aW5nIFVSTDonKTtcbiAgICAgICAgc2hvd0Vycm9yKCdlcnJvcicsICdodHRwczovL2dpdGh1Yi5jb20vYWx2YXJvdHJpZ28vZnVsbFBhZ2UuanMjb3B0aW9ucycpO1xuICAgICAgfSBlbHNlIGlmIChsICYmIGwubGVuZ3RoIDwgMjApIHtcbiAgICAgICAgY29uc29sZS53YXJuKCclYyBUaGlzIHdlYnNpdGUgd2FzIG1hZGUgdXNpbmcgZnVsbFBhZ2UuanMgc2xpZGVyLiBNb3JlIGluZm8gb24gdGhlIGZvbGxvd2luZyB3ZWJzaXRlOicsIG1zZ1N0eWxlKTtcbiAgICAgICAgY29uc29sZS53YXJuKCclYyBodHRwczovL2FsdmFyb3RyaWdvLmNvbS9mdWxsUGFnZS8nLCBtc2dTdHlsZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChoYXNDbGFzcygkaHRtbCwgRU5BQkxFRCkpIHtcbiAgICAgICAgc2hvd0Vycm9yKCdlcnJvcicsICdGdWxscGFnZS5qcyBjYW4gb25seSBiZSBpbml0aWFsaXplZCBvbmNlIGFuZCB5b3UgYXJlIGRvaW5nIGl0IG11bHRpcGxlIHRpbWVzIScpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9IC8vIERpc2FibGUgbXV0dWFsbHkgZXhjbHVzaXZlIHNldHRpbmdzXG5cblxuICAgICAgaWYgKGdldE9wdGlvbnMoKS5jb250aW51b3VzVmVydGljYWwgJiYgKGdldE9wdGlvbnMoKS5sb29wVG9wIHx8IGdldE9wdGlvbnMoKS5sb29wQm90dG9tKSkge1xuICAgICAgICBnZXRPcHRpb25zKCkuY29udGludW91c1ZlcnRpY2FsID0gZmFsc2U7XG4gICAgICAgIHNob3dFcnJvcignd2FybicsICdPcHRpb24gYGxvb3BUb3AvbG9vcEJvdHRvbWAgaXMgbXV0dWFsbHkgZXhjbHVzaXZlIHdpdGggYGNvbnRpbnVvdXNWZXJ0aWNhbGA7IGBjb250aW51b3VzVmVydGljYWxgIGRpc2FibGVkJyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChnZXRPcHRpb25zKCkuc2Nyb2xsT3ZlcmZsb3cgJiYgKGdldE9wdGlvbnMoKS5zY3JvbGxCYXIgfHwgIWdldE9wdGlvbnMoKS5hdXRvU2Nyb2xsaW5nKSkge1xuICAgICAgICBzaG93RXJyb3IoJ3dhcm4nLCAnT3B0aW9ucyBzY3JvbGxCYXI6dHJ1ZSBhbmQgYXV0b1Njcm9sbGluZzpmYWxzZSBhcmUgbXV0dWFsbHkgZXhjbHVzaXZlIHdpdGggc2Nyb2xsT3ZlcmZsb3c6dHJ1ZS4gU2VjdGlvbnMgd2l0aCBzY3JvbGxPdmVyZmxvdyBtaWdodCBub3Qgd29yayB3ZWxsIGluIEZpcmVmb3gnKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGdldE9wdGlvbnMoKS5jb250aW51b3VzVmVydGljYWwgJiYgKGdldE9wdGlvbnMoKS5zY3JvbGxCYXIgfHwgIWdldE9wdGlvbnMoKS5hdXRvU2Nyb2xsaW5nKSkge1xuICAgICAgICBnZXRPcHRpb25zKCkuY29udGludW91c1ZlcnRpY2FsID0gZmFsc2U7XG4gICAgICAgIHNob3dFcnJvcignd2FybicsICdTY3JvbGwgYmFycyAoYHNjcm9sbEJhcjp0cnVlYCBvciBgYXV0b1Njcm9sbGluZzpmYWxzZWApIGFyZSBtdXR1YWxseSBleGNsdXNpdmUgd2l0aCBgY29udGludW91c1ZlcnRpY2FsYDsgYGNvbnRpbnVvdXNWZXJ0aWNhbGAgZGlzYWJsZWQnKTtcbiAgICAgIH0gLy91c2luZyBleHRlbnNpb25zPyBXcm9uZyBmaWxlIVxuXG5cbiAgICAgIGV4dGVuc2lvbnMuZm9yRWFjaChmdW5jdGlvbiAoZXh0ZW5zaW9uKSB7XG4gICAgICAgIC8vaXMgdGhlIG9wdGlvbiBzZXQgdG8gdHJ1ZT9cbiAgICAgICAgaWYgKGdldE9wdGlvbnMoKVtleHRlbnNpb25dKSB7XG4gICAgICAgICAgc2hvd0Vycm9yKCd3YXJuJywgJ2Z1bGxwYWdlLmpzIGV4dGVuc2lvbnMgcmVxdWlyZSBmdWxscGFnZS5leHRlbnNpb25zLm1pbi5qcyBmaWxlIGluc3RlYWQgb2YgdGhlIHVzdWFsIGZ1bGxwYWdlLmpzLiBSZXF1ZXN0ZWQ6ICcgKyBleHRlbnNpb24pO1xuICAgICAgICB9XG4gICAgICB9KTsgLy9hbmNob3JzIGNhbiBub3QgaGF2ZSB0aGUgc2FtZSB2YWx1ZSBhcyBhbnkgZWxlbWVudCBJRCBvciBOQU1FXG5cbiAgICAgIGdldE9wdGlvbnMoKS5hbmNob3JzLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgLy9jYXNlIGluc2Vuc2l0aXZlIHNlbGVjdG9ycyAoaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMTk0NjUxODcvMTA4MTM5NilcbiAgICAgICAgdmFyIG5hbWVBdHRyID0gW10uc2xpY2UuY2FsbCgkKCdbbmFtZV0nKSkuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgcmV0dXJuIGdldEF0dHIoaXRlbSwgJ25hbWUnKSAmJiBnZXRBdHRyKGl0ZW0sICduYW1lJykudG9Mb3dlckNhc2UoKSA9PSBuYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgaWRBdHRyID0gW10uc2xpY2UuY2FsbCgkKCdbaWRdJykpLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgIHJldHVybiBnZXRBdHRyKGl0ZW0sICdpZCcpICYmIGdldEF0dHIoaXRlbSwgJ2lkJykudG9Mb3dlckNhc2UoKSA9PSBuYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChpZEF0dHIubGVuZ3RoIHx8IG5hbWVBdHRyLmxlbmd0aCkge1xuICAgICAgICAgIHNob3dFcnJvcignZXJyb3InLCAnZGF0YS1hbmNob3IgdGFncyBjYW4gbm90IGhhdmUgdGhlIHNhbWUgdmFsdWUgYXMgYW55IGBpZGAgZWxlbWVudCBvbiB0aGUgc2l0ZSAob3IgYG5hbWVgIGVsZW1lbnQgZm9yIElFKS4nKTtcbiAgICAgICAgICB2YXIgcHJvcGVydHlOYW1lID0gaWRBdHRyLmxlbmd0aCA/ICdpZCcgOiAnbmFtZSc7XG5cbiAgICAgICAgICBpZiAoaWRBdHRyLmxlbmd0aCB8fCBuYW1lQXR0ci5sZW5ndGgpIHtcbiAgICAgICAgICAgIHNob3dFcnJvcignZXJyb3InLCAnXCInICsgbmFtZSArICdcIiBpcyBpcyBiZWluZyB1c2VkIGJ5IGFub3RoZXIgZWxlbWVudCBgJyArIHByb3BlcnR5TmFtZSArICdgIHByb3BlcnR5Jyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmdWxscGFnZShjb250YWluZXJTZWxlY3Rvciwgb3B0aW9ucykge1xuICAgICAgc2V0Q2FjaGUoKTsgLy9vbmx5IG9uY2UgbXkgZnJpZW5kIVxuXG4gICAgICBpZiAoaGFzQ2xhc3MoJGh0bWwsIEVOQUJMRUQpKSB7XG4gICAgICAgIGRpc3BsYXlXYXJuaW5ncygpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHNldE9wdGlvbigndG91Y2hXcmFwcGVyJywgdHlwZW9mIGNvbnRhaW5lclNlbGVjdG9yID09PSAnc3RyaW5nJyA/ICQoY29udGFpbmVyU2VsZWN0b3IpWzBdIDogY29udGFpbmVyU2VsZWN0b3IpOyAvLyBDcmVhdGluZyBzb21lIGRlZmF1bHRzLCBleHRlbmRpbmcgdGhlbSB3aXRoIGFueSBvcHRpb25zIHRoYXQgd2VyZSBwcm92aWRlZFxuXG4gICAgICBzZXRPcHRpb25zKG9wdGlvbnMpO1xuICAgICAgc2V0Q29udGFpbmVyKHR5cGVvZiBjb250YWluZXJTZWxlY3RvciA9PT0gJ3N0cmluZycgPyAkKGNvbnRhaW5lclNlbGVjdG9yKVswXSA6IGNvbnRhaW5lclNlbGVjdG9yKTtcbiAgICAgIEV2ZW50RW1pdHRlci5lbWl0KCdvbkluaXRpYWxpc2UnKTtcbiAgICAgIGRpc3BsYXlXYXJuaW5ncygpO1xuICAgICAgc2V0QVBJKCk7XG5cbiAgICAgIGlmIChnZXRDb250YWluZXIoKSkge1xuICAgICAgICBFdmVudEVtaXR0ZXIuZW1pdCgnYmVmb3JlSW5pdCcpO1xuICAgICAgICBpbml0KCk7XG4gICAgICAgIEV2ZW50RW1pdHRlci5lbWl0KCdiaW5kRXZlbnRzJyk7XG4gICAgICB9IC8vIEB0cy1pZ25vcmVcblxuXG4gICAgICByZXR1cm4gd2luLmZ1bGxwYWdlX2FwaTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRBUEkoKSB7XG4gICAgICBGUC5nZXRGdWxscGFnZURhdGEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgb3B0aW9uczogZ2V0T3B0aW9ucygpXG4gICAgICAgIH07XG4gICAgICB9OyAvL3B1YmxpYyBmdW5jdGlvbnNcblxuXG4gICAgICBGUC52ZXJzaW9uID0gJzQuMC45JztcbiAgICAgIEZQLnRlc3QgPSBPYmplY3QuYXNzaWduKEZQLnRlc3QsIHtcbiAgICAgICAgdG9wOiAnMHB4JyxcbiAgICAgICAgdHJhbnNsYXRlM2Q6ICd0cmFuc2xhdGUzZCgwcHgsIDBweCwgMHB4KScsXG4gICAgICAgIHRyYW5zbGF0ZTNkSDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBhID0gW107XG5cbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8ICQoZ2V0T3B0aW9ucygpLnNlY3Rpb25TZWxlY3RvciwgZ2V0Q29udGFpbmVyKCkpLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhLnB1c2goJ3RyYW5zbGF0ZTNkKDBweCwgMHB4LCAwcHgpJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgIH0oKSxcbiAgICAgICAgbGVmdDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBhID0gW107XG5cbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8ICQoZ2V0T3B0aW9ucygpLnNlY3Rpb25TZWxlY3RvciwgZ2V0Q29udGFpbmVyKCkpLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhLnB1c2goMCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgIH0oKSxcbiAgICAgICAgb3B0aW9uczogZ2V0T3B0aW9ucygpLFxuICAgICAgICBzZXRBdXRvU2Nyb2xsaW5nOiBudWxsXG4gICAgICB9KTsgLy9mdW5jdGlvbnMgd2Ugd2FudCB0byBzaGFyZSBhY3Jvc3MgZmlsZXMgYnV0IHdoaWNoIGFyZSBub3RcbiAgICAgIC8vbWVhbiB0byBiZSB1c2VkIG9uIHRoZWlyIG93biBieSBkZXZlbG9wZXJzXG5cbiAgICAgIEZQLnNoYXJlZCA9IE9iamVjdC5hc3NpZ24oRlAuc2hhcmVkLCB7XG4gICAgICAgIGFmdGVyUmVuZGVyQWN0aW9uczogbnVsbCxcbiAgICAgICAgaXNOb3JtYWxTY3JvbGxFbGVtZW50OiBmYWxzZVxuICAgICAgfSk7IC8vIEB0cy1pZ25vcmVcblxuICAgICAgd2luLmZ1bGxwYWdlX2FwaSA9IEZQO1xuICAgIH1cblxuICAgIC8vIEB0cy1pZ25vcmVcblxuICAgIHdpbi5mcF9lYXNpbmdzID0gZGVlcEV4dGVuZCh3aW4uZnBfZWFzaW5ncywge1xuICAgICAgZWFzZUluT3V0Q3ViaWM6IGZ1bmN0aW9uIGVhc2VJbk91dEN1YmljKHQsIGIsIGMsIGQpIHtcbiAgICAgICAgaWYgKCh0IC89IGQgLyAyKSA8IDEpIHJldHVybiBjIC8gMiAqIHQgKiB0ICogdCArIGI7XG4gICAgICAgIHJldHVybiBjIC8gMiAqICgodCAtPSAyKSAqIHQgKiB0ICsgMikgKyBiO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogalF1ZXJ5IGFkYXB0ZXIgZm9yIGZ1bGxQYWdlLmpzIDMuMC4wXG4gICAgICovXG4gICAgLy8gQHRzLWlnbm9yZVxuXG4gICAgaWYgKHdpbi5qUXVlcnkpIHtcbiAgICAgIChmdW5jdGlvbiAoJCwgZnVsbHBhZ2UpIHtcblxuICAgICAgICBpZiAoISQgfHwgIWZ1bGxwYWdlKSB7XG4gICAgICAgICAgc2hvd0Vycm9yKCdlcnJvcicsICdqUXVlcnkgaXMgcmVxdWlyZWQgdG8gdXNlIHRoZSBqUXVlcnkgZnVsbHBhZ2UgYWRhcHRlciEnKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAkLmZuLmZ1bGxwYWdlID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgICBvcHRpb25zID0gJC5leHRlbmQoe30sIG9wdGlvbnMsIHtcbiAgICAgICAgICAgICckJzogJFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIG5ldyBmdWxscGFnZSh0aGlzWzBdLCBvcHRpb25zKTsgLy8gQ3JlYXRpbmcgdGhlICQuZm4uZnVsbHBhZ2Ugb2JqZWN0XG5cbiAgICAgICAgICBPYmplY3Qua2V5cyhGUCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICBnZXRPcHRpb25zKCkuJC5mbi5mdWxscGFnZVtrZXldID0gRlBba2V5XTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfTsgLy8gQHRzLWlnbm9yZVxuXG4gICAgICB9KSh3aW4ualF1ZXJ5LCBmdWxscGFnZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bGxwYWdlO1xuXG59KSk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGZ1bGxwYWdlX2pzXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImZ1bGxwYWdlLmpzXCIpKTtcbmNvbnN0IHByb2plY3RfanNvbl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuLi9wcm9qZWN0Lmpzb25cIikpO1xudmFyIGZ1bGxQYWdlSW5zdGFuY2UgPSAoMCwgZnVsbHBhZ2VfanNfMS5kZWZhdWx0KSgnI2Z1bGxwYWdlJywge1xuICAgIG5hdmlnYXRpb246IGZhbHNlLFxuICAgIC8vc2VjdGlvbnNDb2xvcjogWycjMjYyNjI2JywgJyMyNjI2MjYnLCAnIzI2MjYyNicsICcjMjYyNjI2J10sXG4gICAgYW5pbWF0ZUFuY2hvcjogZmFsc2UsXG4gICAgYW5jaG9yczogcHJvamVjdF9qc29uXzEuZGVmYXVsdC5TZWN0aW9ucyxcbiAgICBtZW51OiAnLm1lbnUnLFxuICAgIHNjcm9sbGluZ1NwZWVkOiA4MDAsXG4gICAgbGljZW5zZUtleTogXCI5VksxOC1RSzM4SC1NS0dISS1KOE4ySC1PVk5YTlwiXG59KTtcbi8vUGFyYWxsYXggbG9naWNcbmNvbnN0IHBhcmFsbGF4RWxlbWVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnBhcmFsbGF4XCIpO1xuZm9yIChsZXQgZWxlbSBvZiBwYXJhbGxheEVsZW1lbnRzKSB7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgKGUpID0+IHBhcmFsbGF4KGUsIGVsZW0pKTtcbiAgICAvL2VsZW0uYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIChlOk1vdXNlRXZlbnQpID0+IHBhcmFsbGF4UmVzZXQoZWxlbSkpO1xufVxuZnVuY3Rpb24gcGFyYWxsYXgoZSwgZWxlbSkge1xuICAgIGNvbnN0IHJlY3QgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIGxldCB3ID0gcmVjdC53aWR0aCAvIDI7XG4gICAgbGV0IGggPSByZWN0LmhlaWdodCAvIDI7XG4gICAgbGV0IHggPSBlLmNsaWVudFggLSByZWN0LmxlZnQ7XG4gICAgbGV0IHkgPSBlLmNsaWVudFkgLSByZWN0LnRvcDtcbiAgICBsZXQgZGVwdGggPSBgdHJhbnNsYXRlKCR7KHggLSB3KSAqIDAuMDZ9cHgsICR7KHkgLSBoKSAqIDAuMDZ9cHgpYDtcbiAgICBlbGVtLnN0eWxlLnRyYW5zZm9ybSA9IGRlcHRoO1xuICAgIGVsZW0uc3R5bGUudHJhbnNpdGlvbiA9IFwiXCI7XG59XG5mdW5jdGlvbiBwYXJhbGxheFJlc2V0KGVsZW0pIHtcbiAgICBlbGVtLnN0eWxlLnRyYW5zaXRpb24gPSBcIjIwMG1zIGVhc2VcIjtcbiAgICBlbGVtLnN0eWxlLnRyYW5zZm9ybSA9IFwidHJhbnNsYXRlKDAsMClcIjtcbn1cbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBzdGFydHVwXG4vLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8vIFRoaXMgZW50cnkgbW9kdWxlIGlzIHJlZmVyZW5jZWQgYnkgb3RoZXIgbW9kdWxlcyBzbyBpdCBjYW4ndCBiZSBpbmxpbmVkXG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oNjA3KTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwidG9TdHIiLCJpc0NhbGxhYmxlIiwidG9JbnRlZ2VyIiwibWF4U2FmZUludGVnZXIiLCJ0b0xlbmd0aCIsIkFycmF5IiwicHJvdG90eXBlIiwiZmluZCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwidmFsdWUiLCJwcmVkaWNhdGUiLCJ0aGlzIiwiVHlwZUVycm9yIiwibyIsImxlbiIsImxlbmd0aCIsInRoaXNBcmciLCJhcmd1bWVudHMiLCJrIiwia1ZhbHVlIiwiY2FsbCIsImZyb20iLCJ0b1N0cmluZyIsImZuIiwibnVtYmVyIiwiTnVtYmVyIiwiaXNOYU4iLCJpc0Zpbml0ZSIsIk1hdGgiLCJmbG9vciIsImFicyIsInBvdyIsIm1pbiIsIm1heCIsImFycmF5TGlrZSIsIkMiLCJpdGVtcyIsIlQiLCJtYXBGbiIsIkEiLCJ3aW4iLCJ3aW5kb3ciLCJkb2MiLCJkb2N1bWVudCIsImlzVG91Y2hEZXZpY2UiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJtYXRjaCIsImlzTWFjRGV2aWNlIiwidGVzdCIsImlzVG91Y2giLCJtc01heFRvdWNoUG9pbnRzIiwibWF4VG91Y2hQb2ludHMiLCJGUCIsInNoYXJlZCIsImV4dGVuc2lvbnMiLCJzaG93RXJyb3IiLCJ0eXBlIiwidGV4dCIsImNvbnNvbGUiLCJpc1Zpc2libGUiLCJlbCIsImdldENvbXB1dGVkU3R5bGUiLCJkaXNwbGF5IiwiZ2V0VmlzaWJsZSIsImVsZW1lbnRzIiwiZmlsdGVyIiwiZSIsIiQiLCJzZWxlY3RvciIsImNvbnRleHQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZGVlcEV4dGVuZCIsIm91dCIsImkiLCJvYmoiLCJrZXkiLCJoYXNPd25Qcm9wZXJ0eSIsImhhc0NsYXNzIiwiY2xhc3NOYW1lIiwiY2xhc3NMaXN0IiwiY29udGFpbnMiLCJnZXRXaW5kb3dIZWlnaHQiLCJpbm5lckhlaWdodCIsImRvY3VtZW50RWxlbWVudCIsIm9mZnNldEhlaWdodCIsImdldFdpbmRvd1dpZHRoIiwiaW5uZXJXaWR0aCIsImNzcyIsInByb3BzIiwiZ2V0TGlzdCIsInN0eWxlIiwicHJldiIsIml0ZW0iLCJwcmV2aW91c0VsZW1lbnRTaWJsaW5nIiwibmV4dCIsIm5leHRFbGVtZW50U2libGluZyIsImluZGV4IiwiaXNBcnJheU9yTGlzdCIsImNoaWxkcmVuIiwicGFyZW50Tm9kZSIsImNoaWxkTm9kZXMiLCJudW0iLCJub2RlVHlwZSIsImhpZGUiLCJzaG93IiwiYWRkQ2xhc3MiLCJhZGQiLCJyZW1vdmVDbGFzcyIsImNsYXNzTmFtZXMiLCJzcGxpdCIsImEiLCJyZW1vdmUiLCJhcHBlbmRUbyIsInBhcmVudCIsImFwcGVuZENoaWxkIiwid3JhcCIsInRvV3JhcCIsIndyYXBwZXIiLCJpc1dyYXBBbGwiLCJuZXdQYXJlbnQiLCJjcmVhdGVFbGVtZW50IiwiY2xvbmVOb2RlIiwiaW5zZXJ0QmVmb3JlIiwid3JhcEFsbCIsInVud3JhcCIsIndyYXBwZXJDb250ZW50IiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsImZpcnN0Q2hpbGQiLCJyZXBsYWNlQ2hpbGQiLCJjbG9zZXN0IiwibWF0Y2hlcyIsImFmdGVyIiwicmVmZXJlbmNlIiwibmV4dFNpYmxpbmciLCJiZWZvcmUiLCJiZWZvcmVFbGVtZW50IiwiY3JlYXRlRWxlbWVudEZyb21IVE1MIiwiZ2V0U2Nyb2xsVG9wIiwib3B0aW9ucyIsImZpdFRvU2VjdGlvbiIsImJvZHkiLCJzY3JvbGxUb3AiLCJkb2NFbGVtZW50IiwicGFnZVlPZmZzZXQiLCJjbGllbnRUb3AiLCJzaWJsaW5ncyIsImNoaWxkIiwicHJldmVudERlZmF1bHQiLCJldmVudCIsImdldEF0dHIiLCJhdHRyIiwiZ2V0QXR0cmlidXRlIiwiZG9jQWRkRXZlbnQiLCJjYWxsYmFjayIsImFkZEV2ZW50TGlzdGVuZXIiLCJ3aW5kb3dBZGRFdmVudCIsImRvY1JlbW92ZUV2ZW50IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIndpbmRvd1JlbW92ZUV2ZW50IiwiaXNGdW5jdGlvbiIsInRyaWdnZXIiLCJldmVudE5hbWUiLCJkYXRhIiwiQ3VzdG9tRXZlbnQiLCJkZXRhaWwiLCJjcmVhdGVFdmVudCIsImluaXRDdXN0b21FdmVudCIsImRpc3BhdGNoRXZlbnQiLCJtYXRjaGVzU2VsZWN0b3IiLCJtc01hdGNoZXNTZWxlY3RvciIsIm1vek1hdGNoZXNTZWxlY3RvciIsIndlYmtpdE1hdGNoZXNTZWxlY3RvciIsIm9NYXRjaGVzU2VsZWN0b3IiLCJ0b2dnbGUiLCJodG1sU3RyaW5nIiwiZGl2IiwiaW5uZXJIVE1MIiwidHJpbSIsInBhcmVudEVsZW1lbnQiLCJyZW1vdmVDaGlsZCIsInVudGlsQWxsIiwic2libGluZyIsInB1c2giLCJuZXh0QWxsIiwicHJldkFsbCIsImdldExhc3QiLCJnZXRBdmVyYWdlIiwic3VtIiwibGFzdEVsZW1lbnRzIiwic2xpY2UiLCJjZWlsIiwic2V0U3JjIiwiZWxlbWVudCIsImF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZSIsInJlbW92ZUF0dHJpYnV0ZSIsIl90eXBlb2YiLCJTeW1ib2wiLCJpdGVyYXRvciIsImNvbnN0cnVjdG9yIiwiTm9kZUxpc3QiLCJmb3JFYWNoIiwiYXNzaWduIiwidGFyZ2V0IiwidmFyQXJncyIsInRvIiwibmV4dFNvdXJjZSIsIm5leHRLZXkiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsIkV2ZW50RW1pdHRlciIsImV2ZW50cyIsIm9uIiwibGlzdGVuZXIiLCJfdGhpcyIsInJlbW92ZUxpc3RlbmVyIiwiaWR4IiwiaW5kZXhPZiIsInNwbGljZSIsImVtaXQiLCJfdGhpczIiLCJfbGVuIiwiYXJncyIsIl9rZXkiLCJhcHBseSIsIm9uY2UiLCJfdGhpczMiLCJfbGVuMiIsIl9rZXkyIiwic3RhdGUiLCJudW1TZWN0aW9ucyIsIm51bVNsaWRlcyIsInNsaWRlcyIsInNlY3Rpb25zIiwiYWN0aXZlU2VjdGlvbiIsInNjcm9sbFRyaWdnZXIiLCJpc0JleW9uZEZ1bGxwYWdlIiwiYWJvdXRUb1Njcm9sbFRvRnVsbFBhZ2UiLCJzbGlkZU1vdmluZyIsImlzUmVzaXppbmciLCJpc1Njcm9sbGluZyIsImxhc3RTY3JvbGxlZERlc3RpbnkiLCJ1bmRlZmluZWQiLCJsYXN0U2Nyb2xsZWRTbGlkZSIsImFjdGl2ZUFuaW1hdGlvbiIsImNhblNjcm9sbCIsInRvdWNoRGlyZWN0aW9uIiwid2hlZWxEaXJlY3Rpb24iLCJpc0dyYWJiaW5nIiwiaXNVc2luZ1doZWVsIiwiaXNXaW5kb3dGb2N1c2VkIiwicHJldmlvdXNEZXN0VG9wIiwid2luZG93c0hlaWdodCIsImlzRG9pbmdDb250aW5vdXNWZXJ0aWNhbCIsInRpbWVvdXRzIiwic2Nyb2xsWSIsInNjcm9sbFgiLCJzZXRTdGF0ZSIsImdldFN0YXRlIiwiZGVsZWdhdGVkRXZlbnRzIiwib25EZXN0cm95JDgiLCJmb2N1c0hhbmRsZXIiLCJXUkFQUEVSIiwiV1JBUFBFUl9TRUwiLCJSRVNQT05TSVZFIiwiTk9fVFJBTlNJVElPTiIsIkRFU1RST1lFRCIsIkVOQUJMRUQiLCJWSUVXSU5HX1BSRUZJWCIsIkFDVElWRSIsIkFDVElWRV9TRUwiLCJDT01QTEVURUxZIiwiU0VDVElPTiIsIlNFQ1RJT05fU0VMIiwiU0VDVElPTl9BQ1RJVkVfU0VMIiwiVEFCTEVfQ0VMTF9TRUwiLCJBVVRPX0hFSUdIVCIsIkFVVE9fSEVJR0hUX1JFU1BPTlNJVkUiLCJTRUNUSU9OX05BViIsIlNFQ1RJT05fTkFWX1NFTCIsIlNMSURFIiwiU0xJREVfU0VMIiwiU0xJREVfQUNUSVZFX1NFTCIsIlNMSURFU19XUkFQUEVSIiwiU0xJREVTX1dSQVBQRVJfU0VMIiwiU0xJREVTX0NPTlRBSU5FUiIsIlNMSURFU19DT05UQUlORVJfU0VMIiwiVEFCTEUiLCJPVkVSRkxPVyIsIk9WRVJGTE9XX1NFTCIsIlNMSURFU19OQVYiLCJTTElERVNfTkFWX1NFTCIsIlNMSURFU19OQVZfTElOS19TRUwiLCJTTElERVNfQVJST1ciLCJTTElERVNfQVJST1dfU0VMIiwiU0xJREVTX1BSRVYiLCJTTElERVNfQVJST1dfUFJFVl9TRUwiLCJTTElERVNfTkVYVCIsIlNMSURFU19BUlJPV19ORVhUX1NFTCIsImRlZmF1bHRPcHRpb25zIiwibWVudSIsImFuY2hvcnMiLCJsb2NrQW5jaG9ycyIsIm5hdmlnYXRpb24iLCJuYXZpZ2F0aW9uUG9zaXRpb24iLCJuYXZpZ2F0aW9uVG9vbHRpcHMiLCJzaG93QWN0aXZlVG9vbHRpcCIsInNsaWRlc05hdmlnYXRpb24iLCJzbGlkZXNOYXZQb3NpdGlvbiIsInNjcm9sbEJhciIsImh5YnJpZCIsImxpY2Vuc2VLZXkiLCJjcmVkaXRzIiwiY3NzMyIsInNjcm9sbGluZ1NwZWVkIiwiYXV0b1Njcm9sbGluZyIsImVhc2luZyIsImVhc2luZ2NzczMiLCJsb29wQm90dG9tIiwibG9vcFRvcCIsImxvb3BIb3Jpem9udGFsIiwiY29udGludW91c1ZlcnRpY2FsIiwiY29udGludW91c0hvcml6b250YWwiLCJzY3JvbGxIb3Jpem9udGFsbHkiLCJpbnRlcmxvY2tlZFNsaWRlcyIsImRyYWdBbmRNb3ZlIiwib2Zmc2V0U2VjdGlvbnMiLCJyZXNldFNsaWRlcnMiLCJmYWRpbmdFZmZlY3QiLCJub3JtYWxTY3JvbGxFbGVtZW50cyIsInNjcm9sbE92ZXJmbG93Iiwic2Nyb2xsT3ZlcmZsb3dSZXNldCIsInRvdWNoU2Vuc2l0aXZpdHkiLCJ0b3VjaFdyYXBwZXIiLCJiaWdTZWN0aW9uc0Rlc3RpbmF0aW9uIiwia2V5Ym9hcmRTY3JvbGxpbmciLCJhbmltYXRlQW5jaG9yIiwicmVjb3JkSGlzdG9yeSIsImFsbG93Q29ycmVjdERpcmVjdGlvbiIsInNjcm9sbE92ZXJmbG93TWFjU3R5bGUiLCJjb250cm9sQXJyb3dzIiwiY29udHJvbEFycm93c0hUTUwiLCJjb250cm9sQXJyb3dDb2xvciIsInZlcnRpY2FsQ2VudGVyZWQiLCJzZWN0aW9uc0NvbG9yIiwicGFkZGluZ1RvcCIsInBhZGRpbmdCb3R0b20iLCJmaXhlZEVsZW1lbnRzIiwicmVzcG9uc2l2ZSIsInJlc3BvbnNpdmVXaWR0aCIsInJlc3BvbnNpdmVIZWlnaHQiLCJyZXNwb25zaXZlU2xpZGVzIiwicGFyYWxsYXgiLCJwYXJhbGxheE9wdGlvbnMiLCJwZXJjZW50YWdlIiwicHJvcGVydHkiLCJjYXJkcyIsImNhcmRzT3B0aW9ucyIsInBlcnNwZWN0aXZlIiwiZmFkZUNvbnRlbnQiLCJmYWRlQmFja2dyb3VuZCIsInNlY3Rpb25TZWxlY3RvciIsInNsaWRlU2VsZWN0b3IiLCJhZnRlckxvYWQiLCJiZWZvcmVMZWF2ZSIsIm9uTGVhdmUiLCJhZnRlclJlbmRlciIsImFmdGVyUmVzaXplIiwiYWZ0ZXJSZUJ1aWxkIiwiYWZ0ZXJTbGlkZUxvYWQiLCJvblNsaWRlTGVhdmUiLCJhZnRlclJlc3BvbnNpdmUiLCJvblNjcm9sbE92ZXJmbG93IiwibGF6eUxvYWRpbmciLCJvYnNlcnZlciIsImNvbnRhaW5lciIsImdfaW5pdGlhbEFuY2hvcnNJbkRvbSIsIm9yaWdpbmFscyIsImdfb3B0aW9ucyIsImdldENvbnRhaW5lciIsImdldE9wdGlvbnMiLCJnZXRPcmlnaW5hbHMiLCJzZXRWYXJpYWJsZVN0YXRlIiwidmFyaWFibGUiLCJzZXRPcHRpb25zRnJvbURPTSIsImFuY2hvcnNBdHRyaWJ1dGUiLCJqb2luIiwidG9vbHRpcHNBdHRyaWJ1dGUiLCJ0b29sdGlwcyIsInBsYWluSXRlbSIsInBhbmVsIiwiYW5jaG9yIiwiaXNMYXN0IiwiaXNGaXJzdCIsImlzQWN0aXZlIiwiSXRlbSIsImhhc1Njcm9sbCIsImlzU2VjdGlvbiIsImdldE5vZGVzIiwicGFuZWxzIiwibWFwIiwiZ2V0UGFuZWxCeUVsZW1lbnQiLCJzZWN0aW9uc0luY2x1ZGluZ0hpZGRlbiIsInByZXZJbmRleCIsIm5leHRJbmRleCIsImdldFNpYmxpbmdzIiwic2lsZW50U2Nyb2xsSWQiLCJTZWN0aW9uIiwiU2xpZGUiLCJnZXRTbGlkZU9yU2VjdGlvbiIsImRlc3RpbnkiLCJzbGlkZSIsImdldFNjcm9sbFNldHRpbmdzIiwidG9wIiwicG9zaXRpb24iLCJzZXRTY3JvbGxpbmciLCJ2YWwiLCJzZWxmIiwic2Nyb2xsTGVmdCIsInNjcm9sbFRvIiwiYWRkQW5pbWF0aW9uIiwidHJhbnNpdGlvbiIsImdldFltb3ZlbWVudCIsImZyb21JbmRleCIsInRvSW5kZXgiLCJyZW1vdmVBbmltYXRpb24iLCJnZXRUcmFuc2Zvcm1zIiwidHJhbnNsYXRlM2QiLCJ0cmFuc2Zvcm1Db250YWluZXIiLCJhbmltYXRlZCIsImNsZWFyVGltZW91dCIsInNldFRpbWVvdXQiLCJzaWxlbnRTY3JvbGwiLCJyb3VuZGVkVG9wIiwicm91bmQiLCJzY3JvbGxTZXR0aW5ncyIsInNldFNjcm9sbGluZ1NwZWVkIiwiZHVyYXRpb24iLCJzdGFydFRpbWUiLCJzdGFydCIsIm9mZnNldFRvcCIsImdldFNjcm9sbGVkUG9zaXRpb24iLCJjaGFuZ2UiLCJpc0NhbGxiYWNrRmlyZWQiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJhbmltYXRlU2Nyb2xsIiwidGltZXN0YW1wIiwiY3VycmVudFRpbWUiLCJmcF9lYXNpbmdzIiwibnVsbE9yU2VjdGlvbiIsIlNlY3Rpb25QYW5lbCIsIm51bGxPclNsaWRlIiwiZmlyZUNhbGxiYWNrIiwidiIsIm9iamVjdERhdGEiLCJldmVudERhdGEiLCJwYXJhbXNQZXJFdmVudCIsInNlY3Rpb24iLCJhY3RpdmVTbGlkZSIsIm9yaWdpbiIsImRlc3RpbmF0aW9uIiwiZGlyZWN0aW9uIiwiZ2V0RXZlbnREYXRhIiwia2V5cyIsInBsYXlNZWRpYSIsImhhc0F0dHJpYnV0ZSIsInBsYXkiLCJwbGF5WW91dHViZSIsIm9ubG9hZCIsImNvbnRlbnRXaW5kb3ciLCJwb3N0TWVzc2FnZSIsInN0b3BNZWRpYSIsInBhdXNlIiwiZW5hYmxlWW91dHViZUFQSSIsIm5ld1BhcmFtIiwib3JpZ2luYWxTcmMiLCJsYXp5TG9hZCIsImVsZW1lbnRUb1BsYXkiLCJsb2FkIiwib25sb2FkZWRkYXRhIiwiJGJvZHkiLCIkaHRtbCIsIiRodG1sQm9keSIsInNldEJvZHlDbGFzcyIsInNlY3Rpb25BbmNob3IiLCJnZXRBbmNob3IiLCJTdHJpbmciLCJyZXBsYWNlIiwiY2xhc3NSZSIsIlJlZ0V4cCIsImVsZW1lbnRJbmRleCIsInNldFBhZ2VTdGF0dXMiLCJzbGlkZUluZGV4Iiwic2xpZGVBbmNob3IiLCJhbmNob3JMaW5rIiwic2VjdGlvbkhhc2giLCJzZXRVcmxIYXNoIiwidXJsIiwibG9jYXRpb24iLCJoYXNoIiwiaGlzdG9yeSIsInJlcGxhY2VTdGF0ZSIsImJhc2VVcmwiLCJocmVmIiwiZ2V0QnVsbGV0TGlua05hbWUiLCJkZWZhdWx0TmFtZSIsImVuY29kZVVSSSIsInNsaWRlQnVsbGV0SGFuZGxlciIsInNlY3Rpb25FbGVtIiwiZ19hZnRlclNsaWRlTG9hZHNJZCIsImlzU2Nyb2xsQWxsb3dlZCIsInNldElzU2Nyb2xsQWxsb3dlZCIsImdldElzU2Nyb2xsQWxsb3dlZCIsInNsaWRlQXJyb3dIYW5kbGVyIiwibSIsImxlZnQiLCJyaWdodCIsIm9uUGVyZm9ybU1vdmVtZW50IiwibGFuZHNjYXBlU2Nyb2xsIiwib2Zmc2V0TGVmdCIsInhNb3ZlbWVudCIsInByZXZTbGlkZUluZGV4IiwibG9jYWxJc1Jlc2l6aW5nIiwidXBkYXRlU3RhdGUiLCJwcmV2U2xpZGUiLCJ0b2dnbGVDb250cm9sQXJyb3dzIiwiZGVzdGlueVBvcyIsInNsaWRlc05hdiIsInRyYW5zbGF0ZTNkSCIsInNlY3Rpb25JbmRleCIsImFmdGVyU2xpZGVMb2FkcyIsInBlcmZvcm1Ib3Jpem9udGFsTW92ZSIsIm9uRGVzdHJveSQ3Iiwic2lsZW50TGFuZHNjYXBlU2Nyb2xsIiwibm9DYWxsYmFja3MiLCJwYXJhbXMiLCJnX3ByZXZBY3RpdmVTZWN0aW9uSW5kZXgiLCJnX3ByZXZBY3RpdmVTbGlkZUluZGV4IiwiaXNBY3RpdmVTbGlkZSIsImFjdGl2ZVNlY3Rpb25IYXNTbGlkZXMiLCJuZXdBY3RpdmVTZWN0aW9uIiwiZ2V0TmV3QWN0aXZlUGFuZWwiLCJuZXdBY3RpdmVTbGlkZSIsInNjcm9sbFRvTmV3QWN0aXZlUGFuZWwiLCJ1cGRhdGVTdHJ1Y3R1cmFsU3RhdGUiLCJhbGxTZWN0aW9uSXRlbXMiLCJzZWN0aW9uc0l0ZW1zIiwiYWxsU2VjdGlvbnMiLCJyZWR1Y2UiLCJhY2MiLCJjb25jYXQiLCJnZXRQcmV2QWN0aXZlUGFuZWxJbmRleCIsImFjdGl2ZVBhbmVsIiwicHJldkFjdGl2ZVBhbmVsSXRlbSIsImhpZGRlblBhbmVscyIsInNsaWRlc0luY2x1ZGluZ0hpZGRlbiIsInByZXZBY3RpdmVQYW5lbEluZGV4IiwiYWxsU2xpZGVzSXRlbXMiLCJTbGlkZVBhbmVsIiwic2xpZGVQYW5lbCIsImFkZEludGVybmFsU2VsZWN0b3JzIiwidG9vbHRpcFRleHRIYW5kbGVyIiwiYWRkVmVydGljYWxOYXZpZ2F0aW9uIiwiZGl2VWwiLCJuYXYiLCJsaSIsImxpbmsiLCJ0b29sdGlwIiwiYnVsbGV0Iiwic2VjdGlvbkJ1bGxldEhhbmRsZXIiLCJpbmRleEJ1bGxldCIsInNldFJlY29yZEhpc3RvcnkiLCJzZXRBdXRvU2Nyb2xsaW5nIiwic2V0Rml0VG9TZWN0aW9uIiwiZ19pc0Nzc1NuYXBzU3VwcG9ydGVkIiwidG9nZ2xlQ3NzU25hcHNXaGVuUG9zc2libGUiLCJ3aWR0aExpbWl0IiwiaGVpZ2h0TGltaXQiLCJpc0JyZWFraW5nUG9pbnRXaWR0aCIsImlzQnJlYWtpbmdQb2ludEhlaWdodCIsInNldFJlc3BvbnNpdmUiLCJhY3RpdmUiLCJpc1Jlc3BvbnNpdmUiLCJpc1Jlc3BvbnNpdmVNb2RlIiwic2Nyb2xsT3ZlcmZsb3dIYW5kbGVyIiwibWFrZVNjcm9sbGFibGUiLCJhZnRlclNlY3Rpb25Mb2FkcyIsIm9uUGFuZWxTY3JvbGwiLCJwcmV2ZW50U2Nyb2xsV2hpbGVNb3ZpbmciLCJibHVyRm9jdXNPbkFmdGVyTG9hZCIsInByZXZQb3NpdGlvbiIsImZvY3VzZWRFbGVtIiwidGltZUJlZm9yZVJlYWNoaW5nTGltaXQiLCJ0aW1lTGFzdFNjcm9sbCIsImFjdGl2ZUVsZW1lbnQiLCJibHVyIiwiZm9jdXMiLCJzY3JvbGxhYmxlIiwic2hvdWxkQmVTY3JvbGxhYmxlIiwic2VjdGlvbkl0ZW0iLCJpc1Njcm9sbGFibGUiLCJzY3JvbGxIZWlnaHQiLCJpc1Njcm9sbGVkIiwic2Nyb2xsYWJsZUl0ZW0iLCJwb3NpdGlvblkiLCJpc1RvcFJlYWNoZWQiLCJpc0JvdHRvbVJlYWNoZWQiLCJEYXRlIiwiZ2V0VGltZSIsInNob3VsZE1vdmVQYWdlIiwidGltZURpZmYiLCJpc05vdEZpcnN0VGltZVJlYWNoaW5nTGltaXQiLCJjdXJyZW50UG9zaXRpb24iLCJhZGRUYWJsZUNsYXNzIiwic3R5bGVTbGlkZXMiLCJzbGlkZXNFbGVtcyIsInNsaWRlcldpZHRoIiwic2xpZGVXaWR0aCIsInNsaWRlc1dyYXBwZXIiLCJzbGlkZXNDb250YWluZXIiLCJhcnJvd3MiLCJjcmVhdGVTbGlkZUFycm93cyIsImFjdGl2ZVNsaWRlSW5kZXgiLCJhZGRTbGlkZXNOYXZpZ2F0aW9uIiwic3RhcnRpbmdTbGlkZSIsImdfd3JhcHBlck9ic2VydmVyIiwic3RhcnRpbmdTZWN0aW9uIiwic3R5bGVTZWN0aW9uIiwiaGFzU2xpZGVzIiwiZ2V0QWN0aXZlU2VjdGlvbiIsImdfd3JhcHBlck9ic2VydmVDb25maWciLCJhdHRyaWJ1dGVzIiwic3VidHJlZSIsImNoaWxkTGlzdCIsImNoYXJhY3RlckRhdGEiLCJkaWRTbGlkZXNDaGFuZ2UiLCJkaWRTZWN0aW9uc09yU2xpZGVzQ2hhbmdlIiwib25Db250ZW50Q2hhbmdlIiwibXV0YXRpb25zIiwiX2RpZFNsaWRlc0NoYW5nZSIsImRpc2Nvbm5lY3QiLCJvYnNlcnZlIiwiY29uZmlnIiwiTXV0YXRpb25PYnNlcnZlciIsInJlbmRlciIsInN1cHBvcnRzUGFzc2l2ZUV2ZW50cyIsImdfc3VwcG9ydHNQYXNzaXZlIiwib3B0cyIsImdldCIsImdldFBhc3NpdmVPcHRpb25zSWZQb3NzaWJsZSIsInBhc3NpdmUiLCJpc1Njcm9sbGluZ1ZlcnRpY2FsbHkiLCJfcHJldlRpbWUiLCJfc2Nyb2xsaW5ncyIsInJlc3VsdCIsInByZXZXaGVlbFRpbWUiLCJvbmNlUGVyU2Nyb2xsIiwidGltZVRocmVzaG9sZCIsIndoZWVsRGF0YUhhbmRsZXIiLCJyZWdpc3RlckV2ZW50Iiwid2hlZWxEZWx0YSIsImRlbHRhWSIsImRlbHRhIiwiaG9yaXpvbnRhbERldGVjdGlvbiIsIndoZWVsRGVsdGFYIiwiZGVsdGFYIiwiY3VyVGltZSIsInNoaWZ0IiwiaXNBY2NlbGVyYXRpbmciLCJnZXREaXJlY3Rpb24iLCJzY3JvbGxCZXlvbmRGdWxsUGFnZSIsImR0b3AiLCJvbktleURvd24iLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJib3R0b20iLCJzY3JvbGxVcFRvRnVsbHBhZ2UiLCJpc0Fib3V0VG9TY3JvbGxUb0Z1bGxQYWdlIiwiZ19hZnRlclNlY3Rpb25Mb2Fkc0lkIiwiZ190cmFuc2l0aW9uTGFwc2VJZCIsImlzTmV3IiwiZnJhbWVzIiwidGltZWZyYW1lcyIsImtleWZyYW1lVGltZSIsImFjdGlvbiIsIm5hbWUiLCJ0aW1lZnJhbWUiLCJjdXJyZW50IiwiY3JlYXRlSW5maW5pdGVTZWN0aW9ucyIsImFjdGl2ZVNlY3Rpb25JdGVtIiwiaXNNb3ZlbWVudFVwIiwicmV2ZXJzZSIsImFjdGl2ZVNsaWRlcyIsImtlZXBTbGlkZXNQb3NpdGlvbiQxIiwid3JhcEFyb3VuZEVsZW1lbnRzIiwieU1vdmVtZW50IiwiY29udGludW91c1ZlcnRpY2FsRml4U2VjdGlvbk9yZGVyIiwia2VlcFNsaWRlc1Bvc2l0aW9uIiwibGF6eUxvYWRPdGhlcnMiLCJoYXNBdXRvSGVpZ2h0U2VjdGlvbnMiLCJyZWN0IiwicGl4ZWxPZmZzZXQiLCJpc1RvcEluVmlldyIsImlzQm90dG9tSW5WaWV3IiwiYWN0aXZhdGVNZW51QW5kTmF2IiwiYWN0aXZhdGVOYXZEb3RzIiwiZmlyZUNhbGxiYWNrT25jZVBlclNjcm9sbCIsImNhbGxiYWNrTmFtZSIsInNjcm9sbFBhZ2UiLCJzbGlkZUFuY2hvckxpbmsiLCJnZXREZXN0aW5hdGlvblBvc2l0aW9uIiwiaXNUZXN0aW5nIiwiaXNGYXN0U3BlZWQiLCJ0cmFuc2l0aW9uTGFwc2UiLCJwZXJmb3JtTW92ZW1lbnQiLCJlbGVtZW50SGVpZ2h0IiwiZWxlbWVudFRvcCIsImlzU2Nyb2xsaW5nRG93biIsInNlY3Rpb25Cb3R0b20iLCJtb3ZlU2VjdGlvbkRvd24iLCJtb3ZlU2VjdGlvblVwIiwibW92ZVRvIiwiZ2V0U2Nyb2xsWSIsIm9sZFBhZ2VZIiwibW91c2VNb3ZlSGFuZGxlciIsInBhZ2VZIiwidXAiLCJkb3duIiwic2Nyb2xsaW5nIiwic2Nyb2xsU2VjdGlvbiIsImdfY29udHJvbFByZXNzZWQiLCJnX2tleWRvd25JZCIsInBvaW50ZXIiLCJ0b3VjaFN0YXJ0WSIsInRvdWNoU3RhcnRYIiwidG91Y2hFbmRZIiwidG91Y2hFbmRYIiwiTVNQb2ludGVyIiwiUG9pbnRlckV2ZW50IiwibW92ZSIsInRvdWNobW92ZSIsInRvdWNoc3RhcnQiLCJ0b3VjaE1vdmVIYW5kbGVyIiwiaGFzQWN0aXZlU2VjdGlvbk92ZXJmbG93IiwiaXNSZWFsbHlUb3VjaCIsInRvdWNoRXZlbnRzIiwiZ2V0RXZlbnRzUGFnZSIsInkiLCJ4IiwiaXNWZXJ0aWNhbE1vdmVtZW50RW5vdWdoIiwiaXNIb3Jpem9udGFsTW92ZW1lbnRFbm91Z2giLCJpc0hvcml6b250YWxQcmVkb21pbmFudE1vdmUiLCJkaXJlY3Rpb25WIiwicG9pbnRlclR5cGUiLCJ0b3VjaFN0YXJ0SGFuZGxlciIsInRvdWNoRW5kSGFuZGxlciIsInBhZ2VYIiwidG91Y2hlcyIsInByZXZlbnRCb3VuY2luZyIsIm1vdmVTbGlkZSIsImN1cnJlbnRTbGlkZSIsIm1vdmVTbGlkZUxlZnQiLCJtb3ZlU2xpZGVSaWdodCIsImdldFNlY3Rpb25CeUFuY2hvciIsInNjcm9sbFNsaWRlciIsInNsaWRlRWxlbSIsInNjcm9sbFBhZ2VBbmRTbGlkZSIsImdldFNsaWRlQnlBbmNob3IiLCJtb3ZlVG8kMSIsIm9uRGVzdHJveSQ1Iiwia2V5ZG93bkhhbmRsZXIiLCJrZXlVcEhhbmRsZXIiLCJpc0luc2lkZUlucHV0Iiwia2V5Q29kZSIsImlzUHJlc3NpbmdIb3Jpem9udGFsQXJyb3dzIiwiY2FuU2Nyb2xsV2l0aEtleWJvYXJkIiwiaXNTaGlmdFByZXNzZWQiLCJzaGlmdEtleSIsImZvY3VzYWJsZUVsZW1lbnRzIiwiZ2V0Rm9jdXNhYmxlcyIsInByZXZlbnRBbmRGb2N1c0ZpcnN0IiwiYWxsRm9jdXNhYmxlcyIsImN1cnJlbnRGb2N1c0luZGV4IiwiZm9jdXNEZXN0aW5hdGlvbiIsImRlc3RpbmF0aW9uSXRlbVNsaWRlIiwiZGVzdGluYXRpb25JdGVtU2VjdGlvbiIsImlzRm9jdXNPdXRzaWRlIiwib25UYWIiLCJjdHJsS2V5Iiwic2hpZnRQcmVzc2VkIiwiaXNNZWRpYUZvY3VzZWQiLCJpc1VzaW5nSG9yaXpvbnRhbEFycm93S2V5cyIsImNhbmNlbERpcmVjdGlvbktleUV2ZW50cyIsIm9ua2V5ZG93biIsImJsdXJIYW5kbGVyIiwib2Zmc2V0UGFyZW50Iiwib25Cb2R5Q2xpY2siLCJzaG91bGRDYW5jZWxLZXlib2FyZE5hdmlnYXRpb24iLCJwcmV2VGltZSIsInNjcm9sbGluZ3MiLCJzZXRNb3VzZVdoZWVsU2Nyb2xsaW5nIiwiX2FkZEV2ZW50TGlzdGVuZXIiLCJwcmVmaXgiLCJzdXBwb3J0Iiwib25tb3VzZXdoZWVsIiwicGFzc2l2ZUV2ZW50IiwiTW91c2VXaGVlbEhhbmRsZXIiLCJhZGRNb3VzZVdoZWVsSGFuZGxlciIsIm1vdXNlRG93bkhhbmRsZXIiLCJtb3VzZVVwSGFuZGxlciIsImRldGFjaEV2ZW50IiwiaXNOb3JtYWxTY3JvbGwiLCJpc1Njcm9sbEFsbG93ZWRCZXlvbmRGdWxsUGFnZSIsInBhdXNlU2Nyb2xsIiwiZ19pc0Fib3V0VG9TY3JvbGxUb0Z1bGxQYWdlIiwiYmV5b25kRnVsbFBhZ2VIYW5kbGVyIiwid2hpY2giLCJzZXRNb3VzZUhpamFjayIsImFkZFRvdWNoSGFuZGxlciIsInJlbW92ZVRvdWNoSGFuZGxlciIsImdfY2FuRmlyZU1vdXNlRW50ZXJOb3JtYWxTY3JvbGwiLCJvbkRlc3Ryb3kkNCIsIm9uTW91c2VFbnRlck9yTGVhdmUiLCJmb3JNb3VzZUxlYXZlT3JUb3VjaCIsImFsbG93U2Nyb2xsaW5nIiwiaXNJbnNpZGVPbmVOb3JtYWxTY3JvbGwiLCJ0b0VsZW1lbnQiLCJyZWxhdGVkVGFyZ2V0Iiwibm9ybWFsU2VsZWN0b3IiLCJpc05vcm1hbFNjcm9sbFRhcmdldCIsImlzTm9ybWFsU2Nyb2xsQ2hpbGRGb2N1c2VkIiwiaXNOb3JtYWxTY3JvbGxFbGVtZW50Iiwic2lsZW50TW92ZVRvIiwiZ19yZXNpemVJZCIsImdfcmVzaXplTW9iaWxlSGFuZGxlcklkIiwicHJldmlvdXNIZWlnaHQiLCJ3aW5kb3dzV2lkdGgiLCJnX2lzQ29uc2VjdXRpdmVSZXNpemUiLCJvbkRlc3Ryb3kkMyIsInJlc2l6ZUhhbmRsZXIiLCJzZXRTZWN0aW9uc0hlaWdodCIsImZpdFRvQWN0aXZlU2VjdGlvbiIsInZoIiwic2V0UHJvcGVydHkiLCJzZXRWaFVuaXRzIiwiY3VycmVudEhlaWdodCIsInJlQnVpbGQiLCJuZXdXaW5kb3dIZWlnaHQiLCJuZXdXaW5kb3dXaWR0aCIsInJlc2l6ZUFjdGlvbnMiLCJyZXNpemluZyIsInNsaWRlc1dyYXAiLCJwcm9wZXJ0eVZhbHVlIiwiZ2V0QW5jaG9yc1VSTCIsImFuY2hvcnNQYXJ0cyIsImlzRnVua3lBbmNob3IiLCJkZWNvZGVVUklDb21wb25lbnQiLCJvbkRlc3Ryb3kkMiIsImhhc2hDaGFuZ2VIYW5kbGVyIiwiaXNGaXJzdFNsaWRlTW92ZSIsImlzRmlyc3RTY3JvbGxNb3ZlIiwib25DbGlja09yVG91Y2gkMSIsIm1lbnVJdGVtc0hhbmRsZXIiLCJvbkNsaWNrT3JUb3VjaCIsInNldExvY2tBbmNob3JzIiwiZ19zY3JvbGxJZCIsImxhc3RTY3JvbGwiLCJzY3JvbGxIYW5kbGVyIiwiY3VycmVudFNlY3Rpb24iLCJjdXJyZW50U2VjdGlvbkVsZW0iLCJtb3ZlbWVudCIsImN1cnJlbnRTY3JvbGwiLCJzY3JvbGxEaXJlY3Rpb24iLCJnZXRTY3JvbGxEaXJlY3Rpb24iLCJ2aXNpYmxlU2VjdGlvbkluZGV4Iiwic2NyZWVuX21pZCIsImlzQXRCb3R0b20iLCJsZWF2aW5nU2VjdGlvbiIsImxlYXZpbmdTZWN0aW9uSW5kZXgiLCJjYWxsYmFja3NQYXJhbXMiLCJzZWN0aW9uVmFsdWVzIiwic2V0S2V5Ym9hcmRTY3JvbGxpbmciLCJkaXJlY3Rpb25zIiwic3R5bGVNZW51IiwicHJlcGFyZURvbSIsInRvcFBhcmVudFNlbGVjdG9yIiwicGFyZW50cyIsImdldFBhcmVudHNVbnRpbCIsImFmdGVyUmVuZGVyQWN0aW9ucyIsImRlc3RpbmF0aW9uU2VjdGlvbiIsInNldEFsbG93U2Nyb2xsaW5nIiwic2Nyb2xsVG9BbmNob3IiLCJkZXN0cm95U3RydWN0dXJlIiwiZ19zY3JvbGxJZDIiLCJnZXRBY3RpdmVTbGlkZSIsImdldFNjcm9sbFgiLCJwb3NpdGlvblN0eWxlIiwid2F0ZXJNYXJrIiwibGFiZWwiLCJsYXN0U2VjdGlvbiIsInNob3VsZFVzZVdhdGVyTWFyayIsImVuYWJsZWQiLCJpc1ZhbGlkIiwiaW5zZXJ0QWRqYWNlbnRIVE1MIiwibiIsInMiLCJwYXJzZUludCIsInQiLCJyIiwibCIsInAiLCJjIiwiX3IiLCJjaGFyQ29kZUF0IiwiZnJvbUNoYXJDb2RlIiwidG9VcHBlckNhc2UiLCJkZXN0cm95IiwiYWxsIiwiZGlzcGxheVdhcm5pbmdzIiwibXNnU3R5bGUiLCJkb21haW4iLCJ3YXJuIiwiZXh0ZW5zaW9uIiwibmFtZUF0dHIiLCJ0b0xvd2VyQ2FzZSIsImlkQXR0ciIsInByb3BlcnR5TmFtZSIsImZ1bGxwYWdlIiwiY29udGFpbmVyU2VsZWN0b3IiLCJzZXRPcHRpb25zIiwic2V0Q29udGFpbmVyIiwiZ2V0RnVsbHBhZ2VEYXRhIiwidmVyc2lvbiIsImZ1bGxwYWdlX2FwaSIsInJlYWR5U3RhdGUiLCJlYXNlSW5PdXRDdWJpYyIsImIiLCJkIiwialF1ZXJ5IiwiZXh0ZW5kIiwiZmFjdG9yeSIsIl9faW1wb3J0RGVmYXVsdCIsIm1vZCIsIl9fZXNNb2R1bGUiLCJmdWxscGFnZV9qc18xIiwicHJvamVjdF9qc29uXzEiLCJkZWZhdWx0IiwiU2VjdGlvbnMiLCJwYXJhbGxheEVsZW1lbnRzIiwiZWxlbSIsInciLCJ3aWR0aCIsImgiLCJoZWlnaHQiLCJkZXB0aCIsImNsaWVudFgiLCJjbGllbnRZIiwidHJhbnNmb3JtIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyJdLCJzb3VyY2VSb290IjoiIn0=